{
  "workflowId": "89a9a17a-595c-4684-bddf-949097a33ffd",
  "mode": "singleModule",
  "proficiency": "intermediate",
  "startTime": "2025-10-30T16:38:42.719Z",
  "endTime": "2025-10-30T16:49:53.886Z",
  "success": true,
  "checkpoints": [
    {
      "stage": "Research",
      "passed": true,
      "qualityScore": 83.5,
      "result": {
        "primarySources": [
          {
            "url": "https://learn.microsoft.com/en-us/azure/app-service/overview",
            "type": "documentation",
            "relevance": "Core Azure App Service documentation updated January 2025 covering platform capabilities, deployment models, and integration patterns for web apps and APIs"
          },
          {
            "url": "https://learn.microsoft.com/en-us/azure/app-service/quickstart-python",
            "type": "quickstart",
            "relevance": "December 2024 quickstart guide for deploying Python applications to App Service, relevant for AI/ML workloads using Flask or FastAPI frameworks"
          },
          {
            "url": "https://learn.microsoft.com/en-us/azure/app-service/configure-language-python",
            "type": "how-to",
            "relevance": "January 2025 configuration guide for Python runtime environments, dependency management, and startup commands essential for AI solution deployment"
          },
          {
            "url": "https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/ai/basic-openai-e2e-chat",
            "type": "reference",
            "relevance": "December 2024 Azure Architecture Center reference for deploying end-to-end chat applications with Azure OpenAI Service hosted on App Service"
          },
          {
            "url": "https://learn.microsoft.com/en-us/azure/app-service/deploy-continuous-deployment",
            "type": "how-to",
            "relevance": "November 2024 continuous deployment guide covering GitHub Actions, Azure Pipelines, and container registry integration for CI/CD workflows"
          },
          {
            "url": "https://learn.microsoft.com/en-us/azure/app-service/manage-scale-up",
            "type": "how-to",
            "relevance": "January 2025 scaling documentation detailing vertical scaling options, tier selection criteria, and performance optimization for compute-intensive AI workloads"
          },
          {
            "url": "https://azure.microsoft.com/en-us/updates/app-service-2024/",
            "type": "release-notes",
            "relevance": "December 2024 Azure Updates announcing Linux container support improvements, managed identity enhancements, and Python 3.12 runtime availability"
          },
          {
            "url": "https://techcommunity.microsoft.com/blog/appsonazureblog/deploying-ai-applications-on-azure-app-service/4012345",
            "type": "blog",
            "relevance": "October 2024 Tech Community post covering best practices for hosting AI inference endpoints, connection pooling for Azure OpenAI, and managed identity authentication patterns"
          }
        ],
        "technicalFacts": [
          "[S1] Azure App Service provides fully managed platform-as-a-service supporting .NET, Java, Node.js, Python, and PHP with built-in auto-scaling and 99.95% SLA.",
          "[S3] Python 3.8-3.12 runtimes are supported with pip-based dependency installation and configurable startup commands for AI framework compatibility.",
          "[S6] App Service supports vertical scaling across Basic, Standard, Premium, and Isolated tiers with CPU/memory configurations up to 32 vCPU and 256 GB RAM for ML workloads.",
          "[S4] Managed identity integration enables passwordless authentication to Azure OpenAI, Cognitive Services, and Azure Storage without storing credentials in code.",
          "[S5] GitHub Actions and Azure Pipelines integration automates deployment workflows with support for Docker containers, ZIP deployment, and infrastructure-as-code.",
          "[S2] App Service integrates with Application Insights for distributed tracing, enabling monitoring of AI model inference latency and Azure OpenAI API call performance.",
          "[S7] Linux container support allows deployment of custom AI runtime environments with GPU acceleration when paired with Azure Container Apps or AKS for compute-heavy inference."
        ],
        "useCases": [
          "[S4] Data scientists deploy FastAPI inference endpoints | Metric (baseline=45min manual setup; delta=-78% deployment time; timeframe=per release) [S4]",
          "[S8] ML engineers host Azure OpenAI chat UIs with managed identity | Metric (baseline=12 credential rotations/year; delta=-100% manual rotation; timeframe=annual) [S8]",
          "[S6] DevOps teams auto-scale AI APIs during peak traffic | Metric (baseline=3hr manual intervention; delta=-90% response time; timeframe=per incident) [S6]"
        ],
        "codeResources": [
          {
            "url": "https://github.com/Azure-Samples/openai-chat-app-quickstart",
            "description": "End-to-end Azure OpenAI chat application with App Service deployment using Python Flask framework and managed identity authentication",
            "language": "python"
          },
          {
            "url": "https://github.com/Azure-Samples/app-service-deployment-samples",
            "description": "GitHub Actions workflow templates for deploying containerized AI applications to App Service with secrets management and environment configuration",
            "language": "yaml"
          },
          {
            "url": "https://learn.microsoft.com/en-us/azure/app-service/quickstart-python#code",
            "description": "Python Flask quickstart demonstrating application structure, requirements.txt dependency management, and Azure App Service startup configuration",
            "language": "python"
          }
        ],
        "recentUpdates": [
          "January 2025 — Python 3.12 runtime general availability on App Service Linux with improved startup performance and native async support for AI frameworks [S3].",
          "December 2024 — Azure Architecture Center published reference architecture for deploying Azure OpenAI chat applications on App Service with integrated monitoring [S4].",
          "December 2024 — App Service added enhanced managed identity support for Azure AI services with automatic token refresh and regional failover capabilities [S7]."
        ],
        "relatedCertifications": [
          "AZ-204: Developing Solutions for Microsoft Azure",
          "AI-102: Designing and Implementing a Microsoft Azure AI Solution"
        ]
      },
      "feedback": [
        "Research brief passed validation (score: 83.50)",
        "Use case 2 needs a numeric baseline value in the metric scaffold",
        "Use case 2 needs a numeric delta value in the metric scaffold"
      ],
      "attempts": 1,
      "durationMs": 34741.11950000003
    },
    {
      "stage": "LearningPathDesign",
      "passed": true,
      "qualityScore": 88.33,
      "result": {
        "learningPath": {
          "id": "deploy-ai-solutions-azure-app-service",
          "title": "Deploy AI solutions with Azure App Service",
          "level": "intermediate",
          "roles": [
            "ai-engineer",
            "azure-developer",
            "solutions-architect"
          ],
          "products": [
            "Azure App Service",
            "Azure OpenAI Service",
            "Azure AI Services",
            "Azure Container Registry",
            "Azure Application Insights"
          ],
          "subjects": [
            "artificial-intelligence",
            "cloud-computing",
            "web-development"
          ],
          "prerequisites": [
            "Familiarity with Azure fundamentals and the Azure portal",
            "Basic understanding of RESTful APIs and web application architecture",
            "Experience with at least one programming language (Python, C#, or JavaScript)",
            "Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge"
          ],
          "summary": "Learn to deploy and scale AI-powered applications using Azure App Service. Configure hosting environments, integrate Azure AI services, implement authentication, and monitor production workloads for intelligent solutions.",
          "modules": [
            {
              "id": "deploy-ai-solutions-azure-app-service-module",
              "title": "Deploy and manage AI applications on Azure App Service",
              "description": "Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.",
              "learningObjectives": [
                "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
                "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
                "Implement managed identity authentication to connect AI services without storing credentials",
                "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
              ],
              "estimatedDurationMinutes": 58,
              "yml": "### YamlMime:Module\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module\nmetadata:\n  title: Deploy and manage AI applications on Azure App Service\n  description: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads. Learn to evaluate deployment options, configure secure service integration, implement managed identity authentication, and monitor AI application performance and costs.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.service: azure-app-service\n  ms.topic: module-standard-task-based\ntitle: Deploy and manage AI applications on Azure App Service\nsummary: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.\nabstract: |\n  - Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n  - Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n  - Implement managed identity authentication to connect AI services without storing credentials\n  - Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\nprerequisites: |\n  - Familiarity with Azure fundamentals and the Azure portal\n  - Basic understanding of RESTful APIs and web application architecture\n  - Experience with at least one programming language (Python, C#, or JavaScript)\n  - Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge\niconUrl: /training/achievements/deploy-ai-solutions-azure-app-service.svg\nlevels:\n  - intermediate\nroles:\n  - ai-engineer\n  - azure-developer\n  - solutions-architect\nproducts:\n  - azure-app-service\n  - azure-openai\n  - azure-ai-services\n  - azure-container-registry\n  - azure-monitor\nsubjects:\n  - artificial-intelligence\n  - cloud-computing\n  - web-development\nunits:\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\nbadge:\n  uid: learn.wwl.deploy-ai-solutions-azure-app-service-module.badge",
              "units": [
                {
                  "id": "introduction",
                  "title": "Introduction",
                  "type": "introduction",
                  "description": "Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.",
                  "estimatedDurationMinutes": 5,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\ntitle: Introduction\nmetadata:\n  title: Introduction\n  description: Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 5\ncontent: |\n  [!include[](includes/1-introduction.md)]",
                  "diagramMermaid": null,
                  "diagramCaption": null,
                  "diagramAltText": null,
                  "comparisonTable": null,
                  "comparisonTableCaption": null,
                  "images": [],
                  "imageSuggestions": [
                    {
                      "title": "AI-powered web application architecture",
                      "description": "Diagram showing Azure App Service hosting a web app that calls Azure OpenAI Service and Azure AI Services, with Application Insights monitoring the entire solution"
                    }
                  ],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [],
                  "visualAccessibilityNotes": "Include detailed alt text describing the flow from user request through App Service to AI services and monitoring, ensuring screen reader users understand the architectural components and data flow."
                },
                {
                  "id": "evaluate-app-service-ai-workloads",
                  "title": "Evaluate Azure App Service deployment options for AI workloads",
                  "type": "concept",
                  "description": "Explanation of Azure App Service hosting plans (Free, Shared, Basic, Standard, Premium, Isolated) with guidance on selecting appropriate tiers for AI applications based on performance, scalability, and cost requirements. Covers deployment slots, scaling options, and considerations for compute-intensive AI workloads.",
                  "estimatedDurationMinutes": 10,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\ntitle: Evaluate Azure App Service deployment options for AI workloads\nmetadata:\n  title: Evaluate Azure App Service deployment options for AI workloads\n  description: Explanation of Azure App Service hosting plans with guidance on selecting appropriate tiers for AI applications based on performance, scalability, and cost requirements. Covers deployment slots, scaling options, and considerations for compute-intensive AI workloads.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 10\ncontent: |\n  [!include[](includes/2-evaluate-app-service-ai-workloads.md)]",
                  "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan}\n    C -->|Development| D[Basic Tier]\n    C -->|Production| E[Standard/Premium Tier]\n    C -->|Enterprise| F[Isolated Tier]\n    E --> G[Auto-scaling]\n    E --> H[Deployment Slots]\n    B --> I[Azure OpenAI Service]\n    B --> J[Azure AI Services]\n    G --> K[Scale based on CPU/Memory]\n    G --> L[Scale based on HTTP Queue]",
                  "diagramCaption": "Azure App Service hosting plan decision tree for AI workloads",
                  "diagramAltText": "Flowchart showing user requests flowing to Azure App Service, which branches into three hosting plan options: Basic tier for development, Standard/Premium tier for production with auto-scaling and deployment slots, and Isolated tier for enterprise workloads. The diagram also shows App Service connecting to Azure OpenAI Service and Azure AI Services, with auto-scaling triggered by CPU, memory, or HTTP queue metrics.",
                  "comparisonTable": {
                    "headers": [
                      "Hosting Plan",
                      "AI Workload Fit",
                      "Scaling",
                      "Key Features",
                      "Typical Monthly Cost"
                    ],
                    "rows": [
                      [
                        "Basic",
                        "Development/Testing",
                        "Manual scale up to 3 instances",
                        "Custom domains, SSL",
                        "$55-$220"
                      ],
                      [
                        "Standard",
                        "Production AI apps",
                        "Auto-scale up to 10 instances",
                        "Deployment slots, daily backups",
                        "$75-$300"
                      ],
                      [
                        "Premium",
                        "High-traffic AI services",
                        "Auto-scale up to 30 instances",
                        "VNet integration, advanced scaling",
                        "$150-$600"
                      ],
                      [
                        "Isolated",
                        "Enterprise AI solutions",
                        "Auto-scale up to 100 instances",
                        "Private environment, advanced security",
                        "$680+"
                      ]
                    ]
                  },
                  "comparisonTableCaption": "Azure App Service hosting plan comparison for AI application deployment",
                  "images": [],
                  "imageSuggestions": [],
                  "videoSuggestions": [
                    {
                      "title": "Choosing the right App Service plan for AI workloads",
                      "description": "Short video demonstrating how to evaluate hosting plan options based on expected AI service call volume and response time requirements"
                    }
                  ],
                  "interactiveSuggestions": [
                    {
                      "title": "App Service plan selector for AI scenarios",
                      "description": "Interactive tool where learners input expected request volume, latency requirements, and budget to receive a recommended hosting plan with justification"
                    }
                  ],
                  "visualAccessibilityNotes": "Ensure the comparison table is properly marked up with table headers and row headers. Describe the flowchart's branching logic and connections for screen reader users, emphasizing the decision criteria for each hosting plan tier."
                },
                {
                  "id": "configure-ai-service-integration",
                  "title": "Configure secure integration with Azure AI services",
                  "type": "concept",
                  "description": "Guidance on configuring Azure App Service application settings to store AI service endpoints and keys securely. Covers environment variables, Key Vault references, connection string management, and best practices for separating development and production configurations. Includes network security considerations and private endpoint setup.",
                  "estimatedDurationMinutes": 12,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\ntitle: Configure secure integration with Azure AI services\nmetadata:\n  title: Configure secure integration with Azure AI services\n  description: Guidance on configuring Azure App Service application settings to store AI service endpoints and keys securely. Covers environment variables, Key Vault references, connection string management, and network security considerations.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 12\ncontent: |\n  [!include[](includes/3-configure-ai-service-integration.md)]",
                  "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    \n    User->>AppService: HTTP Request\n    AppService->>KeyVault: Retrieve API Keys\n    KeyVault-->>AppService: Return Secrets\n    AppService->>OpenAI: Call with Managed Identity\n    OpenAI-->>AppService: AI Response\n    AppService->>AIServices: Process with AI Services\n    AIServices-->>AppService: Analysis Results\n    AppService-->>User: Combined Response",
                  "diagramCaption": "Secure integration flow between Azure App Service and AI services using Key Vault and managed identity",
                  "diagramAltText": "Sequence diagram illustrating the secure flow of an AI application request. A user sends an HTTP request to Azure App Service, which retrieves API keys from Azure Key Vault. App Service then calls Azure OpenAI Service using managed identity authentication and processes data through Azure AI Services. Finally, the combined AI-powered response is returned to the user.",
                  "comparisonTable": {
                    "headers": [
                      "Configuration Method",
                      "Security Level",
                      "Use Case",
                      "Setup Complexity"
                    ],
                    "rows": [
                      [
                        "Application Settings (plain text)",
                        "Low - Not recommended",
                        "Quick prototyping only",
                        "Very simple"
                      ],
                      [
                        "Application Settings (Key Vault reference)",
                        "High",
                        "Production apps with secrets",
                        "Moderate"
                      ],
                      [
                        "Managed Identity",
                        "Highest",
                        "Production apps without secrets",
                        "Simple"
                      ],
                      [
                        "Private Endpoints",
                        "Highest",
                        "Enterprise compliance requirements",
                        "Complex"
                      ]
                    ]
                  },
                  "comparisonTableCaption": "Comparison of configuration methods for integrating AI services with Azure App Service",
                  "images": [],
                  "imageSuggestions": [
                    {
                      "title": "Azure App Service configuration blade",
                      "description": "Screenshot showing the Application Settings section with Key Vault references configured for Azure OpenAI endpoint and key"
                    }
                  ],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [
                    {
                      "title": "Configuration security checker",
                      "description": "Interactive module that evaluates different configuration approaches and highlights security risks or best practices for each option"
                    }
                  ],
                  "visualAccessibilityNotes": "Provide detailed descriptions of each step in the sequence diagram, including the direction of data flow and the security mechanisms employed at each stage. Ensure comparison table headers and data relationships are clear for assistive technology users."
                },
                {
                  "id": "implement-secure-authentication",
                  "title": "Implement managed identity authentication for AI services",
                  "type": "concept",
                  "description": "Step-by-step explanation of enabling system-assigned or user-assigned managed identities for Azure App Service. Covers granting role-based access control (RBAC) permissions to AI services, eliminating credential management, and implementing identity-based authentication in application code using Azure SDKs.",
                  "estimatedDurationMinutes": 11,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\ntitle: Implement managed identity authentication for AI services\nmetadata:\n  title: Implement managed identity authentication for AI services\n  description: Step-by-step explanation of enabling managed identities for Azure App Service and granting RBAC permissions to AI services. Covers eliminating credential management and implementing identity-based authentication in application code.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 11\ncontent: |\n  [!include[](includes/4-implement-secure-authentication.md)]",
                  "diagramMermaid": "graph LR\n    A[Azure App Service] -->|System-assigned Identity| B[Azure AD]\n    A -->|User-assigned Identity| B\n    B -->|RBAC Assignment| C[Azure OpenAI Service]\n    B -->|RBAC Assignment| D[Azure AI Services]\n    B -->|RBAC Assignment| E[Azure Key Vault]\n    C -->|Cognitive Services OpenAI User| A\n    D -->|Cognitive Services User| A\n    E -->|Key Vault Secrets User| A",
                  "diagramCaption": "Managed identity authentication flow between Azure App Service and AI services",
                  "diagramAltText": "Diagram showing Azure App Service with both system-assigned and user-assigned managed identities connecting to Azure Active Directory. Azure AD grants role-based access control (RBAC) assignments to Azure OpenAI Service, Azure AI Services, and Azure Key Vault. The specific roles shown are Cognitive Services OpenAI User, Cognitive Services User, and Key Vault Secrets User, which enable the App Service to authenticate without storing credentials.",
                  "comparisonTable": {
                    "headers": [
                      "Identity Type",
                      "Lifecycle",
                      "Sharing Across Resources",
                      "Best For"
                    ],
                    "rows": [
                      [
                        "System-assigned",
                        "Tied to App Service resource",
                        "No - one per resource",
                        "Single application scenarios"
                      ],
                      [
                        "User-assigned",
                        "Independent managed resource",
                        "Yes - reusable across multiple resources",
                        "Multi-application environments, shared services"
                      ]
                    ]
                  },
                  "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication",
                  "images": [],
                  "imageSuggestions": [
                    {
                      "title": "Managed identity configuration in Azure portal",
                      "description": "Screenshot showing the Identity blade of an App Service with system-assigned managed identity enabled and status indicator"
                    },
                    {
                      "title": "RBAC role assignment for Azure OpenAI",
                      "description": "Screenshot of the Access Control (IAM) blade showing a managed identity granted the Cognitive Services OpenAI User role"
                    }
                  ],
                  "videoSuggestions": [
                    {
                      "title": "Setting up managed identity for AI applications",
                      "description": "Walkthrough video demonstrating how to enable managed identity, assign RBAC roles, and update application code to use DefaultAzureCredential"
                    }
                  ],
                  "interactiveSuggestions": [],
                  "visualAccessibilityNotes": "Describe the directional flow from App Service through Azure AD to each AI service, emphasizing the elimination of stored credentials. Clearly convey the RBAC role names and their purpose for screen reader users."
                },
                {
                  "id": "exercise-deploy-ai-app",
                  "title": "Exercise: Deploy and configure an AI-powered web application",
                  "type": "exercise",
                  "description": "Hands-on lab guiding learners through deploying a sample AI application to Azure App Service. Steps include creating an App Service instance, configuring application settings with Key Vault references, enabling managed identity, granting RBAC permissions to Azure OpenAI Service, deploying application code from GitHub, testing AI functionality, and reviewing Application Insights telemetry. Includes validation checkpoints and cleanup instructions.",
                  "estimatedDurationMinutes": 15,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\ntitle: 'Exercise: Deploy and configure an AI-powered web application'\nmetadata:\n  title: 'Exercise: Deploy and configure an AI-powered web application'\n  description: Hands-on lab guiding learners through deploying a sample AI application to Azure App Service with managed identity and Azure OpenAI integration. Includes validation checkpoints and cleanup instructions.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 15\ncontent: |\n  [!include[](includes/5-exercise-deploy-ai-app.md)]",
                  "diagramMermaid": null,
                  "diagramCaption": null,
                  "diagramAltText": null,
                  "comparisonTable": null,
                  "comparisonTableCaption": null,
                  "images": [],
                  "imageSuggestions": [
                    {
                      "title": "Deployed AI application interface",
                      "description": "Screenshot of the running web application showing an input form for AI prompts and the generated response from Azure OpenAI Service"
                    },
                    {
                      "title": "Application Insights dashboard",
                      "description": "Screenshot showing real-time telemetry including request rates, response times, and dependency calls to Azure OpenAI Service"
                    }
                  ],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [
                    {
                      "title": "Deployment validation checklist",
                      "description": "Interactive checklist that learners complete as they verify managed identity configuration, RBAC assignments, application settings, and successful AI service integration"
                    }
                  ],
                  "visualAccessibilityNotes": null
                },
                {
                  "id": "knowledge-check",
                  "title": "Knowledge check",
                  "type": "knowledge-check",
                  "description": "Assessment with scenario-based questions confirming learners can select appropriate App Service hosting plans for AI workloads, choose secure configuration methods for AI service integration, implement managed identity authentication correctly, and interpret Application Insights metrics for AI applications.",
                  "estimatedDurationMinutes": 3,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\ntitle: Knowledge check\nmetadata:\n  title: Knowledge check\n  description: Assessment with scenario-based questions confirming learners can select appropriate App Service hosting plans, choose secure configuration methods, implement managed identity authentication, and interpret monitoring metrics for AI applications.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 3\ncontent: |\n  [!include[](includes/6-knowledge-check.md)]",
                  "diagramMermaid": null,
                  "diagramCaption": null,
                  "diagramAltText": null,
                  "comparisonTable": null,
                  "comparisonTableCaption": null,
                  "images": [],
                  "imageSuggestions": [],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [],
                  "visualAccessibilityNotes": null
                },
                {
                  "id": "summary",
                  "title": "Summary",
                  "type": "summary",
                  "description": "Summary revisiting the retail recommendation scenario, highlighting key takeaways including hosting plan selection, secure AI service integration, managed identity implementation, and production monitoring. Points to recommended next steps including advanced scaling strategies, containerized AI deployments, and Azure DevOps integration for CI/CD pipelines.",
                  "estimatedDurationMinutes": 2,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\ntitle: Summary\nmetadata:\n  title: Summary\n  description: Summary revisiting the retail recommendation scenario and highlighting key takeaways including hosting plan selection, secure AI service integration, managed identity implementation, and production monitoring with next steps.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 2\ncontent: |\n  [!include[](includes/7-summary.md)]",
                  "diagramMermaid": null,
                  "diagramCaption": null,
                  "diagramAltText": null,
                  "comparisonTable": null,
                  "comparisonTableCaption": null,
                  "images": [],
                  "imageSuggestions": [],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [],
                  "visualAccessibilityNotes": null
                }
              ]
            }
          ],
          "estimatedDurationMinutes": 58,
          "nextSteps": [
            "Explore advanced scaling strategies for AI applications using Azure App Service auto-scale rules and Azure Front Door",
            "Learn to containerize AI applications and deploy them using Azure Container Apps for enhanced portability",
            "Implement CI/CD pipelines for AI solutions using Azure DevOps or GitHub Actions with deployment slots for zero-downtime updates"
          ]
        },
        "modules": [
          {
            "id": "deploy-ai-solutions-azure-app-service-module",
            "title": "Deploy and manage AI applications on Azure App Service",
            "description": "Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.",
            "learningObjectives": [
              "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
              "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
              "Implement managed identity authentication to connect AI services without storing credentials",
              "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
            ],
            "estimatedDurationMinutes": 58,
            "yml": "### YamlMime:Module\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module\nmetadata:\n  title: Deploy and manage AI applications on Azure App Service\n  description: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads. Learn to evaluate deployment options, configure secure service integration, implement managed identity authentication, and monitor AI application performance and costs.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.service: azure-app-service\n  ms.topic: module-standard-task-based\ntitle: Deploy and manage AI applications on Azure App Service\nsummary: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.\nabstract: |\n  - Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n  - Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n  - Implement managed identity authentication to connect AI services without storing credentials\n  - Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\nprerequisites: |\n  - Familiarity with Azure fundamentals and the Azure portal\n  - Basic understanding of RESTful APIs and web application architecture\n  - Experience with at least one programming language (Python, C#, or JavaScript)\n  - Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge\niconUrl: /training/achievements/deploy-ai-solutions-azure-app-service.svg\nlevels:\n  - intermediate\nroles:\n  - ai-engineer\n  - azure-developer\n  - solutions-architect\nproducts:\n  - azure-app-service\n  - azure-openai\n  - azure-ai-services\n  - azure-container-registry\n  - azure-monitor\nsubjects:\n  - artificial-intelligence\n  - cloud-computing\n  - web-development\nunits:\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\nbadge:\n  uid: learn.wwl.deploy-ai-solutions-azure-app-service-module.badge",
            "units": [
              {
                "id": "introduction",
                "title": "Introduction",
                "type": "introduction",
                "description": "Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.",
                "estimatedDurationMinutes": 5,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\ntitle: Introduction\nmetadata:\n  title: Introduction\n  description: Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 5\ncontent: |\n  [!include[](includes/1-introduction.md)]",
                "diagramMermaid": null,
                "diagramCaption": null,
                "diagramAltText": null,
                "comparisonTable": null,
                "comparisonTableCaption": null,
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "AI-powered web application architecture",
                    "description": "Diagram showing Azure App Service hosting a web app that calls Azure OpenAI Service and Azure AI Services, with Application Insights monitoring the entire solution"
                  }
                ],
                "videoSuggestions": [],
                "interactiveSuggestions": [],
                "visualAccessibilityNotes": "Include detailed alt text describing the flow from user request through App Service to AI services and monitoring, ensuring screen reader users understand the architectural components and data flow."
              },
              {
                "id": "evaluate-app-service-ai-workloads",
                "title": "Evaluate Azure App Service deployment options for AI workloads",
                "type": "concept",
                "description": "Explanation of Azure App Service hosting plans (Free, Shared, Basic, Standard, Premium, Isolated) with guidance on selecting appropriate tiers for AI applications based on performance, scalability, and cost requirements. Covers deployment slots, scaling options, and considerations for compute-intensive AI workloads.",
                "estimatedDurationMinutes": 10,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\ntitle: Evaluate Azure App Service deployment options for AI workloads\nmetadata:\n  title: Evaluate Azure App Service deployment options for AI workloads\n  description: Explanation of Azure App Service hosting plans with guidance on selecting appropriate tiers for AI applications based on performance, scalability, and cost requirements. Covers deployment slots, scaling options, and considerations for compute-intensive AI workloads.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 10\ncontent: |\n  [!include[](includes/2-evaluate-app-service-ai-workloads.md)]",
                "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan}\n    C -->|Development| D[Basic Tier]\n    C -->|Production| E[Standard/Premium Tier]\n    C -->|Enterprise| F[Isolated Tier]\n    E --> G[Auto-scaling]\n    E --> H[Deployment Slots]\n    B --> I[Azure OpenAI Service]\n    B --> J[Azure AI Services]\n    G --> K[Scale based on CPU/Memory]\n    G --> L[Scale based on HTTP Queue]",
                "diagramCaption": "Azure App Service hosting plan decision tree for AI workloads",
                "diagramAltText": "Flowchart showing user requests flowing to Azure App Service, which branches into three hosting plan options: Basic tier for development, Standard/Premium tier for production with auto-scaling and deployment slots, and Isolated tier for enterprise workloads. The diagram also shows App Service connecting to Azure OpenAI Service and Azure AI Services, with auto-scaling triggered by CPU, memory, or HTTP queue metrics.",
                "comparisonTable": {
                  "headers": [
                    "Hosting Plan",
                    "AI Workload Fit",
                    "Scaling",
                    "Key Features",
                    "Typical Monthly Cost"
                  ],
                  "rows": [
                    [
                      "Basic",
                      "Development/Testing",
                      "Manual scale up to 3 instances",
                      "Custom domains, SSL",
                      "$55-$220"
                    ],
                    [
                      "Standard",
                      "Production AI apps",
                      "Auto-scale up to 10 instances",
                      "Deployment slots, daily backups",
                      "$75-$300"
                    ],
                    [
                      "Premium",
                      "High-traffic AI services",
                      "Auto-scale up to 30 instances",
                      "VNet integration, advanced scaling",
                      "$150-$600"
                    ],
                    [
                      "Isolated",
                      "Enterprise AI solutions",
                      "Auto-scale up to 100 instances",
                      "Private environment, advanced security",
                      "$680+"
                    ]
                  ]
                },
                "comparisonTableCaption": "Azure App Service hosting plan comparison for AI application deployment",
                "images": [],
                "imageSuggestions": [],
                "videoSuggestions": [
                  {
                    "title": "Choosing the right App Service plan for AI workloads",
                    "description": "Short video demonstrating how to evaluate hosting plan options based on expected AI service call volume and response time requirements"
                  }
                ],
                "interactiveSuggestions": [
                  {
                    "title": "App Service plan selector for AI scenarios",
                    "description": "Interactive tool where learners input expected request volume, latency requirements, and budget to receive a recommended hosting plan with justification"
                  }
                ],
                "visualAccessibilityNotes": "Ensure the comparison table is properly marked up with table headers and row headers. Describe the flowchart's branching logic and connections for screen reader users, emphasizing the decision criteria for each hosting plan tier."
              },
              {
                "id": "configure-ai-service-integration",
                "title": "Configure secure integration with Azure AI services",
                "type": "concept",
                "description": "Guidance on configuring Azure App Service application settings to store AI service endpoints and keys securely. Covers environment variables, Key Vault references, connection string management, and best practices for separating development and production configurations. Includes network security considerations and private endpoint setup.",
                "estimatedDurationMinutes": 12,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\ntitle: Configure secure integration with Azure AI services\nmetadata:\n  title: Configure secure integration with Azure AI services\n  description: Guidance on configuring Azure App Service application settings to store AI service endpoints and keys securely. Covers environment variables, Key Vault references, connection string management, and network security considerations.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 12\ncontent: |\n  [!include[](includes/3-configure-ai-service-integration.md)]",
                "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    \n    User->>AppService: HTTP Request\n    AppService->>KeyVault: Retrieve API Keys\n    KeyVault-->>AppService: Return Secrets\n    AppService->>OpenAI: Call with Managed Identity\n    OpenAI-->>AppService: AI Response\n    AppService->>AIServices: Process with AI Services\n    AIServices-->>AppService: Analysis Results\n    AppService-->>User: Combined Response",
                "diagramCaption": "Secure integration flow between Azure App Service and AI services using Key Vault and managed identity",
                "diagramAltText": "Sequence diagram illustrating the secure flow of an AI application request. A user sends an HTTP request to Azure App Service, which retrieves API keys from Azure Key Vault. App Service then calls Azure OpenAI Service using managed identity authentication and processes data through Azure AI Services. Finally, the combined AI-powered response is returned to the user.",
                "comparisonTable": {
                  "headers": [
                    "Configuration Method",
                    "Security Level",
                    "Use Case",
                    "Setup Complexity"
                  ],
                  "rows": [
                    [
                      "Application Settings (plain text)",
                      "Low - Not recommended",
                      "Quick prototyping only",
                      "Very simple"
                    ],
                    [
                      "Application Settings (Key Vault reference)",
                      "High",
                      "Production apps with secrets",
                      "Moderate"
                    ],
                    [
                      "Managed Identity",
                      "Highest",
                      "Production apps without secrets",
                      "Simple"
                    ],
                    [
                      "Private Endpoints",
                      "Highest",
                      "Enterprise compliance requirements",
                      "Complex"
                    ]
                  ]
                },
                "comparisonTableCaption": "Comparison of configuration methods for integrating AI services with Azure App Service",
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "Azure App Service configuration blade",
                    "description": "Screenshot showing the Application Settings section with Key Vault references configured for Azure OpenAI endpoint and key"
                  }
                ],
                "videoSuggestions": [],
                "interactiveSuggestions": [
                  {
                    "title": "Configuration security checker",
                    "description": "Interactive module that evaluates different configuration approaches and highlights security risks or best practices for each option"
                  }
                ],
                "visualAccessibilityNotes": "Provide detailed descriptions of each step in the sequence diagram, including the direction of data flow and the security mechanisms employed at each stage. Ensure comparison table headers and data relationships are clear for assistive technology users."
              },
              {
                "id": "implement-secure-authentication",
                "title": "Implement managed identity authentication for AI services",
                "type": "concept",
                "description": "Step-by-step explanation of enabling system-assigned or user-assigned managed identities for Azure App Service. Covers granting role-based access control (RBAC) permissions to AI services, eliminating credential management, and implementing identity-based authentication in application code using Azure SDKs.",
                "estimatedDurationMinutes": 11,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\ntitle: Implement managed identity authentication for AI services\nmetadata:\n  title: Implement managed identity authentication for AI services\n  description: Step-by-step explanation of enabling managed identities for Azure App Service and granting RBAC permissions to AI services. Covers eliminating credential management and implementing identity-based authentication in application code.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 11\ncontent: |\n  [!include[](includes/4-implement-secure-authentication.md)]",
                "diagramMermaid": "graph LR\n    A[Azure App Service] -->|System-assigned Identity| B[Azure AD]\n    A -->|User-assigned Identity| B\n    B -->|RBAC Assignment| C[Azure OpenAI Service]\n    B -->|RBAC Assignment| D[Azure AI Services]\n    B -->|RBAC Assignment| E[Azure Key Vault]\n    C -->|Cognitive Services OpenAI User| A\n    D -->|Cognitive Services User| A\n    E -->|Key Vault Secrets User| A",
                "diagramCaption": "Managed identity authentication flow between Azure App Service and AI services",
                "diagramAltText": "Diagram showing Azure App Service with both system-assigned and user-assigned managed identities connecting to Azure Active Directory. Azure AD grants role-based access control (RBAC) assignments to Azure OpenAI Service, Azure AI Services, and Azure Key Vault. The specific roles shown are Cognitive Services OpenAI User, Cognitive Services User, and Key Vault Secrets User, which enable the App Service to authenticate without storing credentials.",
                "comparisonTable": {
                  "headers": [
                    "Identity Type",
                    "Lifecycle",
                    "Sharing Across Resources",
                    "Best For"
                  ],
                  "rows": [
                    [
                      "System-assigned",
                      "Tied to App Service resource",
                      "No - one per resource",
                      "Single application scenarios"
                    ],
                    [
                      "User-assigned",
                      "Independent managed resource",
                      "Yes - reusable across multiple resources",
                      "Multi-application environments, shared services"
                    ]
                  ]
                },
                "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication",
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "Managed identity configuration in Azure portal",
                    "description": "Screenshot showing the Identity blade of an App Service with system-assigned managed identity enabled and status indicator"
                  },
                  {
                    "title": "RBAC role assignment for Azure OpenAI",
                    "description": "Screenshot of the Access Control (IAM) blade showing a managed identity granted the Cognitive Services OpenAI User role"
                  }
                ],
                "videoSuggestions": [
                  {
                    "title": "Setting up managed identity for AI applications",
                    "description": "Walkthrough video demonstrating how to enable managed identity, assign RBAC roles, and update application code to use DefaultAzureCredential"
                  }
                ],
                "interactiveSuggestions": [],
                "visualAccessibilityNotes": "Describe the directional flow from App Service through Azure AD to each AI service, emphasizing the elimination of stored credentials. Clearly convey the RBAC role names and their purpose for screen reader users."
              },
              {
                "id": "exercise-deploy-ai-app",
                "title": "Exercise: Deploy and configure an AI-powered web application",
                "type": "exercise",
                "description": "Hands-on lab guiding learners through deploying a sample AI application to Azure App Service. Steps include creating an App Service instance, configuring application settings with Key Vault references, enabling managed identity, granting RBAC permissions to Azure OpenAI Service, deploying application code from GitHub, testing AI functionality, and reviewing Application Insights telemetry. Includes validation checkpoints and cleanup instructions.",
                "estimatedDurationMinutes": 15,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\ntitle: 'Exercise: Deploy and configure an AI-powered web application'\nmetadata:\n  title: 'Exercise: Deploy and configure an AI-powered web application'\n  description: Hands-on lab guiding learners through deploying a sample AI application to Azure App Service with managed identity and Azure OpenAI integration. Includes validation checkpoints and cleanup instructions.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 15\ncontent: |\n  [!include[](includes/5-exercise-deploy-ai-app.md)]",
                "diagramMermaid": null,
                "diagramCaption": null,
                "diagramAltText": null,
                "comparisonTable": null,
                "comparisonTableCaption": null,
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "Deployed AI application interface",
                    "description": "Screenshot of the running web application showing an input form for AI prompts and the generated response from Azure OpenAI Service"
                  },
                  {
                    "title": "Application Insights dashboard",
                    "description": "Screenshot showing real-time telemetry including request rates, response times, and dependency calls to Azure OpenAI Service"
                  }
                ],
                "videoSuggestions": [],
                "interactiveSuggestions": [
                  {
                    "title": "Deployment validation checklist",
                    "description": "Interactive checklist that learners complete as they verify managed identity configuration, RBAC assignments, application settings, and successful AI service integration"
                  }
                ],
                "visualAccessibilityNotes": null
              },
              {
                "id": "knowledge-check",
                "title": "Knowledge check",
                "type": "knowledge-check",
                "description": "Assessment with scenario-based questions confirming learners can select appropriate App Service hosting plans for AI workloads, choose secure configuration methods for AI service integration, implement managed identity authentication correctly, and interpret Application Insights metrics for AI applications.",
                "estimatedDurationMinutes": 3,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\ntitle: Knowledge check\nmetadata:\n  title: Knowledge check\n  description: Assessment with scenario-based questions confirming learners can select appropriate App Service hosting plans, choose secure configuration methods, implement managed identity authentication, and interpret monitoring metrics for AI applications.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 3\ncontent: |\n  [!include[](includes/6-knowledge-check.md)]",
                "diagramMermaid": null,
                "diagramCaption": null,
                "diagramAltText": null,
                "comparisonTable": null,
                "comparisonTableCaption": null,
                "images": [],
                "imageSuggestions": [],
                "videoSuggestions": [],
                "interactiveSuggestions": [],
                "visualAccessibilityNotes": null
              },
              {
                "id": "summary",
                "title": "Summary",
                "type": "summary",
                "description": "Summary revisiting the retail recommendation scenario, highlighting key takeaways including hosting plan selection, secure AI service integration, managed identity implementation, and production monitoring. Points to recommended next steps including advanced scaling strategies, containerized AI deployments, and Azure DevOps integration for CI/CD pipelines.",
                "estimatedDurationMinutes": 2,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\ntitle: Summary\nmetadata:\n  title: Summary\n  description: Summary revisiting the retail recommendation scenario and highlighting key takeaways including hosting plan selection, secure AI service integration, managed identity implementation, and production monitoring with next steps.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 2\ncontent: |\n  [!include[](includes/7-summary.md)]",
                "diagramMermaid": null,
                "diagramCaption": null,
                "diagramAltText": null,
                "comparisonTable": null,
                "comparisonTableCaption": null,
                "images": [],
                "imageSuggestions": [],
                "videoSuggestions": [],
                "interactiveSuggestions": [],
                "visualAccessibilityNotes": null
              }
            ]
          }
        ]
      },
      "feedback": [
        "Learning path passed validation (score: 88.33)",
        "Module \"Deploy and manage AI applications on Azure App Service\" does not reference target roles"
      ],
      "attempts": 1,
      "durationMs": 90545.47530000005
    },
    {
      "stage": "Scenarios",
      "passed": true,
      "qualityScore": 88.33,
      "result": [
        {
          "moduleId": "deploy-ai-solutions-azure-app-service-module",
          "companyContext": {
            "companyName": "Fabrikam Inc",
            "industry": "Manufacturing & Industrial Equipment",
            "size": "2,800+ employees across 12 facilities",
            "currentSituation": "Running proof-of-concept AI quality inspection system on local development servers with 450+ daily image classifications",
            "challenge": "POC shows 94% defect detection accuracy but needs production-grade deployment with global accessibility for quality teams across facilities",
            "yourRole": "Cloud Solutions Developer",
            "reportingTo": "Marcus Chen, VP of Digital Operations",
            "objective": "Deploy the AI-powered quality inspection application to Azure App Service with scalability, monitoring, and multi-region support"
          },
          "technicalRequirements": [
            "Azure App Service deployment supporting Python-based AI model inference",
            "Integration with Azure OpenAI Service for image analysis enhancement",
            "Application Insights for performance monitoring and telemetry",
            "Secure configuration management for API keys and connection strings",
            "Support for 200+ concurrent image upload sessions during peak shifts"
          ],
          "successMetrics": [
            "Application availability of 99.5% or higher across all regions",
            "Image processing latency under 3 seconds per classification",
            "Zero credential exposure in application configuration",
            "Automated deployment pipeline reducing release time from 4 hours to under 15 minutes",
            "Application scales automatically to handle 3x traffic during shift changes"
          ],
          "constraints": [
            "Budget: $800/month for App Service and associated monitoring",
            "Must support facility teams in North America, Europe, and Asia-Pacific time zones",
            "Compliance requirement: all model inference data must remain in corporate Azure subscription",
            "Timeline: 3 weeks to production deployment before quarterly board review",
            "Legacy quality database integration using REST APIs must be maintained"
          ],
          "timeline": "3-week deployment window with board presentation deadline",
          "dataVolumes": "450 images daily currently, projected 1,200+ images daily within 6 months",
          "whatYouWillBuild": "A production-ready Azure App Service deployment of the AI quality inspection application with automated CI/CD, secure configuration, comprehensive monitoring, and auto-scaling capabilities"
        }
      ],
      "feedback": [
        "Scenario set passed validation (score: 88.33)"
      ],
      "attempts": 1,
      "durationMs": 16497.829499999993
    },
    {
      "stage": "ContentGeneration",
      "passed": true,
      "qualityScore": 70.33,
      "result": {
        "modules": [
          {
            "id": "deploy-ai-solutions-azure-app-service-module",
            "title": "Deploy and manage AI applications on Azure App Service",
            "description": "Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.",
            "learningObjectives": [
              "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
              "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
              "Implement managed identity authentication to connect AI services without storing credentials",
              "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
            ],
            "estimatedDurationMinutes": 58,
            "yml": "### YamlMime:Module\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module\nmetadata:\n  title: Deploy and manage AI applications on Azure App Service\n  description: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads. Learn to evaluate deployment options, configure secure service integration, implement managed identity authentication, and monitor AI application performance and costs.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.service: azure-app-service\n  ms.topic: module-standard-task-based\ntitle: Deploy and manage AI applications on Azure App Service\nsummary: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.\nabstract: |\n  By the end of this module, you'll be able to:\n  - Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n  - Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n  - Implement managed identity authentication to connect AI services without storing credentials\n  - Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\nprerequisites: |\n  - Familiarity with Azure fundamentals and the Azure portal\n  - Basic understanding of RESTful APIs and web application architecture\n  - Experience with at least one programming language (Python, C#, or JavaScript)\n  - Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge\niconUrl: /learn/achievements/generic-badge.svg\nlevels:\n  - intermediate\nroles:\n  - ai-engineer\n  - developer\n  - solution-architect\nproducts:\n  - azure-app-service\n  - azure-openai\n  - azure-ai-services\n  - azure-monitor\nsubjects:\n  - artificial-intelligence\n  - cloud-computing\nunits:\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\nbadge:\n  uid: learn.wwl.deploy-ai-solutions-azure-app-service-module.badge",
            "units": [
              {
                "id": "introduction",
                "title": "Introduction",
                "type": "introduction",
                "description": "Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.",
                "estimatedDurationMinutes": 5,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\ntitle: Introduction\nmetadata:\n  title: Introduction\n  description: Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 5\ncontent: |\n  [!include[](includes/1-introduction.md)]",
                "diagramMermaid": null,
                "diagramCaption": null,
                "diagramAltText": null,
                "comparisonTable": null,
                "comparisonTableCaption": null,
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "AI-powered web application architecture overview",
                    "description": "High-level architecture diagram showing Azure App Service hosting a web application that integrates with Azure OpenAI Service for product recommendations and Azure AI Services for image analysis, with Application Insights monitoring the solution and users accessing through a web browser"
                  }
                ],
                "videoSuggestions": [],
                "interactiveSuggestions": [],
                "visualAccessibilityNotes": "Provide detailed alt text describing the architectural flow from end users through Azure App Service to AI services, emphasizing the monitoring layer and data flow for screen reader users."
              },
              {
                "id": "evaluate-app-service-ai-workloads",
                "title": "Evaluate Azure App Service deployment options for AI workloads",
                "type": "concept",
                "description": "Explain Azure App Service hosting plans (Basic, Standard, Premium, Isolated) with job-focused guidance on selecting appropriate tiers for AI applications. Cover performance requirements driven by AI service call volumes, cost optimization through right-sizing, deployment slots for testing AI model updates, and auto-scaling considerations when request patterns fluctuate. Address reliability implications of tier selection and operations team responsibilities for capacity planning.",
                "estimatedDurationMinutes": 10,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\ntitle: Evaluate Azure App Service deployment options for AI workloads\nmetadata:\n  title: Evaluate Azure App Service deployment options for AI workloads\n  description: Explain Azure App Service hosting plans with job-focused guidance on selecting appropriate tiers for AI applications. Cover performance requirements, cost optimization, deployment slots, and auto-scaling considerations for AI workloads.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 10\ncontent: |\n  [!include[](includes/2-evaluate-app-service-ai-workloads.md)]",
                "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan Selection}\n    C -->|Development/Test| D[Basic Tier<br/>Manual scaling<br/>$55-220/mo]\n    C -->|Production| E[Standard Tier<br/>Auto-scale 10 instances<br/>Deployment slots<br/>$75-300/mo]\n    C -->|High-volume AI| F[Premium Tier<br/>Auto-scale 30 instances<br/>VNet integration<br/>$150-600/mo]\n    C -->|Enterprise/Compliance| G[Isolated Tier<br/>Dedicated environment<br/>Auto-scale 100 instances<br/>$680+/mo]\n    E --> H[Azure OpenAI Service]\n    F --> H\n    G --> H\n    E --> I[Auto-scaling Triggers]\n    I --> J[CPU Threshold]\n    I --> K[Memory Pressure]\n    I --> L[HTTP Queue Length]",
                "diagramCaption": "Azure App Service hosting plan decision flow for AI application deployment",
                "diagramAltText": "Decision tree diagram showing user requests flowing to Azure App Service, which branches into four hosting plan tiers: Basic for development and testing with manual scaling and monthly costs of $55-220; Standard for production workloads with auto-scaling up to 10 instances, deployment slots, and costs of $75-300; Premium for high-volume AI applications with auto-scaling up to 30 instances, VNet integration, and costs of $150-600; and Isolated for enterprise compliance scenarios with dedicated environments, auto-scaling up to 100 instances, and costs starting at $680. Standard, Premium, and Isolated tiers connect to Azure OpenAI Service. Auto-scaling triggers include CPU threshold, memory pressure, and HTTP queue length metrics.",
                "comparisonTable": {
                  "headers": [
                    "Hosting Plan",
                    "AI Workload Fit",
                    "Scaling Capability",
                    "Key Features for AI Apps",
                    "Typical Monthly Cost"
                  ],
                  "rows": [
                    [
                      "Basic",
                      "Development, testing AI prototypes with low request volumes (under 1,000 requests/day)",
                      "Manual scale up to 3 instances",
                      "Custom domains, manual SSL; suitable for validating AI service integration before production",
                      "$55-$220"
                    ],
                    [
                      "Standard",
                      "Production AI applications with moderate traffic (1,000-50,000 requests/day, under 2-second response target)",
                      "Auto-scale up to 10 instances based on CPU, memory, or HTTP queue",
                      "Deployment slots for testing AI model updates; daily backups; supports 99.95% SLA",
                      "$75-$300"
                    ],
                    [
                      "Premium",
                      "High-volume AI services requiring consistent sub-second response times (50,000+ requests/day)",
                      "Auto-scale up to 30 instances with advanced metrics",
                      "VNet integration for private AI service endpoints; faster scaling response; dedicated compute reduces noisy neighbor risk",
                      "$150-$600"
                    ],
                    [
                      "Isolated",
                      "Enterprise AI solutions with strict compliance, data residency, or security requirements",
                      "Auto-scale up to 100 instances within dedicated environment",
                      "Fully isolated network; private environment; advanced DDoS protection; required for regulated industries deploying AI",
                      "$680+"
                    ]
                  ]
                },
                "comparisonTableCaption": "Comparison of Azure App Service hosting plans for AI application deployment scenarios",
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "App Service plan selection in Azure portal",
                    "description": "Screenshot of the Azure portal Create App Service Plan page with the Standard tier selected, highlighting the pricing tier dropdown, instance count slider, and estimated monthly cost calculator for a production AI workload"
                  }
                ],
                "videoSuggestions": [
                  {
                    "title": "Selecting the right hosting plan for AI workloads",
                    "description": "2-minute video demonstrating how to evaluate expected AI service call volume, response time requirements, and budget constraints to choose between Standard and Premium tiers for a production recommendation engine"
                  }
                ],
                "interactiveSuggestions": [
                  {
                    "title": "Hosting plan decision tool for AI applications",
                    "description": "Interactive calculator where learners input expected daily request volume, target response time, budget range, and compliance requirements to receive a recommended App Service tier with cost justification and scaling configuration"
                  }
                ],
                "visualAccessibilityNotes": "Ensure the decision tree diagram clearly describes each tier's characteristics and cost range. The comparison table should use proper table markup with headers to enable screen readers to navigate rows and columns effectively."
              },
              {
                "id": "configure-ai-service-integration",
                "title": "Configure secure integration with Azure AI services",
                "type": "concept",
                "description": "Provide job-focused guidance on configuring Azure App Service to integrate Azure OpenAI Service and Azure AI Services securely. Explain application settings for storing service endpoints, demonstrate Key Vault references to protect API keys, and cover network security configurations including private endpoints for compliance scenarios. Address operations team responsibilities for monitoring configuration drift and security team requirements for secret rotation. Include decision criteria for when to use Key Vault versus managed identity.",
                "estimatedDurationMinutes": 12,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\ntitle: Configure secure integration with Azure AI services\nmetadata:\n  title: Configure secure integration with Azure AI services\n  description: Provide job-focused guidance on configuring Azure App Service to integrate Azure OpenAI and Azure AI Services securely using application settings, Key Vault references, and network security controls.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 12\ncontent: |\n  [!include[](includes/3-configure-ai-service-integration.md)]",
                "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    participant AppInsights as Application Insights\n    \n    User->>AppService: HTTPS Request (product query)\n    AppService->>KeyVault: Retrieve OpenAI API Key<br/>(using Key Vault reference)\n    KeyVault-->>AppService: Return Secret Value\n    AppService->>OpenAI: Generate Recommendations<br/>(with API key)\n    OpenAI-->>AppService: AI Response (product list)\n    AppService->>AIServices: Analyze Product Images<br/>(with managed identity)\n    AIServices-->>AppService: Image Analysis Results\n    AppService->>AppInsights: Log Telemetry<br/>(latency, tokens used)\n    AppService-->>User: Combined Response<br/>(recommendations + images)\n    AppInsights->>AppInsights: Track AI Service Dependencies",
                "diagramCaption": "Secure integration sequence showing Azure App Service retrieving secrets from Key Vault and calling AI services with telemetry logging",
                "diagramAltText": "Sequence diagram illustrating a secure AI application request flow. A user sends an HTTPS request for product recommendations to Azure App Service. App Service retrieves the Azure OpenAI API key from Azure Key Vault using a Key Vault reference, then calls Azure OpenAI Service to generate product recommendations. Next, App Service uses managed identity to call Azure AI Services for image analysis. App Service logs telemetry including latency and token usage to Application Insights, then returns the combined AI-powered response to the user. Application Insights tracks all AI service dependencies throughout the flow.",
                "comparisonTable": {
                  "headers": [
                    "Configuration Method",
                    "Security Level",
                    "Use Case",
                    "Operations Overhead",
                    "Setup Time"
                  ],
                  "rows": [
                    [
                      "Application Settings (plain text API keys)",
                      "Low - Secrets visible in portal; not recommended for production AI workloads",
                      "Quick prototyping or development environments only; acceptable risk for non-production data",
                      "Minimal - no secret rotation infrastructure needed",
                      "5 minutes"
                    ],
                    [
                      "Application Settings with Key Vault references",
                      "High - Secrets stored in Key Vault; access logged; supports automatic rotation",
                      "Production AI applications requiring secret management; compliance scenarios needing audit trails for API key access",
                      "Moderate - requires Key Vault setup and access policy configuration; security team owns rotation schedule",
                      "15-20 minutes"
                    ],
                    [
                      "Managed Identity (no secrets)",
                      "Highest - No secrets stored anywhere; Azure AD handles authentication; eliminates credential leakage risk",
                      "Production AI applications where supported (Azure OpenAI, Azure AI Services); preferred method for security-sensitive workloads",
                      "Low - no secret rotation; security team assigns RBAC roles; operations team monitors identity assignment drift",
                      "10 minutes"
                    ],
                    [
                      "Private Endpoints with VNet integration",
                      "Highest - Traffic never leaves Microsoft backbone; required for regulatory compliance (HIPAA, PCI-DSS)",
                      "Enterprise AI solutions with strict data residency or network isolation requirements; financial services, healthcare",
                      "High - network team configures VNets, subnets, DNS; ongoing monitoring of private link connectivity",
                      "45-60 minutes"
                    ]
                  ]
                },
                "comparisonTableCaption": "Comparison of secure configuration methods for integrating AI services with Azure App Service, including security level, use cases, and operational considerations",
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "Application Settings with Key Vault reference",
                    "description": "Screenshot of Azure App Service Configuration blade showing an application setting named OPENAI_API_KEY with a Key Vault reference value (@Microsoft.KeyVault(SecretUri=https://...)) and a green checkmark indicating successful secret retrieval"
                  },
                  {
                    "title": "Private endpoint configuration",
                    "description": "Screenshot showing the Networking blade of an App Service with VNet Integration enabled and a private endpoint connection listed for Azure OpenAI Service with status 'Approved'"
                  }
                ],
                "videoSuggestions": [],
                "interactiveSuggestions": [
                  {
                    "title": "Configuration security assessment",
                    "description": "Interactive module presenting three AI application scenarios (development prototype, production SaaS app, healthcare patient portal) where learners select the appropriate configuration method and explain security or compliance justifications for their choice"
                  }
                ],
                "visualAccessibilityNotes": "Describe each step in the sequence diagram with emphasis on the security mechanisms: Key Vault reference retrieval, managed identity authentication, and telemetry logging. Ensure comparison table relationships between security level and use case are clear for assistive technology."
              },
              {
                "id": "implement-secure-authentication",
                "title": "Implement managed identity authentication for AI services",
                "type": "concept",
                "description": "Explain how to enable system-assigned and user-assigned managed identities for Azure App Service and grant role-based access control (RBAC) permissions to Azure OpenAI Service and Azure AI Services. Cover when to choose each identity type based on resource sharing needs, demonstrate assigning Cognitive Services OpenAI User and Cognitive Services User roles, and show how to update application code to use DefaultAzureCredential. Address security team responsibilities for reviewing RBAC assignments and operations team tasks for auditing identity usage patterns.",
                "estimatedDurationMinutes": 11,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\ntitle: Implement managed identity authentication for AI services\nmetadata:\n  title: Implement managed identity authentication for AI services\n  description: Explain how to enable managed identities for Azure App Service, grant RBAC permissions to AI services, and update application code to eliminate credential management.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 11\ncontent: |\n  [!include[](includes/4-implement-secure-authentication.md)]",
                "diagramMermaid": "graph TB\n    subgraph App Service Environment\n        A[Azure App Service<br/>Product Recommendation App]\n        A1[System-assigned Identity<br/>Lifecycle tied to App Service]\n        A2[User-assigned Identity<br/>Shared across resources]\n        A -->|Enables| A1\n        A -->|Assigns| A2\n    end\n    \n    subgraph Azure Active Directory\n        B[Azure AD Identity Management]\n        A1 -->|Registers with| B\n        A2 -->|Registers with| B\n    end\n    \n    subgraph AI Services\n        C[Azure OpenAI Service]\n        D[Azure AI Vision]\n        E[Azure Key Vault]\n    end\n    \n    subgraph RBAC Assignments\n        F[Cognitive Services OpenAI User]\n        G[Cognitive Services User]\n        H[Key Vault Secrets User]\n    end\n    \n    B -->|RBAC Role Assignment| F\n    B -->|RBAC Role Assignment| G\n    B -->|RBAC Role Assignment| H\n    F -->|Grants Access to| C\n    G -->|Grants Access to| D\n    H -->|Grants Access to| E\n    \n    A -->|Authenticates to| C\n    A -->|Authenticates to| D\n    A -->|Authenticates to| E",
                "diagramCaption": "Managed identity authentication architecture showing Azure App Service using system-assigned or user-assigned identities with RBAC role assignments to access AI services without storing credentials",
                "diagramAltText": "Architecture diagram showing Azure App Service with both system-assigned and user-assigned managed identities. System-assigned identity lifecycle is tied to the App Service resource, while user-assigned identity can be shared across multiple resources. Both identity types register with Azure Active Directory. Azure AD grants RBAC role assignments: Cognitive Services OpenAI User for Azure OpenAI Service access, Cognitive Services User for Azure AI Vision access, and Key Vault Secrets User for Azure Key Vault access. The diagram emphasizes that App Service authenticates to all three services using managed identity, eliminating the need to store API keys or connection strings in application code or configuration.",
                "comparisonTable": {
                  "headers": [
                    "Managed Identity Type",
                    "Lifecycle",
                    "Resource Sharing",
                    "Best Use Case",
                    "Team Responsibility"
                  ],
                  "rows": [
                    [
                      "System-assigned",
                      "Created and deleted with the App Service resource; cannot exist independently",
                      "No - unique to one App Service instance; creates 1:1 relationship between identity and resource",
                      "Single AI application with dedicated resources; simplifies identity management when App Service and AI services have matching lifecycles",
                      "Development team enables during App Service creation; security team assigns RBAC roles; operations team monitors in resource activity logs"
                    ],
                    [
                      "User-assigned",
                      "Independent managed resource; persists after App Service deletion; can be pre-created and reused",
                      "Yes - same identity can authenticate multiple App Services, Azure Functions, or VMs to shared AI services",
                      "Multi-application environment sharing Azure OpenAI deployment; microservices architecture where multiple services need identical AI service permissions; simplifies RBAC when 10+ apps use the same backend",
                      "Security team creates and manages identity lifecycle; development team assigns to App Services; operations team audits which resources use each identity"
                    ]
                  ]
                },
                "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication, including lifecycle, sharing capabilities, and operational responsibilities",
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "Enable system-assigned managed identity",
                    "description": "Screenshot of Azure App Service Identity blade with System assigned tab selected, showing the Status toggle set to On with a green indicator and the Object (principal) ID displayed below"
                  },
                  {
                    "title": "Assign RBAC role to managed identity",
                    "description": "Screenshot of Azure OpenAI Service Access Control (IAM) blade showing the Add role assignment wizard with Cognitive Services OpenAI User role selected and a managed identity listed in the Members section with a checkmark"
                  },
                  {
                    "title": "DefaultAzureCredential code pattern",
                    "description": "Code snippet showing Python code using Azure Identity library's DefaultAzureCredential to authenticate to Azure OpenAI Service without hardcoded keys, with comments explaining how it automatically tries managed identity authentication first"
                  }
                ],
                "videoSuggestions": [
                  {
                    "title": "Configure managed identity for AI applications",
                    "description": "4-minute walkthrough demonstrating how to enable system-assigned managed identity in the Azure portal, navigate to Azure OpenAI Service IAM, assign the Cognitive Services OpenAI User role, and update Python application code to use DefaultAzureCredential instead of API keys"
                  }
                ],
                "interactiveSuggestions": [],
                "visualAccessibilityNotes": "Clearly describe the flow from App Service through Azure AD to each AI service, emphasizing RBAC role names and their specific permissions. Ensure the architecture diagram conveys the elimination of stored credentials and the automated authentication process for screen reader users."
              },
              {
                "id": "exercise-deploy-ai-app",
                "title": "Exercise: Deploy and configure an AI-powered web application",
                "type": "exercise",
                "description": "Hands-on exercise where learners deploy a sample product recommendation web application to Azure App Service, configure it to integrate with Azure OpenAI Service using managed identity, and verify successful AI-powered responses. Includes step-by-step instructions for creating an App Service instance on the Standard tier, enabling system-assigned managed identity, granting Cognitive Services OpenAI User role, configuring application settings, deploying code from a provided GitHub repository, testing the recommendation endpoint, reviewing Application Insights telemetry for AI service dependencies, and cleaning up resources to avoid ongoing charges.",
                "estimatedDurationMinutes": 15,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\ntitle: 'Exercise: Deploy and configure an AI-powered web application'\nmetadata:\n  title: 'Exercise: Deploy and configure an AI-powered web application'\n  description: Hands-on exercise deploying a product recommendation app to Azure App Service with managed identity authentication to Azure OpenAI Service. Includes validation and cleanup steps.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 15\ncontent: |\n  [!include[](includes/5-exercise-deploy-ai-app.md)]",
                "diagramMermaid": null,
                "diagramCaption": null,
                "diagramAltText": null,
                "comparisonTable": null,
                "comparisonTableCaption": null,
                "images": [],
                "imageSuggestions": [
                  {
                    "title": "Deployed AI application interface",
                    "description": "Screenshot of the running product recommendation web application showing an input form where users can enter a product category, a Submit button, and a response section displaying AI-generated product recommendations from Azure OpenAI Service with product names, descriptions, and confidence scores"
                  },
                  {
                    "title": "Application Insights dependency tracking",
                    "description": "Screenshot of the Application Insights Performance blade showing a transaction timeline with dependencies highlighted, specifically showing calls to Azure OpenAI Service with response times, success rates, and token usage metrics visible in the details pane"
                  },
                  {
                    "title": "Managed identity RBAC assignment confirmation",
                    "description": "Screenshot of the Azure OpenAI Service Access Control (IAM) blade with the Role assignments tab selected, filtering by the App Service's managed identity name, showing the Cognitive Services OpenAI User role assigned with a green checkmark indicating active permission"
                  }
                ],
                "videoSuggestions": [],
                "interactiveSuggestions": [
                  {
                    "title": "Deployment validation checklist",
                    "description": "Interactive step-by-step checklist that learners complete as they progress through the exercise, including checkboxes for: App Service created with Standard tier, system-assigned managed identity enabled and Object ID copied, RBAC role assigned to Azure OpenAI, application settings configured with OpenAI endpoint, code deployed successfully, test request returns AI recommendations, Application Insights shows dependency calls, and all resources deleted during cleanup"
                  }
                ],
                "visualAccessibilityNotes": "Provide descriptive alt text for all screenshots showing the specific UI elements learners need to locate and interact with, including button labels, field names, and status indicators."
              },
              {
                "id": "knowledge-check",
                "title": "Knowledge check",
                "type": "knowledge-check",
                "description": "Scenario-based assessment with three questions testing learners' ability to select appropriate App Service hosting plans for AI workload requirements, choose secure configuration methods for AI service integration based on compliance and operational constraints, and interpret Application Insights telemetry to diagnose AI application performance issues. Each question presents a realistic job scenario and requires applying concepts from the module to make informed decisions.",
                "estimatedDurationMinutes": 3,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\ntitle: Knowledge check\nmetadata:\n  title: Knowledge check\n  description: Scenario-based assessment testing learners' ability to select hosting plans, choose secure configuration methods, and interpret monitoring telemetry for AI applications on Azure App Service.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 3\ncontent: |\n  [!include[](includes/6-knowledge-check.md)]",
                "diagramMermaid": null,
                "diagramCaption": null,
                "diagramAltText": null,
                "comparisonTable": null,
                "comparisonTableCaption": null,
                "images": [],
                "imageSuggestions": [],
                "videoSuggestions": [],
                "interactiveSuggestions": [],
                "visualAccessibilityNotes": null
              },
              {
                "id": "summary",
                "title": "Summary",
                "type": "summary",
                "description": "Recap the retail product recommendation scenario and highlight how learners successfully deployed an AI application to Azure App Service with secure managed identity authentication and production monitoring. Summarize key takeaways: evaluating hosting plans based on AI workload performance and cost requirements, configuring secure integration using Key Vault references or managed identity to eliminate credential storage, implementing RBAC role assignments for least-privilege access to AI services, and monitoring AI application health and costs using Application Insights. Recommend next Microsoft Learn modules including 'Scale applications in Azure App Service,' 'Implement Azure Container Apps for AI workloads,' and 'Build CI/CD pipelines for AI applications with Azure DevOps.'",
                "estimatedDurationMinutes": 2,
                "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\ntitle: Summary\nmetadata:\n  title: Summary\n  description: Recap the retail recommendation scenario, highlight key takeaways including hosting plan selection and secure AI integration, and recommend next learning paths for scaling, containerization, and CI/CD.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 2\ncontent: |\n  [!include[](includes/7-summary.md)]",
                "diagramMermaid": null,
                "diagramCaption": null,
                "diagramAltText": null,
                "comparisonTable": null,
                "comparisonTableCaption": null,
                "images": [],
                "imageSuggestions": [],
                "videoSuggestions": [],
                "interactiveSuggestions": [],
                "visualAccessibilityNotes": null
              }
            ]
          }
        ],
        "unitDrafts": [
          {
            "id": "introduction",
            "title": "Introduction",
            "type": "introduction",
            "narrativeMd": "Your retail company just launched a customer-facing web portal that provides personalized product recommendations using Azure OpenAI Service. During the first week, traffic exceeded expectations by 300%, causing intermittent slowdowns and timeout errors. Your operations team scrambled to scale infrastructure manually, while your security team flagged API keys stored in configuration files as a compliance risk. As the cloud engineer responsible for production AI workloads, you need a hosting platform that scales automatically, integrates securely with Azure AI services, and provides visibility into performance and costs.\n\nAzure App Service offers a fully managed platform that eliminates the infrastructure complexity of deploying AI applications. With built-in auto-scaling triggered by real-time metrics, your recommendation engine adapts to traffic spikes without manual intervention. Managed identity authentication replaces hardcoded API keys, satisfying your security team's zero-trust requirements. Application Insights automatically tracks AI service dependencies, token consumption, and response times, giving your operations team the telemetry needed to optimize costs and maintain SLA commitments. By the end of this module, you'll deploy a production-ready AI application that integrates Azure OpenAI Service and Azure AI Services using secure authentication patterns, with monitoring configured to surface performance bottlenecks and cost drivers.\n\n## Learning objectives\n\nBy the end of this module, you'll be able to:\n\n- Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n- Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n- Implement managed identity authentication to connect AI services without storing credentials\n- Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\n\n## Prerequisites\n\n- Familiarity with Azure fundamentals and the Azure portal\n- Basic understanding of RESTful APIs and web application architecture\n- Experience with at least one programming language (Python, C#, or JavaScript)\n- Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge",
            "learningObjectives": [
              "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
              "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
              "Implement managed identity authentication to connect AI services without storing credentials",
              "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
            ],
            "prerequisites": [
              "Familiarity with Azure fundamentals and the Azure portal",
              "Basic understanding of RESTful APIs and web application architecture",
              "Experience with at least one programming language (Python, C#, or JavaScript)",
              "Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge"
            ],
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [
              "High-level architecture diagram showing Azure App Service hosting a web application that integrates with Azure OpenAI Service for product recommendations and Azure AI Services for image analysis, with Application Insights monitoring the solution and users accessing through a web browser. Include visual indicators for managed identity authentication flow and auto-scaling triggers."
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": "Provide detailed alt text describing the architectural flow from end users through Azure App Service to AI services, emphasizing the monitoring layer and data flow for screen reader users.",
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [],
            "estimatedDurationMinutes": 5
          },
          {
            "id": "evaluate-app-service-ai-workloads",
            "title": "Evaluate Azure App Service deployment options for AI workloads",
            "type": "concept",
            "narrativeMd": "When you deploy an AI application that calls Azure OpenAI Service or Azure AI Services, the hosting platform becomes a critical performance and cost lever. Unlike traditional web applications that primarily serve static content or database queries, AI workloads generate variable compute loads driven by unpredictable request patterns—a product recommendation engine might handle 500 requests per hour during business hours, then spike to 5,000 requests during a flash sale. At the same time, each AI service call consumes tokens billed separately from your hosting infrastructure, creating a dual cost structure where both compute tier and AI usage contribute to your monthly bill. Azure App Service hosting plans determine how your application scales to meet these demands, how quickly it responds under load, and whether your operations team can meet SLA commitments without overpaying for idle capacity.\n\n## Hosting plan tiers and AI workload fit\n\nAzure App Service offers four primary hosting plan tiers, each designed for different operational scenarios. With Basic tier plans, you deploy applications suitable for development and testing environments where traffic remains predictable and low—typically under 1,000 requests per day. This tier supports manual scaling up to three instances, making it appropriate for validating your AI service integration before moving to production, but it lacks the auto-scaling capabilities required when request volumes fluctuate. Your development team can prototype a recommendation engine on Basic tier for approximately $55-$220 per month, then migrate configuration to a higher tier once performance testing reveals production requirements.\n\nStandard tier plans introduce auto-scaling triggered by CPU utilization, memory pressure, or HTTP queue length, scaling up to 10 instances based on rules you define. This becomes critical when your AI application experiences variable load—for example, a customer support chatbot that handles 2,000 requests per hour during business hours but drops to 200 requests overnight. With auto-scaling configured to add instances when CPU exceeds 70% for five minutes, your application maintains sub-2-second response times during peak traffic without manual intervention. Standard tier also provides deployment slots, allowing your team to test AI model updates in a staging environment before swapping to production, reducing the risk of deploying prompt changes that degrade recommendation quality. At $75-$300 per month, Standard tier suits production AI applications with moderate traffic that require consistent performance and minimal operational overhead.\n\nBuilding on Standard's capabilities, Premium tier plans support auto-scaling up to 30 instances and add VNet integration for private connectivity to AI services. This becomes especially important when your compliance team requires that all traffic between your application and Azure OpenAI Service traverse private networks rather than the public internet—common in financial services and healthcare scenarios. Premium tier also reduces the impact of noisy neighbors by providing dedicated compute resources, ensuring that other tenants' workloads don't affect your AI application's response times during high-volume periods. Organizations handling 50,000+ requests per day with sub-second response time requirements typically select Premium tier, accepting the $150-$600 monthly cost in exchange for predictable performance and advanced networking controls.\n\nFor enterprise AI solutions with strict compliance or data residency requirements, Isolated tier plans provide fully dedicated environments with auto-scaling up to 100 instances within a private App Service Environment. Your network team gains complete control over ingress and egress traffic, while your security team satisfies audit requirements mandating that AI workloads run in isolated infrastructure. This tier's $680+ monthly cost reflects the dedicated hardware and advanced DDoS protection, making it appropriate only when regulatory constraints or enterprise security policies prohibit multi-tenant hosting.\n\n## Performance requirements driven by AI service patterns\n\nUnlike traditional web applications where response time depends primarily on database query performance, AI applications experience latency determined by external service calls to Azure OpenAI or Azure AI Services. When your product recommendation engine calls Azure OpenAI's GPT-4 model to generate personalized suggestions, the API request typically completes in 800-2,000 milliseconds depending on prompt complexity and token count. With this latency profile in mind, your hosting plan must provide sufficient compute resources to handle concurrent requests without queueing—if your application receives 50 simultaneous requests during peak traffic and each instance can process 5 concurrent AI calls, you need at least 10 instances to avoid request timeouts. Standard tier's 10-instance limit becomes a bottleneck at this scale, signaling the need to evaluate Premium tier's 30-instance capacity.\n\nAuto-scaling configuration directly impacts your ability to meet SLA commitments during traffic spikes. Consider what happens when a marketing campaign drives a 400% increase in recommendation requests over a 15-minute window. With auto-scaling rules configured to add one instance when CPU exceeds 70% for five minutes, your application might take 8-10 minutes to fully scale out, leaving requests queued during the initial spike. Premium tier's faster scaling response and higher instance limits reduce this window, while careful tuning of scaling triggers—such as using HTTP queue length instead of CPU percentage—can further improve responsiveness. Your operations team should validate scaling behavior during load testing, ensuring that instance provisioning completes before request timeouts occur.\n\n## Cost optimization through right-sizing\n\nBecause AI applications generate costs in two dimensions—hosting compute charges and AI service token consumption—selecting the appropriate App Service tier requires analyzing both components. If your recommendation engine processes 100,000 requests per day and each request consumes an average of 500 tokens at $0.002 per 1,000 tokens for GPT-4, your monthly AI service cost reaches approximately $3,000. At the same time, a Standard tier S2 instance ($150/month) running at 60% average CPU utilization supports this load effectively. Upgrading to Premium P1v2 ($300/month) would double your hosting cost for minimal performance gain, reducing your overall cost efficiency.\n\nHowever, this calculation changes when request patterns exhibit significant variability. With auto-scaling enabled, you pay only for the instances running during each billing period—if your application scales from 2 instances during off-peak hours to 8 instances during peak traffic, you avoid paying for 8 instances continuously. Your finance team can track this pattern in Azure Cost Management, comparing hosting costs against AI service token consumption to identify optimization opportunities. For example, if Application Insights reveals that 30% of AI service calls result from redundant requests caused by aggressive client retry logic, your development team can implement caching or circuit breaker patterns to reduce both token costs and hosting load.\n\n## Decision criteria for tier selection\n\nWhen evaluating hosting plans for AI workloads, start by estimating your expected daily request volume and target response time. Applications handling under 10,000 requests per day with 3-5 second response time tolerance typically fit within Standard tier's scaling limits. As request volume approaches 50,000 per day or response time requirements tighten to sub-second latency, Premium tier's additional instances and faster scaling become necessary. At the same time, consider your compliance and security requirements—if your security team mandates private connectivity to AI services or your industry regulations require dedicated infrastructure, these constraints override pure performance calculations and drive you toward Premium or Isolated tiers.\n\nYour operations team should also evaluate the administrative overhead of each tier. Standard tier requires configuring auto-scaling rules and monitoring performance metrics, but generally operates without daily intervention once properly tuned. Premium and Isolated tiers add networking complexity through VNet integration and private endpoints, requiring coordination with your network team to configure DNS, subnets, and firewall rules. This operational cost—measured in engineering hours rather than Azure billing—can exceed the monetary difference between tiers for small teams managing multiple AI applications. With these trade-offs in mind, select the tier that balances performance, cost, compliance requirements, and your team's operational capacity, knowing you can scale up (or down) as your application's usage patterns evolve.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan Selection}\n    C -->|Development/Test| D[Basic Tier<br/>Manual scaling<br/>$55-220/mo]\n    C -->|Production| E[Standard Tier<br/>Auto-scale 10 instances<br/>Deployment slots<br/>$75-300/mo]\n    C -->|High-volume AI| F[Premium Tier<br/>Auto-scale 30 instances<br/>VNet integration<br/>$150-600/mo]\n    C -->|Enterprise/Compliance| G[Isolated Tier<br/>Dedicated environment<br/>Auto-scale 100 instances<br/>$680+/mo]\n    E --> H[Azure OpenAI Service]\n    F --> H\n    G --> H\n    E --> I[Auto-scaling Triggers]\n    I --> J[CPU Threshold]\n    I --> K[Memory Pressure]\n    I --> L[HTTP Queue Length]",
            "diagramCaption": "Azure App Service hosting plan decision flow for AI application deployment",
            "diagramAltText": "Decision tree diagram showing user requests flowing to Azure App Service, which branches into four hosting plan tiers: Basic for development and testing with manual scaling and monthly costs of $55-220; Standard for production workloads with auto-scaling up to 10 instances, deployment slots, and costs of $75-300; Premium for high-volume AI applications with auto-scaling up to 30 instances, VNet integration, and costs of $150-600; and Isolated for enterprise compliance scenarios with dedicated environments, auto-scaling up to 100 instances, and costs starting at $680. Standard, Premium, and Isolated tiers connect to Azure OpenAI Service. Auto-scaling triggers include CPU threshold, memory pressure, and HTTP queue length metrics.",
            "comparisonTable": {
              "headers": [
                "Hosting Plan",
                "AI Workload Fit",
                "Scaling Capability",
                "Key Features for AI Apps",
                "Typical Monthly Cost"
              ],
              "rows": [
                [
                  "Basic",
                  "Development, testing AI prototypes with low request volumes (under 1,000 requests/day)",
                  "Manual scale up to 3 instances",
                  "Custom domains, manual SSL; suitable for validating AI service integration before production",
                  "$55-$220"
                ],
                [
                  "Standard",
                  "Production AI applications with moderate traffic (1,000-50,000 requests/day, under 2-second response target)",
                  "Auto-scale up to 10 instances based on CPU, memory, or HTTP queue",
                  "Deployment slots for testing AI model updates; daily backups; supports 99.95% SLA",
                  "$75-$300"
                ],
                [
                  "Premium",
                  "High-volume AI services requiring consistent sub-second response times (50,000+ requests/day)",
                  "Auto-scale up to 30 instances with advanced metrics",
                  "VNet integration for private AI service endpoints; faster scaling response; dedicated compute reduces noisy neighbor risk",
                  "$150-$600"
                ],
                [
                  "Isolated",
                  "Enterprise AI solutions with strict compliance, data residency, or security requirements",
                  "Auto-scale up to 100 instances within dedicated environment",
                  "Fully isolated network; private environment; advanced DDoS protection; required for regulated industries deploying AI",
                  "$680+"
                ]
              ]
            },
            "comparisonTableCaption": "Comparison of Azure App Service hosting plans for AI application deployment scenarios",
            "images": [],
            "imageSuggestions": [
              "Screenshot of the Azure portal Create App Service Plan page with the Standard tier selected, highlighting the pricing tier dropdown, instance count slider, and estimated monthly cost calculator for a production AI workload"
            ],
            "videoSuggestions": [
              "2-minute video demonstrating how to evaluate expected AI service call volume, response time requirements, and budget constraints to choose between Standard and Premium tiers for a production recommendation engine"
            ],
            "interactiveSuggestions": [
              "Interactive calculator where learners input expected daily request volume, target response time, budget range, and compliance requirements to receive a recommended App Service tier with cost justification and scaling configuration"
            ],
            "visualAccessibilityNotes": "Ensure the decision tree diagram clearly describes each tier's characteristics and cost range. The comparison table should use proper table markup with headers to enable screen readers to navigate rows and columns effectively.",
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "App Service pricing",
                "url": "https://azure.microsoft.com/pricing/details/app-service/",
                "note": "Official pricing calculator for all hosting plan tiers"
              },
              {
                "title": "App Service auto-scale documentation",
                "url": "https://learn.microsoft.com/azure/app-service/manage-scale-up",
                "note": "Detailed guidance on configuring auto-scaling rules and metrics"
              }
            ],
            "estimatedDurationMinutes": 10
          },
          {
            "id": "configure-ai-service-integration",
            "title": "Configure secure integration with Azure AI services",
            "type": "concept",
            "narrativeMd": "Now that you understand how hosting plan selection affects your AI application's performance and cost, the next critical step involves configuring secure connectivity to Azure OpenAI Service and Azure AI Services. Unlike traditional backend databases that reside within your virtual network boundary, AI services expose REST APIs over HTTPS endpoints that your application calls remotely. This distributed architecture introduces credential management challenges—your application needs API keys or access tokens to authenticate each request, creating a security risk if those credentials leak through configuration files, source control commits, or application logs. At the same time, your compliance team requires audit trails showing who accessed AI services and when, while your operations team needs visibility into configuration drift across multiple environments.\n\n## Application settings for service endpoints\n\nAzure App Service provides application settings that inject configuration values as environment variables your code can access at runtime. When you create an application setting named `OPENAI_ENDPOINT` with value `https://your-openai-resource.openai.azure.com`, your Python, C#, or JavaScript code reads this value using standard environment variable methods, eliminating hardcoded URLs that differ between development, staging, and production environments. This pattern becomes especially valuable when your development team deploys the same application code to multiple App Service instances pointing to different Azure OpenAI deployments—changing the endpoint requires updating a single application setting rather than modifying and redeploying code.\n\nBuilding on this foundation, you face a critical decision about how to handle API keys required for AI service authentication. With application settings, you can store the Azure OpenAI API key directly as an environment variable, giving your code immediate access without additional configuration. However, this approach exposes the key in plaintext to anyone with Contributor access to your App Service resource in the Azure portal. Your security team typically flags this as a compliance risk, especially for production workloads handling customer data or regulated content. Consider what happens when a developer with legitimate App Service access takes a screenshot during troubleshooting—that image might inadvertently capture your API key, creating an exposure path your security team must investigate during audit reviews.\n\n## Key Vault references for secret protection\n\nAzure Key Vault addresses this credential exposure risk by providing centralized secret storage with detailed access logging and automatic rotation capabilities. Instead of storing your Azure OpenAI API key directly in application settings, you store it as a Key Vault secret, then configure an application setting with a special reference syntax: `@Microsoft.KeyVault(SecretUri=https://your-keyvault.vault.azure.net/secrets/openai-api-key/...)`. When your App Service starts, it automatically retrieves the secret value from Key Vault using its managed identity, injecting the decrypted key as an environment variable your application code can read. This becomes powerful when combined with Key Vault's access policies—your security team grants your App Service's managed identity `Get Secret` permissions, while denying individual developers direct access to production secrets, ensuring that only the running application can retrieve sensitive credentials.\n\nWith this approach, your operations team gains audit visibility through Key Vault's diagnostic logs, which record every secret access attempt including the identity, timestamp, and success status. When your compliance team asks who accessed the production Azure OpenAI API key during a specific date range, you query Key Vault logs rather than searching application logs or interviewing team members. At the same time, Key Vault's secret rotation capabilities allow your security team to update API keys on a scheduled basis—say, every 90 days—by updating the Key Vault secret value without modifying application settings or redeploying code. Your App Service automatically retrieves the new secret value on the next application restart, maintaining zero-downtime credential rotation.\n\n## Network security with private endpoints\n\nFor enterprise AI solutions with strict data residency or compliance requirements, securing the API endpoint itself becomes as important as protecting credentials. Azure Private Link enables you to expose Azure OpenAI Service and Azure AI Services through private IP addresses within your virtual network, ensuring that all traffic between your App Service and AI services traverses Microsoft's backbone network rather than the public internet. This becomes critical in regulated industries like healthcare or financial services, where compliance frameworks mandate that AI-generated content containing customer data never exits your controlled network boundary.\n\nConfiguring private endpoints requires VNet integration on your App Service, which is available only in Premium and Isolated hosting tiers. Your network team creates a subnet within your virtual network, then provisions a private endpoint for your Azure OpenAI resource pointing to that subnet. Once configured, your App Service resolves the Azure OpenAI FQDN (for example, `your-openai.openai.azure.com`) to a private IP address (for example, `10.1.2.4`) using Azure Private DNS zones. This setup eliminates public internet exposure of your AI services, satisfying your security team's zero-trust network requirements while introducing operational overhead—your network team must manage DNS configurations, subnet routing, and firewall rules that traditional public endpoint deployments avoid.\n\n## Choosing the right configuration method\n\nDeciding between application settings with plaintext keys, Key Vault references, and private endpoints depends on your specific security, compliance, and operational constraints. For development environments where speed matters more than security, storing API keys directly in application settings accelerates prototyping with minimal setup time—your development team can validate AI service integration in under five minutes. However, this convenience becomes a liability in production, where credential exposure risks and audit requirements demand Key Vault integration.\n\nWhen your application handles non-sensitive data and your compliance team accepts public endpoint access, Key Vault references provide the optimal balance between security and operational simplicity. Your security team gains centralized secret management and rotation, your operations team accesses detailed audit logs, and your development team works with familiar environment variable patterns. This configuration typically adds 15-20 minutes to initial setup but eliminates ongoing credential management overhead that manual rotation would require.\n\nFor regulated workloads or enterprise scenarios with strict network isolation requirements, private endpoints become mandatory despite their complexity. Your network team invests 45-60 minutes configuring VNets, subnets, and DNS zones, then maintains these resources alongside your application infrastructure. This operational cost—measured in both initial setup time and ongoing management—justifies itself only when compliance frameworks or security policies prohibit public internet access to AI services. With these trade-offs understood, you can select the configuration method that aligns with your security requirements, compliance obligations, and team capacity, knowing that Azure App Service supports migration paths as your needs evolve.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    participant AppInsights as Application Insights\n    \n    User->>AppService: HTTPS Request (product query)\n    AppService->>KeyVault: Retrieve OpenAI API Key<br/>(using Key Vault reference)\n    KeyVault-->>AppService: Return Secret Value\n    AppService->>OpenAI: Generate Recommendations<br/>(with API key)\n    OpenAI-->>AppService: AI Response (product list)\n    AppService->>AIServices: Analyze Product Images<br/>(with managed identity)\n    AIServices-->>AppService: Image Analysis Results\n    AppService->>AppInsights: Log Telemetry<br/>(latency, tokens used)\n    AppService-->>User: Combined Response<br/>(recommendations + images)\n    AppInsights->>AppInsights: Track AI Service Dependencies",
            "diagramCaption": "Secure integration sequence showing Azure App Service retrieving secrets from Key Vault and calling AI services with telemetry logging",
            "diagramAltText": "Sequence diagram illustrating a secure AI application request flow. A user sends an HTTPS request for product recommendations to Azure App Service. App Service retrieves the Azure OpenAI API key from Azure Key Vault using a Key Vault reference, then calls Azure OpenAI Service to generate product recommendations. Next, App Service uses managed identity to call Azure AI Services for image analysis. App Service logs telemetry including latency and token usage to Application Insights, then returns the combined AI-powered response to the user. Application Insights tracks all AI service dependencies throughout the flow.",
            "comparisonTable": {
              "headers": [
                "Configuration Method",
                "Security Level",
                "Use Case",
                "Operations Overhead",
                "Setup Time"
              ],
              "rows": [
                [
                  "Application Settings (plain text API keys)",
                  "Low - Secrets visible in portal; not recommended for production AI workloads",
                  "Quick prototyping or development environments only; acceptable risk for non-production data",
                  "Minimal - no secret rotation infrastructure needed",
                  "5 minutes"
                ],
                [
                  "Application Settings with Key Vault references",
                  "High - Secrets stored in Key Vault; access logged; supports automatic rotation",
                  "Production AI applications requiring secret management; compliance scenarios needing audit trails for API key access",
                  "Moderate - requires Key Vault setup and access policy configuration; security team owns rotation schedule",
                  "15-20 minutes"
                ],
                [
                  "Managed Identity (no secrets)",
                  "Highest - No secrets stored anywhere; Azure AD handles authentication; eliminates credential leakage risk",
                  "Production AI applications where supported (Azure OpenAI, Azure AI Services); preferred method for security-sensitive workloads",
                  "Low - no secret rotation; security team assigns RBAC roles; operations team monitors identity assignment drift",
                  "10 minutes"
                ],
                [
                  "Private Endpoints with VNet integration",
                  "Highest - Traffic never leaves Microsoft backbone; required for regulatory compliance (HIPAA, PCI-DSS)",
                  "Enterprise AI solutions with strict data residency or network isolation requirements; financial services, healthcare",
                  "High - network team configures VNets, subnets, DNS; ongoing monitoring of private link connectivity",
                  "45-60 minutes"
                ]
              ]
            },
            "comparisonTableCaption": "Comparison of secure configuration methods for integrating AI services with Azure App Service, including security level, use cases, and operational considerations",
            "images": [],
            "imageSuggestions": [
              "Screenshot of Azure App Service Configuration blade showing an application setting named OPENAI_API_KEY with a Key Vault reference value (@Microsoft.KeyVault(SecretUri=https://...)) and a green checkmark indicating successful secret retrieval",
              "Screenshot showing the Networking blade of an App Service with VNet Integration enabled and a private endpoint connection listed for Azure OpenAI Service with status 'Approved'"
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [
              "Interactive module presenting three AI application scenarios (development prototype, production SaaS app, healthcare patient portal) where learners select the appropriate configuration method and explain security or compliance justifications for their choice"
            ],
            "visualAccessibilityNotes": "Describe each step in the sequence diagram with emphasis on the security mechanisms: Key Vault reference retrieval, managed identity authentication, and telemetry logging. Ensure comparison table relationships between security level and use case are clear for assistive technology.",
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "Key Vault references in App Service",
                "url": "https://learn.microsoft.com/azure/app-service/app-service-key-vault-references",
                "note": "Detailed guide on configuring Key Vault references for secret management"
              },
              {
                "title": "Private endpoints for Azure OpenAI",
                "url": "https://learn.microsoft.com/azure/ai-services/openai/how-to/private-link",
                "note": "Step-by-step instructions for configuring private network access to AI services"
              }
            ],
            "estimatedDurationMinutes": 12
          },
          {
            "id": "implement-secure-authentication",
            "title": "Implement managed identity authentication for AI services",
            "type": "concept",
            "narrativeMd": "While Key Vault references eliminate plaintext credentials in application settings, they still require managing API keys—your security team must rotate secrets periodically, your operations team must monitor key expiration dates, and your development team must update Key Vault references when keys change. Managed identities offer a fundamentally different approach by removing secrets entirely from the authentication equation. Instead of your application proving its identity with a password-like API key, Azure Active Directory issues short-lived access tokens automatically based on the application's assigned identity, creating a zero-credential authentication model that satisfies the most stringent security requirements.\n\n## Understanding managed identity types\n\nAzure App Service supports two managed identity types: system-assigned and user-assigned. When you enable a system-assigned managed identity, Azure creates an identity resource tied exclusively to your App Service instance—this identity exists only as long as the App Service exists, and deleting the App Service automatically removes the identity. This one-to-one lifecycle coupling simplifies identity management for single-application scenarios where your recommendation engine has dedicated Azure OpenAI and Azure AI Services resources. Your development team enables system-assigned identity during App Service creation, then your security team grants that identity the necessary RBAC roles, establishing authentication without ever handling credentials.\n\nUser-assigned managed identities, by contrast, exist as independent Azure resources that outlive any single App Service instance. Consider what happens when you operate ten microservices that all need access to the same shared Azure OpenAI deployment—creating ten system-assigned identities would require your security team to assign RBAC roles ten times, once per identity. With a user-assigned identity, you create one identity resource, grant it the required permissions once, then assign that same identity to all ten App Services. This approach reduces administrative overhead significantly in multi-application environments, while giving your security team centralized visibility into which identity accesses which AI services.\n\n## Assigning RBAC roles for AI service access\n\nOnce your App Service has a managed identity—whether system-assigned or user-assigned—that identity needs permissions to call Azure OpenAI Service and Azure AI Services. Azure role-based access control (RBAC) governs these permissions through built-in roles designed for AI service scenarios. The **Cognitive Services OpenAI User** role grants permissions to submit inference requests to Azure OpenAI deployments, read model information, and list available models, but denies management operations like creating new deployments or modifying rate limits. This least-privilege approach ensures your application can generate AI-powered recommendations without gaining administrative control over the OpenAI resource itself.\n\nSimilarly, the **Cognitive Services User** role provides read and inference permissions for Azure AI Services resources like Computer Vision, Speech, or Language services. When your product recommendation engine needs to analyze product images using Azure AI Vision, you assign the Cognitive Services User role to your App Service's managed identity at the scope of the AI Vision resource. Your security team validates these assignments through the Azure portal's Access Control (IAM) blade, verifying that each identity has only the permissions required for its job function and no more.\n\nWith these role assignments in place, your application authenticates to AI services without retrieving secrets from Key Vault or reading API keys from environment variables. Instead, your code uses Azure SDK libraries that automatically request access tokens from Azure Active Directory using the App Service's managed identity. For example, Python code using the `azure-identity` library calls `DefaultAzureCredential()`, which detects the managed identity environment and obtains tokens transparently. This becomes especially powerful during credential rotation—because no secrets exist to rotate, your security team eliminates the operational overhead of scheduled key updates while maintaining continuous audit trails through Azure AD sign-in logs.\n\n## When to use each identity type\n\nChoosing between system-assigned and user-assigned identities depends on your application architecture and operational model. System-assigned identities suit scenarios where your App Service has a one-to-one relationship with AI service resources—for instance, a dedicated recommendation engine that calls only its own Azure OpenAI deployment and no other services. This approach minimizes identity sprawl, reducing the total number of identities your security team must audit. At the same time, deleting the App Service automatically cleans up the identity, preventing orphaned identities that consume management overhead without serving active applications.\n\nUser-assigned identities become valuable when multiple applications share AI service resources or when you need identity persistence across App Service lifecycle events. In microservices architectures where five different services call the same Azure OpenAI deployment, assigning a single user-assigned identity to all five App Services reduces RBAC management from five separate role assignments to one. This centralization also simplifies security reviews—your compliance team can audit a single identity's permissions rather than tracking permissions across five system-assigned identities. However, this sharing introduces coordination requirements: your security team must carefully document which applications use each user-assigned identity, and your operations team must validate that deleting one App Service doesn't inadvertently remove identity assignments needed by other running applications.\n\n## Updating application code for managed identity\n\nTransitioning from API key authentication to managed identity requires minimal code changes when using Azure SDK libraries. Traditional code reads an API key from environment variables, then passes that key explicitly when constructing AI service clients. With managed identity, you replace the explicit key with a credential object that handles token acquisition automatically. For Azure OpenAI Service, this means replacing `AzureOpenAI(api_key=os.environ['OPENAI_API_KEY'])` with `AzureOpenAI(azure_ad_token_provider=get_bearer_token_provider(DefaultAzureCredential(), 'https://cognitiveservices.azure.com/.default'))` in Python, or equivalent patterns in C# and JavaScript.\n\nThis code pattern works identically across development, staging, and production environments because `DefaultAzureCredential` automatically detects the available authentication method—using your personal Azure CLI credentials during local development, then switching to managed identity when running in App Service. Your development team benefits from this consistency, writing authentication code once that works everywhere without environment-specific conditionals. At the same time, your security team gains confidence that production deployments never rely on developer credentials or hardcoded keys, even temporarily.\n\n## Security and operations team responsibilities\n\nManaged identity authentication shifts security and operations team workflows from credential lifecycle management to identity and access governance. Your security team's primary responsibility becomes reviewing and approving RBAC role assignments—when a new AI application requests access to Azure OpenAI Service, your team validates the business justification, assigns the minimum necessary role (typically Cognitive Services OpenAI User), and documents the assignment in your identity governance system. This review happens once during initial deployment rather than continuously during the application's lifetime, reducing operational toil while maintaining security rigor.\n\nYour operations team monitors managed identity health through Azure AD sign-in logs and App Service diagnostic logs. When Application Insights shows authentication errors calling Azure OpenAI Service, your team checks whether the managed identity still has the required role assignment—configuration drift from accidental permission removal or resource moves can break authentication even when code remains unchanged. With proper monitoring in place, these issues surface through alerts rather than user-reported failures, maintaining SLA commitments while your team investigates root causes. By eliminating secret rotation windows and credential expiration dates, managed identity authentication reduces the number of planned maintenance events your operations team must coordinate, freeing capacity for proactive optimization work.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": "graph TB\n    subgraph App Service Environment\n        A[Azure App Service<br/>Product Recommendation App]\n        A1[System-assigned Identity<br/>Lifecycle tied to App Service]\n        A2[User-assigned Identity<br/>Shared across resources]\n        A -->|Enables| A1\n        A -->|Assigns| A2\n    end\n    \n    subgraph Azure Active Directory\n        B[Azure AD Identity Management]\n        A1 -->|Registers with| B\n        A2 -->|Registers with| B\n    end\n    \n    subgraph AI Services\n        C[Azure OpenAI Service]\n        D[Azure AI Vision]\n        E[Azure Key Vault]\n    end\n    \n    subgraph RBAC Assignments\n        F[Cognitive Services OpenAI User]\n        G[Cognitive Services User]\n        H[Key Vault Secrets User]\n    end\n    \n    B -->|RBAC Role Assignment| F\n    B -->|RBAC Role Assignment| G\n    B -->|RBAC Role Assignment| H\n    F -->|Grants Access to| C\n    G -->|Grants Access to| D\n    H -->|Grants Access to| E\n    \n    A -->|Authenticates to| C\n    A -->|Authenticates to| D\n    A -->|Authenticates to| E",
            "diagramCaption": "Managed identity authentication architecture showing Azure App Service using system-assigned or user-assigned identities with RBAC role assignments to access AI services without storing credentials",
            "diagramAltText": "Architecture diagram showing Azure App Service with both system-assigned and user-assigned managed identities. System-assigned identity lifecycle is tied to the App Service resource, while user-assigned identity can be shared across multiple resources. Both identity types register with Azure Active Directory. Azure AD grants RBAC role assignments: Cognitive Services OpenAI User for Azure OpenAI Service access, Cognitive Services User for Azure AI Vision access, and Key Vault Secrets User for Azure Key Vault access. The diagram emphasizes that App Service authenticates to all three services using managed identity, eliminating the need to store API keys or connection strings in application code or configuration.",
            "comparisonTable": {
              "headers": [
                "Managed Identity Type",
                "Lifecycle",
                "Resource Sharing",
                "Best Use Case",
                "Team Responsibility"
              ],
              "rows": [
                [
                  "System-assigned",
                  "Created and deleted with the App Service resource; cannot exist independently",
                  "No - unique to one App Service instance; creates 1:1 relationship between identity and resource",
                  "Single AI application with dedicated resources; simplifies identity management when App Service and AI services have matching lifecycles",
                  "Development team enables during App Service creation; security team assigns RBAC roles; operations team monitors in resource activity logs"
                ],
                [
                  "User-assigned",
                  "Independent managed resource; persists after App Service deletion; can be pre-created and reused",
                  "Yes - same identity can authenticate multiple App Services, Azure Functions, or VMs to shared AI services",
                  "Multi-application environment sharing Azure OpenAI deployment; microservices architecture where multiple services need identical AI service permissions; simplifies RBAC when 10+ apps use the same backend",
                  "Security team creates and manages identity lifecycle; development team assigns to App Services; operations team audits which resources use each identity"
                ]
              ]
            },
            "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication, including lifecycle, sharing capabilities, and operational responsibilities",
            "images": [],
            "imageSuggestions": [
              "Screenshot of Azure App Service Identity blade with System assigned tab selected, showing the Status toggle set to On with a green indicator and the Object (principal) ID displayed below",
              "Screenshot of Azure OpenAI Service Access Control (IAM) blade showing the Add role assignment wizard with Cognitive Services OpenAI User role selected and a managed identity listed in the Members section with a checkmark",
              "Code snippet showing Python code using Azure Identity library's DefaultAzureCredential to authenticate to Azure OpenAI Service without hardcoded keys, with comments explaining how it automatically tries managed identity authentication first"
            ],
            "videoSuggestions": [
              "4-minute walkthrough demonstrating how to enable system-assigned managed identity in the Azure portal, navigate to Azure OpenAI Service IAM, assign the Cognitive Services OpenAI User role, and update Python application code to use DefaultAzureCredential instead of API keys"
            ],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": "Clearly describe the flow from App Service through Azure AD to each AI service, emphasizing RBAC role names and their specific permissions. Ensure the architecture diagram conveys the elimination of stored credentials and the automated authentication process for screen reader users.",
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "Managed identities for App Service",
                "url": "https://learn.microsoft.com/azure/app-service/overview-managed-identity",
                "note": "Comprehensive guide on enabling and using managed identities in Azure App Service"
              },
              {
                "title": "Azure OpenAI authentication with managed identity",
                "url": "https://learn.microsoft.com/azure/ai-services/openai/how-to/managed-identity",
                "note": "Step-by-step instructions for configuring managed identity authentication to Azure OpenAI Service"
              }
            ],
            "estimatedDurationMinutes": 11
          },
          {
            "id": "exercise-deploy-ai-app",
            "title": "Exercise: Deploy and configure an AI-powered web application",
            "type": "exercise",
            "narrativeMd": "Your retail company needs to deploy a product recommendation engine to production. As the cloud engineer, you'll deploy an Azure App Service instance, configure it to integrate with Azure OpenAI Service using managed identity authentication, and validate that the application generates AI-powered recommendations successfully. This exercise demonstrates the end-to-end deployment workflow you'll use when moving AI applications from development to production environments.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [
              "Screenshot of the running product recommendation web application showing an input form where users can enter a product category, a Submit button, and a response section displaying AI-generated product recommendations from Azure OpenAI Service with product names, descriptions, and confidence scores",
              "Screenshot of the Application Insights Performance blade showing a transaction timeline with dependencies highlighted, specifically showing calls to Azure OpenAI Service with response times, success rates, and token usage metrics visible in the details pane",
              "Screenshot of the Azure OpenAI Service Access Control (IAM) blade with the Role assignments tab selected, filtering by the App Service's managed identity name, showing the Cognitive Services OpenAI User role assigned with a green checkmark indicating active permission"
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [
              "Interactive step-by-step checklist that learners complete as they progress through the exercise, including checkboxes for: App Service created with Standard tier, system-assigned managed identity enabled and Object ID copied, RBAC role assigned to Azure OpenAI, application settings configured with OpenAI endpoint, code deployed successfully, test request returns AI recommendations, Application Insights shows dependency calls, and all resources deleted during cleanup"
            ],
            "visualAccessibilityNotes": "Provide descriptive alt text for all screenshots showing the specific UI elements learners need to locate and interact with, including button labels, field names, and status indicators.",
            "codeSamples": [],
            "exercise": {
              "scenario": "You work as a cloud engineer for Contoso Retail. The company has developed a product recommendation engine that uses Azure OpenAI Service to generate personalized suggestions based on customer browsing history. Your task is to deploy this application to Azure App Service with Standard tier hosting, configure managed identity authentication to eliminate API key management, and validate that the production deployment successfully integrates with Azure OpenAI Service. The application code is available in a GitHub repository, and you need to ensure the deployment follows security best practices by avoiding hardcoded credentials.",
              "prerequisites": [
                "Active Azure subscription with Contributor access to create resources",
                "Azure OpenAI Service resource already deployed with a GPT-4 model deployment named 'gpt-4'",
                "Basic familiarity with the Azure portal navigation",
                "Completion of previous concept units in this module"
              ],
              "jobSkills": [
                "Azure App Service deployment and configuration",
                "Managed identity authentication implementation",
                "RBAC role assignment for AI service access",
                "Application monitoring with Application Insights"
              ],
              "estimatedMinutes": 15,
              "steps": [
                {
                  "action": "Sign in to the Azure portal at https://portal.azure.com and create a new resource group named rg-contoso-recommendations in the East US region to contain all exercise resources",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Resource group rg-contoso-recommendations appears in the resource groups list with status Active and location East US",
                  "screenshotDescription": "Azure portal showing the resource groups blade with rg-contoso-recommendations highlighted in the list"
                },
                {
                  "action": "Navigate to App Services and create a new web app named contoso-recommendations-[yourname] using the .NET 8 (LTS) runtime stack, Standard S1 pricing tier, and placing it in the rg-contoso-recommendations resource group",
                  "selector": null,
                  "value": null,
                  "expectedResult": "App Service deployment completes successfully with a unique URL displayed (for example, https://contoso-recommendations-yourname.azurewebsites.net) and status showing as Running in the overview page",
                  "screenshotDescription": null
                },
                {
                  "action": "Navigate to the Identity blade of your App Service, select the System assigned tab, and toggle Status to On to enable system-assigned managed identity, then save the configuration and copy the Object (principal) ID for later use",
                  "selector": null,
                  "value": null,
                  "expectedResult": "System assigned managed identity Status shows On with a green indicator, and an Object (principal) ID is displayed (for example, a 32-character GUID like 12345678-1234-1234-1234-123456789abc)",
                  "screenshotDescription": "App Service Identity blade showing system-assigned identity enabled with Object ID visible"
                },
                {
                  "action": "Navigate to your existing Azure OpenAI Service resource, open the Access Control (IAM) blade, select Add role assignment, choose the Cognitive Services OpenAI User role, and assign it to the managed identity you just created by searching for your App Service name in the Members section",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Role assignment completes successfully with a notification confirming that Cognitive Services OpenAI User role was assigned to your App Service's managed identity, visible in the Role assignments tab filtered by your managed identity",
                  "screenshotDescription": "Azure OpenAI Service IAM blade showing the new role assignment with your App Service's managed identity listed as a member of Cognitive Services OpenAI User role"
                },
                {
                  "action": "Return to your App Service, navigate to Configuration under Settings, add a new application setting named OPENAI_ENDPOINT with value https://[your-openai-resource-name].openai.azure.com (replace with your actual Azure OpenAI resource name), then save the configuration",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Application setting OPENAI_ENDPOINT appears in the configuration list with the correct endpoint URL, and the App Service automatically restarts to apply the new setting",
                  "screenshotDescription": null
                },
                {
                  "action": "Navigate to the Deployment Center blade, select GitHub as the source, authenticate with your GitHub account if prompted, choose the repository contoso-samples/product-recommendation-engine (fictional example), select the main branch, and save to enable continuous deployment",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Deployment workflow runs automatically and completes with success status, showing the latest commit deployed and application logs confirming successful startup",
                  "screenshotDescription": "Deployment Center showing GitHub source connected with successful deployment status and commit details"
                },
                {
                  "action": "Navigate to your App Service URL (https://contoso-recommendations-yourname.azurewebsites.net), enter 'outdoor gear' in the product category input field, and select Submit to test the recommendation engine",
                  "selector": null,
                  "value": null,
                  "expectedResult": "The page displays AI-generated product recommendations including items like 'Hiking Backpack', 'Trail Running Shoes', and 'Portable Water Filter' with descriptions and confidence scores, confirming successful integration with Azure OpenAI Service using managed identity authentication",
                  "screenshotDescription": "Web application interface showing the recommendation results with multiple product suggestions displayed"
                },
                {
                  "action": "Navigate to Application Insights linked to your App Service, open the Performance blade, view the transaction timeline, and verify that calls to Azure OpenAI Service appear as dependencies with response times and success rates",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Application Insights Performance view shows Azure OpenAI Service listed in the dependencies section with average response time under 2 seconds, 100% success rate, and token usage metrics visible in the details pane",
                  "screenshotDescription": "Application Insights Performance blade showing OpenAI Service dependency metrics with response times and success indicators"
                }
              ],
              "successCriteria": [
                "App Service deployed with Standard S1 tier and status Running",
                "System-assigned managed identity enabled with Object ID visible",
                "Cognitive Services OpenAI User role assigned to the managed identity",
                "Application setting OPENAI_ENDPOINT configured correctly",
                "Web application returns AI-generated recommendations without authentication errors",
                "Application Insights tracks Azure OpenAI Service calls as dependencies"
              ],
              "cleanup": [
                "Navigate to the resource groups blade in the Azure portal and select rg-contoso-recommendations",
                "Select Delete resource group, type the resource group name to confirm, and select Delete to remove all exercise resources including App Service, Application Insights, and role assignments",
                "Verify in the Notifications pane that resource group deletion completed successfully to avoid ongoing charges"
              ],
              "commonIssues": [
                {
                  "issue": "App Service name already exists error during creation",
                  "solution": "Append a unique suffix like your initials and today's date to the app name (for example, contoso-recommendations-jd0115) since App Service names must be globally unique across Azure"
                },
                {
                  "issue": "Recommendation request returns 403 Forbidden error",
                  "solution": "Verify that the RBAC role assignment completed successfully by checking the Azure OpenAI Service IAM blade—role propagation can take 2-5 minutes, so wait briefly then retry the request"
                },
                {
                  "issue": "Application Insights doesn't show OpenAI dependencies",
                  "solution": "Ensure the Application Insights connection string is configured in App Service application settings and that you've made at least one recommendation request after deployment—telemetry can take 2-3 minutes to appear in queries"
                }
              ]
            },
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "Deploy code to App Service",
                "url": "https://learn.microsoft.com/azure/app-service/deploy-github-actions",
                "note": "Detailed guide on configuring GitHub Actions deployment for App Service"
              }
            ],
            "estimatedDurationMinutes": 15
          },
          {
            "id": "knowledge-check",
            "title": "Knowledge check",
            "type": "knowledge-check",
            "narrativeMd": "Test your understanding of deploying and managing AI applications on Azure App Service by applying the concepts you learned to realistic scenarios. Each question presents a situation you might encounter when configuring hosting plans, securing AI service integration, or troubleshooting production deployments.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": null,
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": {
              "narrativeMd": "Test your understanding of deploying and managing AI applications on Azure App Service by applying the concepts you learned to realistic scenarios. Each question presents a situation you might encounter when configuring hosting plans, securing AI service integration, or troubleshooting production deployments.",
              "questions": [
                {
                  "questionText": "Your company deploys a customer support chatbot that uses Azure OpenAI Service to generate responses. During business hours (8 AM - 6 PM), the application receives an average of 25,000 requests per day with spikes to 40,000 requests during product launches. Your target response time is under 2 seconds, and your compliance team requires all traffic between the chatbot and Azure OpenAI to remain within your corporate network. Which Azure App Service hosting plan best meets these requirements?",
                  "options": [
                    "Standard S2 tier with auto-scaling enabled up to 10 instances based on CPU threshold of 70%",
                    "Premium P1v2 tier with VNet integration and auto-scaling enabled up to 20 instances based on HTTP queue length",
                    "Basic B2 tier with manual scaling to 3 instances and scheduled scale-up during business hours"
                  ],
                  "correctIndex": 1,
                  "rationale": "Premium P1v2 tier is correct because it provides VNet integration required to keep traffic on the corporate network (satisfying the compliance requirement), supports auto-scaling up to 30 instances (sufficient for the 40,000 request spike), and offers the performance needed for sub-2-second response times. Standard tier (option 1) lacks VNet integration for private network connectivity, failing the compliance requirement. Basic tier (option 3) doesn't support auto-scaling and would require manual intervention during traffic spikes, making it unsuitable for production workloads with variable demand."
                },
                {
                  "questionText": "You're deploying a product recommendation engine to Azure App Service that integrates with Azure OpenAI Service. Your security team prohibits storing API keys in application configuration and requires detailed audit logs of all credential access attempts. Your operations team wants to minimize credential rotation overhead. Which authentication approach best addresses these requirements?",
                  "options": [
                    "Store the Azure OpenAI API key in Azure Key Vault and use a Key Vault reference in App Service application settings",
                    "Enable system-assigned managed identity for the App Service and assign the Cognitive Services OpenAI User role to the identity",
                    "Store the Azure OpenAI API key directly in App Service application settings encrypted at rest"
                  ],
                  "correctIndex": 1,
                  "rationale": "System-assigned managed identity (option 2) is correct because it completely eliminates API keys (satisfying the security team's prohibition), provides audit logging through Azure AD sign-in logs (meeting the audit requirement), and requires no credential rotation (minimizing operations overhead). Key Vault reference (option 1) improves security over plaintext keys but still requires managing and rotating API keys, creating ongoing operations work. Storing encrypted keys in application settings (option 3) violates the security team's policy against storing keys in configuration and provides no audit logging of access attempts."
                },
                {
                  "questionText": "Your AI application deployed to Azure App Service successfully integrates with Azure OpenAI Service in your development environment, but after deploying to production, all recommendation requests return HTTP 500 errors. Application Insights logs show 'Failed to acquire token' errors when calling Azure OpenAI. The production App Service uses a system-assigned managed identity, and you verified the OPENAI_ENDPOINT application setting is configured correctly. What is the most likely cause and solution?",
                  "options": [
                    "The managed identity lacks the required RBAC role assignment; assign the Cognitive Services OpenAI User role to the App Service's managed identity at the Azure OpenAI resource scope",
                    "The Azure OpenAI endpoint URL is incorrect; update the OPENAI_ENDPOINT application setting to use the private endpoint address instead of the public FQDN",
                    "Application Insights is blocking the OpenAI API calls; disable Application Insights monitoring temporarily to isolate the authentication issue"
                  ],
                  "correctIndex": 0,
                  "rationale": "Missing RBAC role assignment (option 1) is correct because 'Failed to acquire token' specifically indicates the managed identity exists but lacks permissions to access Azure OpenAI Service—assigning Cognitive Services OpenAI User role resolves the authentication failure. Incorrect endpoint URL (option 2) would produce connection errors or DNS resolution failures, not token acquisition errors, and the question states the endpoint setting was verified. Disabling Application Insights (option 3) would eliminate visibility into the problem without addressing the root cause, and Application Insights doesn't block API calls—it only observes them."
                }
              ]
            },
            "resources": [],
            "estimatedDurationMinutes": 3
          },
          {
            "id": "summary",
            "title": "Summary",
            "type": "summary",
            "narrativeMd": "You successfully deployed Contoso Retail's product recommendation engine to Azure App Service, eliminating the manual scaling and security challenges that plagued the initial launch. By selecting Standard tier hosting with auto-scaling triggered by HTTP queue length, you ensured the application automatically adapts to traffic spikes without manual intervention from your operations team. Implementing managed identity authentication removed API key management overhead, satisfying your security team's zero-trust requirements while eliminating credential rotation tasks. Application Insights now provides visibility into Azure OpenAI Service call patterns, token consumption, and response times, giving your team the data needed to optimize both performance and costs.\n\n## Key takeaways\n\nThroughout this module, you learned job-critical skills for deploying production AI applications:\n\n- **Hosting plan selection**: Evaluate expected request volume, response time requirements, and compliance constraints to choose between Basic (development/testing), Standard (production with moderate traffic), Premium (high-volume with private networking), or Isolated (enterprise compliance) tiers, balancing performance against monthly costs that range from $55 to $680+.\n- **Secure AI service integration**: Configure Azure App Service to integrate Azure OpenAI Service and Azure AI Services using Key Vault references for secret protection or managed identity for zero-credential authentication, selecting the approach that aligns with your security policies and operational capacity.\n- **Managed identity authentication**: Enable system-assigned or user-assigned managed identities and assign Cognitive Services OpenAI User or Cognitive Services User RBAC roles to grant least-privilege access to AI services, eliminating API key storage and rotation requirements.\n- **Production monitoring**: Use Application Insights to track AI service dependencies, response times, success rates, and token consumption, providing your operations team with telemetry to diagnose performance issues and your finance team with data to optimize AI service costs.\n\nThese skills enable you to deploy AI applications that scale automatically, authenticate securely, and provide operational visibility—core requirements for maintaining SLA commitments while controlling costs in production environments.\n\n## Next steps\n\nBuild on your Azure App Service and AI integration knowledge with these recommended learning paths:\n\n- **Scale applications in Azure App Service**: Learn advanced auto-scaling strategies including custom metrics, scheduled scaling, and performance optimization techniques for high-traffic AI workloads.\n- **Implement Azure Container Apps for AI workloads**: Explore containerized deployment options for AI applications requiring microservices architecture or event-driven scaling patterns.\n- **Build CI/CD pipelines for AI applications with Azure DevOps**: Automate deployment workflows including model versioning, staged rollouts, and automated testing for AI-powered applications.\n- **Optimize costs for Azure AI services**: Discover cost management techniques including reserved capacity, commitment tiers, and usage analytics to reduce Azure OpenAI and Azure AI Services spending.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": null,
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "Azure App Service documentation",
                "url": "https://learn.microsoft.com/azure/app-service/",
                "note": "Comprehensive reference for App Service features, configuration, and best practices"
              },
              {
                "title": "Azure OpenAI Service documentation",
                "url": "https://learn.microsoft.com/azure/ai-services/openai/",
                "note": "Official documentation for deploying and using Azure OpenAI Service"
              },
              {
                "title": "Application Insights for App Service",
                "url": "https://learn.microsoft.com/azure/azure-monitor/app/azure-web-apps",
                "note": "Guide to configuring and using Application Insights monitoring for App Service applications"
              }
            ],
            "estimatedDurationMinutes": 2
          }
        ]
      },
      "feedback": [
        "All 7 units passed validation (score: 70.33)"
      ],
      "attempts": 1,
      "durationMs": 439933.429
    },
    {
      "stage": "QualityAssurance",
      "passed": true,
      "qualityScore": 1,
      "result": {
        "learningPath": {
          "id": "deploy-ai-solutions-azure-app-service",
          "title": "Deploy AI solutions with Azure App Service",
          "level": "intermediate",
          "roles": [
            "ai-engineer",
            "azure-developer",
            "solutions-architect"
          ],
          "products": [
            "Azure App Service",
            "Azure OpenAI Service",
            "Azure AI Services",
            "Azure Container Registry",
            "Azure Application Insights"
          ],
          "subjects": [
            "artificial-intelligence",
            "cloud-computing",
            "web-development"
          ],
          "prerequisites": [
            "Familiarity with Azure fundamentals and the Azure portal",
            "Basic understanding of RESTful APIs and web application architecture",
            "Experience with at least one programming language (Python, C#, or JavaScript)",
            "Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge"
          ],
          "summary": "Learn to deploy and scale AI-powered applications using Azure App Service. Configure hosting environments, integrate Azure AI services, implement authentication, and monitor production workloads for intelligent solutions.",
          "modules": [
            {
              "id": "deploy-ai-solutions-azure-app-service-module",
              "title": "Deploy and manage AI applications on Azure App Service",
              "description": "Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.",
              "learningObjectives": [
                "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
                "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
                "Implement managed identity authentication to connect AI services without storing credentials",
                "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
              ],
              "estimatedDurationMinutes": 58,
              "yml": "### YamlMime:Module\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module\nmetadata:\n  title: Deploy and manage AI applications on Azure App Service\n  description: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads. Learn to evaluate deployment options, configure secure service integration, implement managed identity authentication, and monitor AI application performance and costs.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.service: azure-app-service\n  ms.topic: module-standard-task-based\ntitle: Deploy and manage AI applications on Azure App Service\nsummary: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.\nabstract: |\n  - Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n  - Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n  - Implement managed identity authentication to connect AI services without storing credentials\n  - Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\nprerequisites: |\n  - Familiarity with Azure fundamentals and the Azure portal\n  - Basic understanding of RESTful APIs and web application architecture\n  - Experience with at least one programming language (Python, C#, or JavaScript)\n  - Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge\niconUrl: /training/achievements/deploy-ai-solutions-azure-app-service.svg\nlevels:\n  - intermediate\nroles:\n  - ai-engineer\n  - azure-developer\n  - solutions-architect\nproducts:\n  - azure-app-service\n  - azure-openai\n  - azure-ai-services\n  - azure-container-registry\n  - azure-monitor\nsubjects:\n  - artificial-intelligence\n  - cloud-computing\n  - web-development\nunits:\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\nbadge:\n  uid: learn.wwl.deploy-ai-solutions-azure-app-service-module.badge",
              "units": [
                {
                  "id": "introduction",
                  "title": "Introduction",
                  "type": "introduction",
                  "description": "Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.",
                  "estimatedDurationMinutes": 5,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\ntitle: Introduction\nmetadata:\n  title: Introduction\n  description: Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 5\ncontent: |\n  [!include[](includes/1-introduction.md)]",
                  "diagramMermaid": null,
                  "diagramCaption": null,
                  "diagramAltText": null,
                  "comparisonTable": null,
                  "comparisonTableCaption": null,
                  "images": [],
                  "imageSuggestions": [
                    {
                      "title": "AI-powered web application architecture",
                      "description": "Diagram showing Azure App Service hosting a web app that calls Azure OpenAI Service and Azure AI Services, with Application Insights monitoring the entire solution"
                    }
                  ],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [],
                  "visualAccessibilityNotes": "Include detailed alt text describing the flow from user request through App Service to AI services and monitoring, ensuring screen reader users understand the architectural components and data flow."
                },
                {
                  "id": "evaluate-app-service-ai-workloads",
                  "title": "Evaluate Azure App Service deployment options for AI workloads",
                  "type": "concept",
                  "description": "Explanation of Azure App Service hosting plans (Free, Shared, Basic, Standard, Premium, Isolated) with guidance on selecting appropriate tiers for AI applications based on performance, scalability, and cost requirements. Covers deployment slots, scaling options, and considerations for compute-intensive AI workloads.",
                  "estimatedDurationMinutes": 10,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\ntitle: Evaluate Azure App Service deployment options for AI workloads\nmetadata:\n  title: Evaluate Azure App Service deployment options for AI workloads\n  description: Explanation of Azure App Service hosting plans with guidance on selecting appropriate tiers for AI applications based on performance, scalability, and cost requirements. Covers deployment slots, scaling options, and considerations for compute-intensive AI workloads.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 10\ncontent: |\n  [!include[](includes/2-evaluate-app-service-ai-workloads.md)]",
                  "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan}\n    C -->|Development| D[Basic Tier]\n    C -->|Production| E[Standard/Premium Tier]\n    C -->|Enterprise| F[Isolated Tier]\n    E --> G[Auto-scaling]\n    E --> H[Deployment Slots]\n    B --> I[Azure OpenAI Service]\n    B --> J[Azure AI Services]\n    G --> K[Scale based on CPU/Memory]\n    G --> L[Scale based on HTTP Queue]",
                  "diagramCaption": "Azure App Service hosting plan decision tree for AI workloads",
                  "diagramAltText": "Flowchart showing user requests flowing to Azure App Service, which branches into three hosting plan options: Basic tier for development, Standard/Premium tier for production with auto-scaling and deployment slots, and Isolated tier for enterprise workloads. The diagram also shows App Service connecting to Azure OpenAI Service and Azure AI Services, with auto-scaling triggered by CPU, memory, or HTTP queue metrics.",
                  "comparisonTable": {
                    "headers": [
                      "Hosting Plan",
                      "AI Workload Fit",
                      "Scaling",
                      "Key Features",
                      "Typical Monthly Cost"
                    ],
                    "rows": [
                      [
                        "Basic",
                        "Development/Testing",
                        "Manual scale up to 3 instances",
                        "Custom domains, SSL",
                        "$55-$220"
                      ],
                      [
                        "Standard",
                        "Production AI apps",
                        "Auto-scale up to 10 instances",
                        "Deployment slots, daily backups",
                        "$75-$300"
                      ],
                      [
                        "Premium",
                        "High-traffic AI services",
                        "Auto-scale up to 30 instances",
                        "VNet integration, advanced scaling",
                        "$150-$600"
                      ],
                      [
                        "Isolated",
                        "Enterprise AI solutions",
                        "Auto-scale up to 100 instances",
                        "Private environment, advanced security",
                        "$680+"
                      ]
                    ]
                  },
                  "comparisonTableCaption": "Azure App Service hosting plan comparison for AI application deployment",
                  "images": [],
                  "imageSuggestions": [],
                  "videoSuggestions": [
                    {
                      "title": "Choosing the right App Service plan for AI workloads",
                      "description": "Short video demonstrating how to evaluate hosting plan options based on expected AI service call volume and response time requirements"
                    }
                  ],
                  "interactiveSuggestions": [
                    {
                      "title": "App Service plan selector for AI scenarios",
                      "description": "Interactive tool where learners input expected request volume, latency requirements, and budget to receive a recommended hosting plan with justification"
                    }
                  ],
                  "visualAccessibilityNotes": "Ensure the comparison table is properly marked up with table headers and row headers. Describe the flowchart's branching logic and connections for screen reader users, emphasizing the decision criteria for each hosting plan tier."
                },
                {
                  "id": "configure-ai-service-integration",
                  "title": "Configure secure integration with Azure AI services",
                  "type": "concept",
                  "description": "Guidance on configuring Azure App Service application settings to store AI service endpoints and keys securely. Covers environment variables, Key Vault references, connection string management, and best practices for separating development and production configurations. Includes network security considerations and private endpoint setup.",
                  "estimatedDurationMinutes": 12,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\ntitle: Configure secure integration with Azure AI services\nmetadata:\n  title: Configure secure integration with Azure AI services\n  description: Guidance on configuring Azure App Service application settings to store AI service endpoints and keys securely. Covers environment variables, Key Vault references, connection string management, and network security considerations.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 12\ncontent: |\n  [!include[](includes/3-configure-ai-service-integration.md)]",
                  "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    \n    User->>AppService: HTTP Request\n    AppService->>KeyVault: Retrieve API Keys\n    KeyVault-->>AppService: Return Secrets\n    AppService->>OpenAI: Call with Managed Identity\n    OpenAI-->>AppService: AI Response\n    AppService->>AIServices: Process with AI Services\n    AIServices-->>AppService: Analysis Results\n    AppService-->>User: Combined Response",
                  "diagramCaption": "Secure integration flow between Azure App Service and AI services using Key Vault and managed identity",
                  "diagramAltText": "Sequence diagram illustrating the secure flow of an AI application request. A user sends an HTTP request to Azure App Service, which retrieves API keys from Azure Key Vault. App Service then calls Azure OpenAI Service using managed identity authentication and processes data through Azure AI Services. Finally, the combined AI-powered response is returned to the user.",
                  "comparisonTable": {
                    "headers": [
                      "Configuration Method",
                      "Security Level",
                      "Use Case",
                      "Setup Complexity"
                    ],
                    "rows": [
                      [
                        "Application Settings (plain text)",
                        "Low - Not recommended",
                        "Quick prototyping only",
                        "Very simple"
                      ],
                      [
                        "Application Settings (Key Vault reference)",
                        "High",
                        "Production apps with secrets",
                        "Moderate"
                      ],
                      [
                        "Managed Identity",
                        "Highest",
                        "Production apps without secrets",
                        "Simple"
                      ],
                      [
                        "Private Endpoints",
                        "Highest",
                        "Enterprise compliance requirements",
                        "Complex"
                      ]
                    ]
                  },
                  "comparisonTableCaption": "Comparison of configuration methods for integrating AI services with Azure App Service",
                  "images": [],
                  "imageSuggestions": [
                    {
                      "title": "Azure App Service configuration blade",
                      "description": "Screenshot showing the Application Settings section with Key Vault references configured for Azure OpenAI endpoint and key"
                    }
                  ],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [
                    {
                      "title": "Configuration security checker",
                      "description": "Interactive module that evaluates different configuration approaches and highlights security risks or best practices for each option"
                    }
                  ],
                  "visualAccessibilityNotes": "Provide detailed descriptions of each step in the sequence diagram, including the direction of data flow and the security mechanisms employed at each stage. Ensure comparison table headers and data relationships are clear for assistive technology users."
                },
                {
                  "id": "implement-secure-authentication",
                  "title": "Implement managed identity authentication for AI services",
                  "type": "concept",
                  "description": "Step-by-step explanation of enabling system-assigned or user-assigned managed identities for Azure App Service. Covers granting role-based access control (RBAC) permissions to AI services, eliminating credential management, and implementing identity-based authentication in application code using Azure SDKs.",
                  "estimatedDurationMinutes": 11,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\ntitle: Implement managed identity authentication for AI services\nmetadata:\n  title: Implement managed identity authentication for AI services\n  description: Step-by-step explanation of enabling managed identities for Azure App Service and granting RBAC permissions to AI services. Covers eliminating credential management and implementing identity-based authentication in application code.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 11\ncontent: |\n  [!include[](includes/4-implement-secure-authentication.md)]",
                  "diagramMermaid": "graph LR\n    A[Azure App Service] -->|System-assigned Identity| B[Azure AD]\n    A -->|User-assigned Identity| B\n    B -->|RBAC Assignment| C[Azure OpenAI Service]\n    B -->|RBAC Assignment| D[Azure AI Services]\n    B -->|RBAC Assignment| E[Azure Key Vault]\n    C -->|Cognitive Services OpenAI User| A\n    D -->|Cognitive Services User| A\n    E -->|Key Vault Secrets User| A",
                  "diagramCaption": "Managed identity authentication flow between Azure App Service and AI services",
                  "diagramAltText": "Diagram showing Azure App Service with both system-assigned and user-assigned managed identities connecting to Azure Active Directory. Azure AD grants role-based access control (RBAC) assignments to Azure OpenAI Service, Azure AI Services, and Azure Key Vault. The specific roles shown are Cognitive Services OpenAI User, Cognitive Services User, and Key Vault Secrets User, which enable the App Service to authenticate without storing credentials.",
                  "comparisonTable": {
                    "headers": [
                      "Identity Type",
                      "Lifecycle",
                      "Sharing Across Resources",
                      "Best For"
                    ],
                    "rows": [
                      [
                        "System-assigned",
                        "Tied to App Service resource",
                        "No - one per resource",
                        "Single application scenarios"
                      ],
                      [
                        "User-assigned",
                        "Independent managed resource",
                        "Yes - reusable across multiple resources",
                        "Multi-application environments, shared services"
                      ]
                    ]
                  },
                  "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication",
                  "images": [],
                  "imageSuggestions": [
                    {
                      "title": "Managed identity configuration in Azure portal",
                      "description": "Screenshot showing the Identity blade of an App Service with system-assigned managed identity enabled and status indicator"
                    },
                    {
                      "title": "RBAC role assignment for Azure OpenAI",
                      "description": "Screenshot of the Access Control (IAM) blade showing a managed identity granted the Cognitive Services OpenAI User role"
                    }
                  ],
                  "videoSuggestions": [
                    {
                      "title": "Setting up managed identity for AI applications",
                      "description": "Walkthrough video demonstrating how to enable managed identity, assign RBAC roles, and update application code to use DefaultAzureCredential"
                    }
                  ],
                  "interactiveSuggestions": [],
                  "visualAccessibilityNotes": "Describe the directional flow from App Service through Azure AD to each AI service, emphasizing the elimination of stored credentials. Clearly convey the RBAC role names and their purpose for screen reader users."
                },
                {
                  "id": "exercise-deploy-ai-app",
                  "title": "Exercise: Deploy and configure an AI-powered web application",
                  "type": "exercise",
                  "description": "Hands-on lab guiding learners through deploying a sample AI application to Azure App Service. Steps include creating an App Service instance, configuring application settings with Key Vault references, enabling managed identity, granting RBAC permissions to Azure OpenAI Service, deploying application code from GitHub, testing AI functionality, and reviewing Application Insights telemetry. Includes validation checkpoints and cleanup instructions.",
                  "estimatedDurationMinutes": 15,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\ntitle: 'Exercise: Deploy and configure an AI-powered web application'\nmetadata:\n  title: 'Exercise: Deploy and configure an AI-powered web application'\n  description: Hands-on lab guiding learners through deploying a sample AI application to Azure App Service with managed identity and Azure OpenAI integration. Includes validation checkpoints and cleanup instructions.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 15\ncontent: |\n  [!include[](includes/5-exercise-deploy-ai-app.md)]",
                  "diagramMermaid": null,
                  "diagramCaption": null,
                  "diagramAltText": null,
                  "comparisonTable": null,
                  "comparisonTableCaption": null,
                  "images": [],
                  "imageSuggestions": [
                    {
                      "title": "Deployed AI application interface",
                      "description": "Screenshot of the running web application showing an input form for AI prompts and the generated response from Azure OpenAI Service"
                    },
                    {
                      "title": "Application Insights dashboard",
                      "description": "Screenshot showing real-time telemetry including request rates, response times, and dependency calls to Azure OpenAI Service"
                    }
                  ],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [
                    {
                      "title": "Deployment validation checklist",
                      "description": "Interactive checklist that learners complete as they verify managed identity configuration, RBAC assignments, application settings, and successful AI service integration"
                    }
                  ],
                  "visualAccessibilityNotes": null
                },
                {
                  "id": "knowledge-check",
                  "title": "Knowledge check",
                  "type": "knowledge-check",
                  "description": "Assessment with scenario-based questions confirming learners can select appropriate App Service hosting plans for AI workloads, choose secure configuration methods for AI service integration, implement managed identity authentication correctly, and interpret Application Insights metrics for AI applications.",
                  "estimatedDurationMinutes": 3,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\ntitle: Knowledge check\nmetadata:\n  title: Knowledge check\n  description: Assessment with scenario-based questions confirming learners can select appropriate App Service hosting plans, choose secure configuration methods, implement managed identity authentication, and interpret monitoring metrics for AI applications.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 3\ncontent: |\n  [!include[](includes/6-knowledge-check.md)]",
                  "diagramMermaid": null,
                  "diagramCaption": null,
                  "diagramAltText": null,
                  "comparisonTable": null,
                  "comparisonTableCaption": null,
                  "images": [],
                  "imageSuggestions": [],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [],
                  "visualAccessibilityNotes": null
                },
                {
                  "id": "summary",
                  "title": "Summary",
                  "type": "summary",
                  "description": "Summary revisiting the retail recommendation scenario, highlighting key takeaways including hosting plan selection, secure AI service integration, managed identity implementation, and production monitoring. Points to recommended next steps including advanced scaling strategies, containerized AI deployments, and Azure DevOps integration for CI/CD pipelines.",
                  "estimatedDurationMinutes": 2,
                  "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\ntitle: Summary\nmetadata:\n  title: Summary\n  description: Summary revisiting the retail recommendation scenario and highlighting key takeaways including hosting plan selection, secure AI service integration, managed identity implementation, and production monitoring with next steps.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 2\ncontent: |\n  [!include[](includes/7-summary.md)]",
                  "diagramMermaid": null,
                  "diagramCaption": null,
                  "diagramAltText": null,
                  "comparisonTable": null,
                  "comparisonTableCaption": null,
                  "images": [],
                  "imageSuggestions": [],
                  "videoSuggestions": [],
                  "interactiveSuggestions": [],
                  "visualAccessibilityNotes": null
                }
              ]
            }
          ],
          "estimatedDurationMinutes": 58,
          "nextSteps": [
            "Explore advanced scaling strategies for AI applications using Azure App Service auto-scale rules and Azure Front Door",
            "Learn to containerize AI applications and deploy them using Azure Container Apps for enhanced portability",
            "Implement CI/CD pipelines for AI solutions using Azure DevOps or GitHub Actions with deployment slots for zero-downtime updates"
          ]
        },
        "unitDrafts": [
          {
            "id": "introduction",
            "title": "Introduction",
            "type": "introduction",
            "narrativeMd": "Your retail company just launched a customer-facing web portal that provides personalized product recommendations using Azure OpenAI Service. During the first week, traffic exceeded expectations by 300%, causing intermittent slowdowns and timeout errors. Your operations team scrambled to scale infrastructure manually, while your security team flagged API keys stored in configuration files as a compliance risk. As the cloud engineer responsible for production AI workloads, you need a hosting platform that scales automatically, integrates securely with Azure AI services, and provides visibility into performance and costs.\n\nAzure App Service offers a fully managed platform that eliminates the infrastructure complexity of deploying AI applications. With built-in auto-scaling triggered by real-time metrics, your recommendation engine adapts to traffic spikes without manual intervention. Managed identity authentication replaces hardcoded API keys, satisfying your security team's zero-trust requirements. Application Insights automatically tracks AI service dependencies, token consumption, and response times, giving your operations team the telemetry needed to optimize costs and maintain SLA commitments. By the end of this module, you'll deploy a production-ready AI application that integrates Azure OpenAI Service and Azure AI Services using secure authentication patterns, with monitoring configured to surface performance bottlenecks and cost drivers.\n\n## Learning objectives\n\nBy the end of this module, you'll be able to:\n\n- Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n- Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n- Implement managed identity authentication to connect AI services without storing credentials\n- Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\n\n## Prerequisites\n\n- Familiarity with Azure fundamentals and the Azure portal\n- Basic understanding of RESTful APIs and web application architecture\n- Experience with at least one programming language (Python, C#, or JavaScript)\n- Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge",
            "learningObjectives": [
              "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
              "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
              "Implement managed identity authentication to connect AI services without storing credentials",
              "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
            ],
            "prerequisites": [
              "Familiarity with Azure fundamentals and the Azure portal",
              "Basic understanding of RESTful APIs and web application architecture",
              "Experience with at least one programming language (Python, C#, or JavaScript)",
              "Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge"
            ],
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [
              "High-level architecture diagram showing Azure App Service hosting a web application that integrates with Azure OpenAI Service for product recommendations and Azure AI Services for image analysis, with Application Insights monitoring the solution and users accessing through a web browser. Include visual indicators for managed identity authentication flow and auto-scaling triggers."
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": "Provide detailed alt text describing the architectural flow from end users through Azure App Service to AI services, emphasizing the monitoring layer and data flow for screen reader users.",
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [],
            "estimatedDurationMinutes": 5
          },
          {
            "id": "evaluate-app-service-ai-workloads",
            "title": "Evaluate Azure App Service deployment options for AI workloads",
            "type": "concept",
            "narrativeMd": "When you deploy an AI application that calls Azure OpenAI Service or Azure AI Services, the hosting platform becomes a critical performance and cost lever. Unlike traditional web applications that primarily serve static content or database queries, AI workloads generate variable compute loads driven by unpredictable request patterns—a product recommendation engine might handle 500 requests per hour during business hours, then spike to 5,000 requests during a flash sale. At the same time, each AI service call consumes tokens billed separately from your hosting infrastructure, creating a dual cost structure where both compute tier and AI usage contribute to your monthly bill. Azure App Service hosting plans determine how your application scales to meet these demands, how quickly it responds under load, and whether your operations team can meet SLA commitments without overpaying for idle capacity.\n\n## Hosting plan tiers and AI workload fit\n\nAzure App Service offers four primary hosting plan tiers, each designed for different operational scenarios. With Basic tier plans, you deploy applications suitable for development and testing environments where traffic remains predictable and low—typically under 1,000 requests per day. This tier supports manual scaling up to three instances, making it appropriate for validating your AI service integration before moving to production, but it lacks the auto-scaling capabilities required when request volumes fluctuate. Your development team can prototype a recommendation engine on Basic tier for approximately $55-$220 per month, then migrate configuration to a higher tier once performance testing reveals production requirements.\n\nStandard tier plans introduce auto-scaling triggered by CPU utilization, memory pressure, or HTTP queue length, scaling up to 10 instances based on rules you define. This becomes critical when your AI application experiences variable load—for example, a customer support chatbot that handles 2,000 requests per hour during business hours but drops to 200 requests overnight. With auto-scaling configured to add instances when CPU exceeds 70% for five minutes, your application maintains sub-2-second response times during peak traffic without manual intervention. Standard tier also provides deployment slots, allowing your team to test AI model updates in a staging environment before swapping to production, reducing the risk of deploying prompt changes that degrade recommendation quality. At $75-$300 per month, Standard tier suits production AI applications with moderate traffic that require consistent performance and minimal operational overhead.\n\nBuilding on Standard's capabilities, Premium tier plans support auto-scaling up to 30 instances and add VNet integration for private connectivity to AI services. This becomes especially important when your compliance team requires that all traffic between your application and Azure OpenAI Service traverse private networks rather than the public internet—common in financial services and healthcare scenarios. Premium tier also reduces the impact of noisy neighbors by providing dedicated compute resources, ensuring that other tenants' workloads don't affect your AI application's response times during high-volume periods. Organizations handling 50,000+ requests per day with sub-second response time requirements typically select Premium tier, accepting the $150-$600 monthly cost in exchange for predictable performance and advanced networking controls.\n\nFor enterprise AI solutions with strict compliance or data residency requirements, Isolated tier plans provide fully dedicated environments with auto-scaling up to 100 instances within a private App Service Environment. Your network team gains complete control over ingress and egress traffic, while your security team satisfies audit requirements mandating that AI workloads run in isolated infrastructure. This tier's $680+ monthly cost reflects the dedicated hardware and advanced DDoS protection, making it appropriate only when regulatory constraints or enterprise security policies prohibit multi-tenant hosting.\n\n## Performance requirements driven by AI service patterns\n\nUnlike traditional web applications where response time depends primarily on database query performance, AI applications experience latency determined by external service calls to Azure OpenAI or Azure AI Services. When your product recommendation engine calls Azure OpenAI's GPT-4 model to generate personalized suggestions, the API request typically completes in 800-2,000 milliseconds depending on prompt complexity and token count. With this latency profile in mind, your hosting plan must provide sufficient compute resources to handle concurrent requests without queueing—if your application receives 50 simultaneous requests during peak traffic and each instance can process 5 concurrent AI calls, you need at least 10 instances to avoid request timeouts. Standard tier's 10-instance limit becomes a bottleneck at this scale, signaling the need to evaluate Premium tier's 30-instance capacity.\n\nAuto-scaling configuration directly impacts your ability to meet SLA commitments during traffic spikes. Consider what happens when a marketing campaign drives a 400% increase in recommendation requests over a 15-minute window. With auto-scaling rules configured to add one instance when CPU exceeds 70% for five minutes, your application might take 8-10 minutes to fully scale out, leaving requests queued during the initial spike. Premium tier's faster scaling response and higher instance limits reduce this window, while careful tuning of scaling triggers—such as using HTTP queue length instead of CPU percentage—can further improve responsiveness. Your operations team should validate scaling behavior during load testing, ensuring that instance provisioning completes before request timeouts occur.\n\n## Cost optimization through right-sizing\n\nBecause AI applications generate costs in two dimensions—hosting compute charges and AI service token consumption—selecting the appropriate App Service tier requires analyzing both components. If your recommendation engine processes 100,000 requests per day and each request consumes an average of 500 tokens at $0.002 per 1,000 tokens for GPT-4, your monthly AI service cost reaches approximately $3,000. At the same time, a Standard tier S2 instance ($150/month) running at 60% average CPU utilization supports this load effectively. Upgrading to Premium P1v2 ($300/month) would double your hosting cost for minimal performance gain, reducing your overall cost efficiency.\n\nHowever, this calculation changes when request patterns exhibit significant variability. With auto-scaling enabled, you pay only for the instances running during each billing period—if your application scales from 2 instances during off-peak hours to 8 instances during peak traffic, you avoid paying for 8 instances continuously. Your finance team can track this pattern in Azure Cost Management, comparing hosting costs against AI service token consumption to identify optimization opportunities. For example, if Application Insights reveals that 30% of AI service calls result from redundant requests caused by aggressive client retry logic, your development team can implement caching or circuit breaker patterns to reduce both token costs and hosting load.\n\n## Decision criteria for tier selection\n\nWhen evaluating hosting plans for AI workloads, start by estimating your expected daily request volume and target response time. Applications handling under 10,000 requests per day with 3-5 second response time tolerance typically fit within Standard tier's scaling limits. As request volume approaches 50,000 per day or response time requirements tighten to sub-second latency, Premium tier's additional instances and faster scaling become necessary. At the same time, consider your compliance and security requirements—if your security team mandates private connectivity to AI services or your industry regulations require dedicated infrastructure, these constraints override pure performance calculations and drive you toward Premium or Isolated tiers.\n\nYour operations team should also evaluate the administrative overhead of each tier. Standard tier requires configuring auto-scaling rules and monitoring performance metrics, but generally operates without daily intervention once properly tuned. Premium and Isolated tiers add networking complexity through VNet integration and private endpoints, requiring coordination with your network team to configure DNS, subnets, and firewall rules. This operational cost—measured in engineering hours rather than Azure billing—can exceed the monetary difference between tiers for small teams managing multiple AI applications. With these trade-offs in mind, select the tier that balances performance, cost, compliance requirements, and your team's operational capacity, knowing you can scale up (or down) as your application's usage patterns evolve.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan Selection}\n    C -->|Development/Test| D[Basic Tier<br/>Manual scaling<br/>$55-220/mo]\n    C -->|Production| E[Standard Tier<br/>Auto-scale 10 instances<br/>Deployment slots<br/>$75-300/mo]\n    C -->|High-volume AI| F[Premium Tier<br/>Auto-scale 30 instances<br/>VNet integration<br/>$150-600/mo]\n    C -->|Enterprise/Compliance| G[Isolated Tier<br/>Dedicated environment<br/>Auto-scale 100 instances<br/>$680+/mo]\n    E --> H[Azure OpenAI Service]\n    F --> H\n    G --> H\n    E --> I[Auto-scaling Triggers]\n    I --> J[CPU Threshold]\n    I --> K[Memory Pressure]\n    I --> L[HTTP Queue Length]",
            "diagramCaption": "Azure App Service hosting plan decision flow for AI application deployment",
            "diagramAltText": "Decision tree diagram showing user requests flowing to Azure App Service, which branches into four hosting plan tiers: Basic for development and testing with manual scaling and monthly costs of $55-220; Standard for production workloads with auto-scaling up to 10 instances, deployment slots, and costs of $75-300; Premium for high-volume AI applications with auto-scaling up to 30 instances, VNet integration, and costs of $150-600; and Isolated for enterprise compliance scenarios with dedicated environments, auto-scaling up to 100 instances, and costs starting at $680. Standard, Premium, and Isolated tiers connect to Azure OpenAI Service. Auto-scaling triggers include CPU threshold, memory pressure, and HTTP queue length metrics.",
            "comparisonTable": {
              "headers": [
                "Hosting Plan",
                "AI Workload Fit",
                "Scaling Capability",
                "Key Features for AI Apps",
                "Typical Monthly Cost"
              ],
              "rows": [
                [
                  "Basic",
                  "Development, testing AI prototypes with low request volumes (under 1,000 requests/day)",
                  "Manual scale up to 3 instances",
                  "Custom domains, manual SSL; suitable for validating AI service integration before production",
                  "$55-$220"
                ],
                [
                  "Standard",
                  "Production AI applications with moderate traffic (1,000-50,000 requests/day, under 2-second response target)",
                  "Auto-scale up to 10 instances based on CPU, memory, or HTTP queue",
                  "Deployment slots for testing AI model updates; daily backups; supports 99.95% SLA",
                  "$75-$300"
                ],
                [
                  "Premium",
                  "High-volume AI services requiring consistent sub-second response times (50,000+ requests/day)",
                  "Auto-scale up to 30 instances with advanced metrics",
                  "VNet integration for private AI service endpoints; faster scaling response; dedicated compute reduces noisy neighbor risk",
                  "$150-$600"
                ],
                [
                  "Isolated",
                  "Enterprise AI solutions with strict compliance, data residency, or security requirements",
                  "Auto-scale up to 100 instances within dedicated environment",
                  "Fully isolated network; private environment; advanced DDoS protection; required for regulated industries deploying AI",
                  "$680+"
                ]
              ]
            },
            "comparisonTableCaption": "Comparison of Azure App Service hosting plans for AI application deployment scenarios",
            "images": [],
            "imageSuggestions": [
              "Screenshot of the Azure portal Create App Service Plan page with the Standard tier selected, highlighting the pricing tier dropdown, instance count slider, and estimated monthly cost calculator for a production AI workload"
            ],
            "videoSuggestions": [
              "2-minute video demonstrating how to evaluate expected AI service call volume, response time requirements, and budget constraints to choose between Standard and Premium tiers for a production recommendation engine"
            ],
            "interactiveSuggestions": [
              "Interactive calculator where learners input expected daily request volume, target response time, budget range, and compliance requirements to receive a recommended App Service tier with cost justification and scaling configuration"
            ],
            "visualAccessibilityNotes": "Ensure the decision tree diagram clearly describes each tier's characteristics and cost range. The comparison table should use proper table markup with headers to enable screen readers to navigate rows and columns effectively.",
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "App Service pricing",
                "url": "https://azure.microsoft.com/pricing/details/app-service/",
                "note": "Official pricing calculator for all hosting plan tiers"
              },
              {
                "title": "App Service auto-scale documentation",
                "url": "https://learn.microsoft.com/azure/app-service/manage-scale-up",
                "note": "Detailed guidance on configuring auto-scaling rules and metrics"
              }
            ],
            "estimatedDurationMinutes": 10
          },
          {
            "id": "configure-ai-service-integration",
            "title": "Configure secure integration with Azure AI services",
            "type": "concept",
            "narrativeMd": "Now that you understand how hosting plan selection affects your AI application's performance and cost, the next critical step involves configuring secure connectivity to Azure OpenAI Service and Azure AI Services. Unlike traditional backend databases that reside within your virtual network boundary, AI services expose REST APIs over HTTPS endpoints that your application calls remotely. This distributed architecture introduces credential management challenges—your application needs API keys or access tokens to authenticate each request, creating a security risk if those credentials leak through configuration files, source control commits, or application logs. At the same time, your compliance team requires audit trails showing who accessed AI services and when, while your operations team needs visibility into configuration drift across multiple environments.\n\n## Application settings for service endpoints\n\nAzure App Service provides application settings that inject configuration values as environment variables your code can access at runtime. When you create an application setting named `OPENAI_ENDPOINT` with value `https://your-openai-resource.openai.azure.com`, your Python, C#, or JavaScript code reads this value using standard environment variable methods, eliminating hardcoded URLs that differ between development, staging, and production environments. This pattern becomes especially valuable when your development team deploys the same application code to multiple App Service instances pointing to different Azure OpenAI deployments—changing the endpoint requires updating a single application setting rather than modifying and redeploying code.\n\nBuilding on this foundation, you face a critical decision about how to handle API keys required for AI service authentication. With application settings, you can store the Azure OpenAI API key directly as an environment variable, giving your code immediate access without additional configuration. However, this approach exposes the key in plaintext to anyone with Contributor access to your App Service resource in the Azure portal. Your security team typically flags this as a compliance risk, especially for production workloads handling customer data or regulated content. Consider what happens when a developer with legitimate App Service access takes a screenshot during troubleshooting—that image might inadvertently capture your API key, creating an exposure path your security team must investigate during audit reviews.\n\n## Key Vault references for secret protection\n\nAzure Key Vault addresses this credential exposure risk by providing centralized secret storage with detailed access logging and automatic rotation capabilities. Instead of storing your Azure OpenAI API key directly in application settings, you store it as a Key Vault secret, then configure an application setting with a special reference syntax: `@Microsoft.KeyVault(SecretUri=https://your-keyvault.vault.azure.net/secrets/openai-api-key/...)`. When your App Service starts, it automatically retrieves the secret value from Key Vault using its managed identity, injecting the decrypted key as an environment variable your application code can read. This becomes powerful when combined with Key Vault's access policies—your security team grants your App Service's managed identity `Get Secret` permissions, while denying individual developers direct access to production secrets, ensuring that only the running application can retrieve sensitive credentials.\n\nWith this approach, your operations team gains audit visibility through Key Vault's diagnostic logs, which record every secret access attempt including the identity, timestamp, and success status. When your compliance team asks who accessed the production Azure OpenAI API key during a specific date range, you query Key Vault logs rather than searching application logs or interviewing team members. At the same time, Key Vault's secret rotation capabilities allow your security team to update API keys on a scheduled basis—say, every 90 days—by updating the Key Vault secret value without modifying application settings or redeploying code. Your App Service automatically retrieves the new secret value on the next application restart, maintaining zero-downtime credential rotation.\n\n## Network security with private endpoints\n\nFor enterprise AI solutions with strict data residency or compliance requirements, securing the API endpoint itself becomes as important as protecting credentials. Azure Private Link enables you to expose Azure OpenAI Service and Azure AI Services through private IP addresses within your virtual network, ensuring that all traffic between your App Service and AI services traverses Microsoft's backbone network rather than the public internet. This becomes critical in regulated industries like healthcare or financial services, where compliance frameworks mandate that AI-generated content containing customer data never exits your controlled network boundary.\n\nConfiguring private endpoints requires VNet integration on your App Service, which is available only in Premium and Isolated hosting tiers. Your network team creates a subnet within your virtual network, then provisions a private endpoint for your Azure OpenAI resource pointing to that subnet. Once configured, your App Service resolves the Azure OpenAI FQDN (for example, `your-openai.openai.azure.com`) to a private IP address (for example, `10.1.2.4`) using Azure Private DNS zones. This setup eliminates public internet exposure of your AI services, satisfying your security team's zero-trust network requirements while introducing operational overhead—your network team must manage DNS configurations, subnet routing, and firewall rules that traditional public endpoint deployments avoid.\n\n## Choosing the right configuration method\n\nDeciding between application settings with plaintext keys, Key Vault references, and private endpoints depends on your specific security, compliance, and operational constraints. For development environments where speed matters more than security, storing API keys directly in application settings accelerates prototyping with minimal setup time—your development team can validate AI service integration in under five minutes. However, this convenience becomes a liability in production, where credential exposure risks and audit requirements demand Key Vault integration.\n\nWhen your application handles non-sensitive data and your compliance team accepts public endpoint access, Key Vault references provide the optimal balance between security and operational simplicity. Your security team gains centralized secret management and rotation, your operations team accesses detailed audit logs, and your development team works with familiar environment variable patterns. This configuration typically adds 15-20 minutes to initial setup but eliminates ongoing credential management overhead that manual rotation would require.\n\nFor regulated workloads or enterprise scenarios with strict network isolation requirements, private endpoints become mandatory despite their complexity. Your network team invests 45-60 minutes configuring VNets, subnets, and DNS zones, then maintains these resources alongside your application infrastructure. This operational cost—measured in both initial setup time and ongoing management—justifies itself only when compliance frameworks or security policies prohibit public internet access to AI services. With these trade-offs understood, you can select the configuration method that aligns with your security requirements, compliance obligations, and team capacity, knowing that Azure App Service supports migration paths as your needs evolve.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    participant AppInsights as Application Insights\n    \n    User->>AppService: HTTPS Request (product query)\n    AppService->>KeyVault: Retrieve OpenAI API Key<br/>(using Key Vault reference)\n    KeyVault-->>AppService: Return Secret Value\n    AppService->>OpenAI: Generate Recommendations<br/>(with API key)\n    OpenAI-->>AppService: AI Response (product list)\n    AppService->>AIServices: Analyze Product Images<br/>(with managed identity)\n    AIServices-->>AppService: Image Analysis Results\n    AppService->>AppInsights: Log Telemetry<br/>(latency, tokens used)\n    AppService-->>User: Combined Response<br/>(recommendations + images)\n    AppInsights->>AppInsights: Track AI Service Dependencies",
            "diagramCaption": "Secure integration sequence showing Azure App Service retrieving secrets from Key Vault and calling AI services with telemetry logging",
            "diagramAltText": "Sequence diagram illustrating a secure AI application request flow. A user sends an HTTPS request for product recommendations to Azure App Service. App Service retrieves the Azure OpenAI API key from Azure Key Vault using a Key Vault reference, then calls Azure OpenAI Service to generate product recommendations. Next, App Service uses managed identity to call Azure AI Services for image analysis. App Service logs telemetry including latency and token usage to Application Insights, then returns the combined AI-powered response to the user. Application Insights tracks all AI service dependencies throughout the flow.",
            "comparisonTable": {
              "headers": [
                "Configuration Method",
                "Security Level",
                "Use Case",
                "Operations Overhead",
                "Setup Time"
              ],
              "rows": [
                [
                  "Application Settings (plain text API keys)",
                  "Low - Secrets visible in portal; not recommended for production AI workloads",
                  "Quick prototyping or development environments only; acceptable risk for non-production data",
                  "Minimal - no secret rotation infrastructure needed",
                  "5 minutes"
                ],
                [
                  "Application Settings with Key Vault references",
                  "High - Secrets stored in Key Vault; access logged; supports automatic rotation",
                  "Production AI applications requiring secret management; compliance scenarios needing audit trails for API key access",
                  "Moderate - requires Key Vault setup and access policy configuration; security team owns rotation schedule",
                  "15-20 minutes"
                ],
                [
                  "Managed Identity (no secrets)",
                  "Highest - No secrets stored anywhere; Azure AD handles authentication; eliminates credential leakage risk",
                  "Production AI applications where supported (Azure OpenAI, Azure AI Services); preferred method for security-sensitive workloads",
                  "Low - no secret rotation; security team assigns RBAC roles; operations team monitors identity assignment drift",
                  "10 minutes"
                ],
                [
                  "Private Endpoints with VNet integration",
                  "Highest - Traffic never leaves Microsoft backbone; required for regulatory compliance (HIPAA, PCI-DSS)",
                  "Enterprise AI solutions with strict data residency or network isolation requirements; financial services, healthcare",
                  "High - network team configures VNets, subnets, DNS; ongoing monitoring of private link connectivity",
                  "45-60 minutes"
                ]
              ]
            },
            "comparisonTableCaption": "Comparison of secure configuration methods for integrating AI services with Azure App Service, including security level, use cases, and operational considerations",
            "images": [],
            "imageSuggestions": [
              "Screenshot of Azure App Service Configuration blade showing an application setting named OPENAI_API_KEY with a Key Vault reference value (@Microsoft.KeyVault(SecretUri=https://...)) and a green checkmark indicating successful secret retrieval",
              "Screenshot showing the Networking blade of an App Service with VNet Integration enabled and a private endpoint connection listed for Azure OpenAI Service with status 'Approved'"
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [
              "Interactive module presenting three AI application scenarios (development prototype, production SaaS app, healthcare patient portal) where learners select the appropriate configuration method and explain security or compliance justifications for their choice"
            ],
            "visualAccessibilityNotes": "Describe each step in the sequence diagram with emphasis on the security mechanisms: Key Vault reference retrieval, managed identity authentication, and telemetry logging. Ensure comparison table relationships between security level and use case are clear for assistive technology.",
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "Key Vault references in App Service",
                "url": "https://learn.microsoft.com/azure/app-service/app-service-key-vault-references",
                "note": "Detailed guide on configuring Key Vault references for secret management"
              },
              {
                "title": "Private endpoints for Azure OpenAI",
                "url": "https://learn.microsoft.com/azure/ai-services/openai/how-to/private-link",
                "note": "Step-by-step instructions for configuring private network access to AI services"
              }
            ],
            "estimatedDurationMinutes": 12
          },
          {
            "id": "implement-secure-authentication",
            "title": "Implement managed identity authentication for AI services",
            "type": "concept",
            "narrativeMd": "While Key Vault references eliminate plaintext credentials in application settings, they still require managing API keys—your security team must rotate secrets periodically, your operations team must monitor key expiration dates, and your development team must update Key Vault references when keys change. Managed identities offer a fundamentally different approach by removing secrets entirely from the authentication equation. Instead of your application proving its identity with a password-like API key, Azure Active Directory issues short-lived access tokens automatically based on the application's assigned identity, creating a zero-credential authentication model that satisfies the most stringent security requirements.\n\n## Understanding managed identity types\n\nAzure App Service supports two managed identity types: system-assigned and user-assigned. When you enable a system-assigned managed identity, Azure creates an identity resource tied exclusively to your App Service instance—this identity exists only as long as the App Service exists, and deleting the App Service automatically removes the identity. This one-to-one lifecycle coupling simplifies identity management for single-application scenarios where your recommendation engine has dedicated Azure OpenAI and Azure AI Services resources. Your development team enables system-assigned identity during App Service creation, then your security team grants that identity the necessary RBAC roles, establishing authentication without ever handling credentials.\n\nUser-assigned managed identities, by contrast, exist as independent Azure resources that outlive any single App Service instance. Consider what happens when you operate ten microservices that all need access to the same shared Azure OpenAI deployment—creating ten system-assigned identities would require your security team to assign RBAC roles ten times, once per identity. With a user-assigned identity, you create one identity resource, grant it the required permissions once, then assign that same identity to all ten App Services. This approach reduces administrative overhead significantly in multi-application environments, while giving your security team centralized visibility into which identity accesses which AI services.\n\n## Assigning RBAC roles for AI service access\n\nOnce your App Service has a managed identity—whether system-assigned or user-assigned—that identity needs permissions to call Azure OpenAI Service and Azure AI Services. Azure role-based access control (RBAC) governs these permissions through built-in roles designed for AI service scenarios. The **Cognitive Services OpenAI User** role grants permissions to submit inference requests to Azure OpenAI deployments, read model information, and list available models, but denies management operations like creating new deployments or modifying rate limits. This least-privilege approach ensures your application can generate AI-powered recommendations without gaining administrative control over the OpenAI resource itself.\n\nSimilarly, the **Cognitive Services User** role provides read and inference permissions for Azure AI Services resources like Computer Vision, Speech, or Language services. When your product recommendation engine needs to analyze product images using Azure AI Vision, you assign the Cognitive Services User role to your App Service's managed identity at the scope of the AI Vision resource. Your security team validates these assignments through the Azure portal's Access Control (IAM) blade, verifying that each identity has only the permissions required for its job function and no more.\n\nWith these role assignments in place, your application authenticates to AI services without retrieving secrets from Key Vault or reading API keys from environment variables. Instead, your code uses Azure SDK libraries that automatically request access tokens from Azure Active Directory using the App Service's managed identity. For example, Python code using the `azure-identity` library calls `DefaultAzureCredential()`, which detects the managed identity environment and obtains tokens transparently. This becomes especially powerful during credential rotation—because no secrets exist to rotate, your security team eliminates the operational overhead of scheduled key updates while maintaining continuous audit trails through Azure AD sign-in logs.\n\n## When to use each identity type\n\nChoosing between system-assigned and user-assigned identities depends on your application architecture and operational model. System-assigned identities suit scenarios where your App Service has a one-to-one relationship with AI service resources—for instance, a dedicated recommendation engine that calls only its own Azure OpenAI deployment and no other services. This approach minimizes identity sprawl, reducing the total number of identities your security team must audit. At the same time, deleting the App Service automatically cleans up the identity, preventing orphaned identities that consume management overhead without serving active applications.\n\nUser-assigned identities become valuable when multiple applications share AI service resources or when you need identity persistence across App Service lifecycle events. In microservices architectures where five different services call the same Azure OpenAI deployment, assigning a single user-assigned identity to all five App Services reduces RBAC management from five separate role assignments to one. This centralization also simplifies security reviews—your compliance team can audit a single identity's permissions rather than tracking permissions across five system-assigned identities. However, this sharing introduces coordination requirements: your security team must carefully document which applications use each user-assigned identity, and your operations team must validate that deleting one App Service doesn't inadvertently remove identity assignments needed by other running applications.\n\n## Updating application code for managed identity\n\nTransitioning from API key authentication to managed identity requires minimal code changes when using Azure SDK libraries. Traditional code reads an API key from environment variables, then passes that key explicitly when constructing AI service clients. With managed identity, you replace the explicit key with a credential object that handles token acquisition automatically. For Azure OpenAI Service, this means replacing `AzureOpenAI(api_key=os.environ['OPENAI_API_KEY'])` with `AzureOpenAI(azure_ad_token_provider=get_bearer_token_provider(DefaultAzureCredential(), 'https://cognitiveservices.azure.com/.default'))` in Python, or equivalent patterns in C# and JavaScript.\n\nThis code pattern works identically across development, staging, and production environments because `DefaultAzureCredential` automatically detects the available authentication method—using your personal Azure CLI credentials during local development, then switching to managed identity when running in App Service. Your development team benefits from this consistency, writing authentication code once that works everywhere without environment-specific conditionals. At the same time, your security team gains confidence that production deployments never rely on developer credentials or hardcoded keys, even temporarily.\n\n## Security and operations team responsibilities\n\nManaged identity authentication shifts security and operations team workflows from credential lifecycle management to identity and access governance. Your security team's primary responsibility becomes reviewing and approving RBAC role assignments—when a new AI application requests access to Azure OpenAI Service, your team validates the business justification, assigns the minimum necessary role (typically Cognitive Services OpenAI User), and documents the assignment in your identity governance system. This review happens once during initial deployment rather than continuously during the application's lifetime, reducing operational toil while maintaining security rigor.\n\nYour operations team monitors managed identity health through Azure AD sign-in logs and App Service diagnostic logs. When Application Insights shows authentication errors calling Azure OpenAI Service, your team checks whether the managed identity still has the required role assignment—configuration drift from accidental permission removal or resource moves can break authentication even when code remains unchanged. With proper monitoring in place, these issues surface through alerts rather than user-reported failures, maintaining SLA commitments while your team investigates root causes. By eliminating secret rotation windows and credential expiration dates, managed identity authentication reduces the number of planned maintenance events your operations team must coordinate, freeing capacity for proactive optimization work.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": "graph TB\n    subgraph App Service Environment\n        A[Azure App Service<br/>Product Recommendation App]\n        A1[System-assigned Identity<br/>Lifecycle tied to App Service]\n        A2[User-assigned Identity<br/>Shared across resources]\n        A -->|Enables| A1\n        A -->|Assigns| A2\n    end\n    \n    subgraph Azure Active Directory\n        B[Azure AD Identity Management]\n        A1 -->|Registers with| B\n        A2 -->|Registers with| B\n    end\n    \n    subgraph AI Services\n        C[Azure OpenAI Service]\n        D[Azure AI Vision]\n        E[Azure Key Vault]\n    end\n    \n    subgraph RBAC Assignments\n        F[Cognitive Services OpenAI User]\n        G[Cognitive Services User]\n        H[Key Vault Secrets User]\n    end\n    \n    B -->|RBAC Role Assignment| F\n    B -->|RBAC Role Assignment| G\n    B -->|RBAC Role Assignment| H\n    F -->|Grants Access to| C\n    G -->|Grants Access to| D\n    H -->|Grants Access to| E\n    \n    A -->|Authenticates to| C\n    A -->|Authenticates to| D\n    A -->|Authenticates to| E",
            "diagramCaption": "Managed identity authentication architecture showing Azure App Service using system-assigned or user-assigned identities with RBAC role assignments to access AI services without storing credentials",
            "diagramAltText": "Architecture diagram showing Azure App Service with both system-assigned and user-assigned managed identities. System-assigned identity lifecycle is tied to the App Service resource, while user-assigned identity can be shared across multiple resources. Both identity types register with Azure Active Directory. Azure AD grants RBAC role assignments: Cognitive Services OpenAI User for Azure OpenAI Service access, Cognitive Services User for Azure AI Vision access, and Key Vault Secrets User for Azure Key Vault access. The diagram emphasizes that App Service authenticates to all three services using managed identity, eliminating the need to store API keys or connection strings in application code or configuration.",
            "comparisonTable": {
              "headers": [
                "Managed Identity Type",
                "Lifecycle",
                "Resource Sharing",
                "Best Use Case",
                "Team Responsibility"
              ],
              "rows": [
                [
                  "System-assigned",
                  "Created and deleted with the App Service resource; cannot exist independently",
                  "No - unique to one App Service instance; creates 1:1 relationship between identity and resource",
                  "Single AI application with dedicated resources; simplifies identity management when App Service and AI services have matching lifecycles",
                  "Development team enables during App Service creation; security team assigns RBAC roles; operations team monitors in resource activity logs"
                ],
                [
                  "User-assigned",
                  "Independent managed resource; persists after App Service deletion; can be pre-created and reused",
                  "Yes - same identity can authenticate multiple App Services, Azure Functions, or VMs to shared AI services",
                  "Multi-application environment sharing Azure OpenAI deployment; microservices architecture where multiple services need identical AI service permissions; simplifies RBAC when 10+ apps use the same backend",
                  "Security team creates and manages identity lifecycle; development team assigns to App Services; operations team audits which resources use each identity"
                ]
              ]
            },
            "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication, including lifecycle, sharing capabilities, and operational responsibilities",
            "images": [],
            "imageSuggestions": [
              "Screenshot of Azure App Service Identity blade with System assigned tab selected, showing the Status toggle set to On with a green indicator and the Object (principal) ID displayed below",
              "Screenshot of Azure OpenAI Service Access Control (IAM) blade showing the Add role assignment wizard with Cognitive Services OpenAI User role selected and a managed identity listed in the Members section with a checkmark",
              "Code snippet showing Python code using Azure Identity library's DefaultAzureCredential to authenticate to Azure OpenAI Service without hardcoded keys, with comments explaining how it automatically tries managed identity authentication first"
            ],
            "videoSuggestions": [
              "4-minute walkthrough demonstrating how to enable system-assigned managed identity in the Azure portal, navigate to Azure OpenAI Service IAM, assign the Cognitive Services OpenAI User role, and update Python application code to use DefaultAzureCredential instead of API keys"
            ],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": "Clearly describe the flow from App Service through Azure AD to each AI service, emphasizing RBAC role names and their specific permissions. Ensure the architecture diagram conveys the elimination of stored credentials and the automated authentication process for screen reader users.",
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "Managed identities for App Service",
                "url": "https://learn.microsoft.com/azure/app-service/overview-managed-identity",
                "note": "Comprehensive guide on enabling and using managed identities in Azure App Service"
              },
              {
                "title": "Azure OpenAI authentication with managed identity",
                "url": "https://learn.microsoft.com/azure/ai-services/openai/how-to/managed-identity",
                "note": "Step-by-step instructions for configuring managed identity authentication to Azure OpenAI Service"
              }
            ],
            "estimatedDurationMinutes": 11
          },
          {
            "id": "exercise-deploy-ai-app",
            "title": "Exercise: Deploy and configure an AI-powered web application",
            "type": "exercise",
            "narrativeMd": "Your retail company needs to deploy a product recommendation engine to production. As the cloud engineer, you'll deploy an Azure App Service instance, configure it to integrate with Azure OpenAI Service using managed identity authentication, and validate that the application generates AI-powered recommendations successfully. This exercise demonstrates the end-to-end deployment workflow you'll use when moving AI applications from development to production environments.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [
              "Screenshot of the running product recommendation web application showing an input form where users can enter a product category, a Submit button, and a response section displaying AI-generated product recommendations from Azure OpenAI Service with product names, descriptions, and confidence scores",
              "Screenshot of the Application Insights Performance blade showing a transaction timeline with dependencies highlighted, specifically showing calls to Azure OpenAI Service with response times, success rates, and token usage metrics visible in the details pane",
              "Screenshot of the Azure OpenAI Service Access Control (IAM) blade with the Role assignments tab selected, filtering by the App Service's managed identity name, showing the Cognitive Services OpenAI User role assigned with a green checkmark indicating active permission"
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [
              "Interactive step-by-step checklist that learners complete as they progress through the exercise, including checkboxes for: App Service created with Standard tier, system-assigned managed identity enabled and Object ID copied, RBAC role assigned to Azure OpenAI, application settings configured with OpenAI endpoint, code deployed successfully, test request returns AI recommendations, Application Insights shows dependency calls, and all resources deleted during cleanup"
            ],
            "visualAccessibilityNotes": "Provide descriptive alt text for all screenshots showing the specific UI elements learners need to locate and interact with, including button labels, field names, and status indicators.",
            "codeSamples": [],
            "exercise": {
              "scenario": "You work as a cloud engineer for Contoso Retail. The company has developed a product recommendation engine that uses Azure OpenAI Service to generate personalized suggestions based on customer browsing history. Your task is to deploy this application to Azure App Service with Standard tier hosting, configure managed identity authentication to eliminate API key management, and validate that the production deployment successfully integrates with Azure OpenAI Service. The application code is available in a GitHub repository, and you need to ensure the deployment follows security best practices by avoiding hardcoded credentials.",
              "prerequisites": [
                "Active Azure subscription with Contributor access to create resources",
                "Azure OpenAI Service resource already deployed with a GPT-4 model deployment named 'gpt-4'",
                "Basic familiarity with the Azure portal navigation",
                "Completion of previous concept units in this module"
              ],
              "jobSkills": [
                "Azure App Service deployment and configuration",
                "Managed identity authentication implementation",
                "RBAC role assignment for AI service access",
                "Application monitoring with Application Insights"
              ],
              "estimatedMinutes": 15,
              "steps": [
                {
                  "action": "Sign in to the Azure portal at https://portal.azure.com and create a new resource group named rg-contoso-recommendations in the East US region to contain all exercise resources",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Resource group rg-contoso-recommendations appears in the resource groups list with status Active and location East US",
                  "screenshotDescription": "Azure portal showing the resource groups blade with rg-contoso-recommendations highlighted in the list"
                },
                {
                  "action": "Navigate to App Services and create a new web app named contoso-recommendations-[yourname] using the .NET 8 (LTS) runtime stack, Standard S1 pricing tier, and placing it in the rg-contoso-recommendations resource group",
                  "selector": null,
                  "value": null,
                  "expectedResult": "App Service deployment completes successfully with a unique URL displayed (for example, https://contoso-recommendations-yourname.azurewebsites.net) and status showing as Running in the overview page",
                  "screenshotDescription": null
                },
                {
                  "action": "Navigate to the Identity blade of your App Service, select the System assigned tab, and toggle Status to On to enable system-assigned managed identity, then save the configuration and copy the Object (principal) ID for later use",
                  "selector": null,
                  "value": null,
                  "expectedResult": "System assigned managed identity Status shows On with a green indicator, and an Object (principal) ID is displayed (for example, a 32-character GUID like 12345678-1234-1234-1234-123456789abc)",
                  "screenshotDescription": "App Service Identity blade showing system-assigned identity enabled with Object ID visible"
                },
                {
                  "action": "Navigate to your existing Azure OpenAI Service resource, open the Access Control (IAM) blade, select Add role assignment, choose the Cognitive Services OpenAI User role, and assign it to the managed identity you just created by searching for your App Service name in the Members section",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Role assignment completes successfully with a notification confirming that Cognitive Services OpenAI User role was assigned to your App Service's managed identity, visible in the Role assignments tab filtered by your managed identity",
                  "screenshotDescription": "Azure OpenAI Service IAM blade showing the new role assignment with your App Service's managed identity listed as a member of Cognitive Services OpenAI User role"
                },
                {
                  "action": "Return to your App Service, navigate to Configuration under Settings, add a new application setting named OPENAI_ENDPOINT with value https://[your-openai-resource-name].openai.azure.com (replace with your actual Azure OpenAI resource name), then save the configuration",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Application setting OPENAI_ENDPOINT appears in the configuration list with the correct endpoint URL, and the App Service automatically restarts to apply the new setting",
                  "screenshotDescription": null
                },
                {
                  "action": "Navigate to the Deployment Center blade, select GitHub as the source, authenticate with your GitHub account if prompted, choose the repository contoso-samples/product-recommendation-engine (fictional example), select the main branch, and save to enable continuous deployment",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Deployment workflow runs automatically and completes with success status, showing the latest commit deployed and application logs confirming successful startup",
                  "screenshotDescription": "Deployment Center showing GitHub source connected with successful deployment status and commit details"
                },
                {
                  "action": "Navigate to your App Service URL (https://contoso-recommendations-yourname.azurewebsites.net), enter 'outdoor gear' in the product category input field, and select Submit to test the recommendation engine",
                  "selector": null,
                  "value": null,
                  "expectedResult": "The page displays AI-generated product recommendations including items like 'Hiking Backpack', 'Trail Running Shoes', and 'Portable Water Filter' with descriptions and confidence scores, confirming successful integration with Azure OpenAI Service using managed identity authentication",
                  "screenshotDescription": "Web application interface showing the recommendation results with multiple product suggestions displayed"
                },
                {
                  "action": "Navigate to Application Insights linked to your App Service, open the Performance blade, view the transaction timeline, and verify that calls to Azure OpenAI Service appear as dependencies with response times and success rates",
                  "selector": null,
                  "value": null,
                  "expectedResult": "Application Insights Performance view shows Azure OpenAI Service listed in the dependencies section with average response time under 2 seconds, 100% success rate, and token usage metrics visible in the details pane",
                  "screenshotDescription": "Application Insights Performance blade showing OpenAI Service dependency metrics with response times and success indicators"
                }
              ],
              "successCriteria": [
                "App Service deployed with Standard S1 tier and status Running",
                "System-assigned managed identity enabled with Object ID visible",
                "Cognitive Services OpenAI User role assigned to the managed identity",
                "Application setting OPENAI_ENDPOINT configured correctly",
                "Web application returns AI-generated recommendations without authentication errors",
                "Application Insights tracks Azure OpenAI Service calls as dependencies"
              ],
              "cleanup": [
                "Navigate to the resource groups blade in the Azure portal and select rg-contoso-recommendations",
                "Select Delete resource group, type the resource group name to confirm, and select Delete to remove all exercise resources including App Service, Application Insights, and role assignments",
                "Verify in the Notifications pane that resource group deletion completed successfully to avoid ongoing charges"
              ],
              "commonIssues": [
                {
                  "issue": "App Service name already exists error during creation",
                  "solution": "Append a unique suffix like your initials and today's date to the app name (for example, contoso-recommendations-jd0115) since App Service names must be globally unique across Azure"
                },
                {
                  "issue": "Recommendation request returns 403 Forbidden error",
                  "solution": "Verify that the RBAC role assignment completed successfully by checking the Azure OpenAI Service IAM blade—role propagation can take 2-5 minutes, so wait briefly then retry the request"
                },
                {
                  "issue": "Application Insights doesn't show OpenAI dependencies",
                  "solution": "Ensure the Application Insights connection string is configured in App Service application settings and that you've made at least one recommendation request after deployment—telemetry can take 2-3 minutes to appear in queries"
                }
              ]
            },
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "Deploy code to App Service",
                "url": "https://learn.microsoft.com/azure/app-service/deploy-github-actions",
                "note": "Detailed guide on configuring GitHub Actions deployment for App Service"
              }
            ],
            "estimatedDurationMinutes": 15
          },
          {
            "id": "knowledge-check",
            "title": "Knowledge check",
            "type": "knowledge-check",
            "narrativeMd": "Test your understanding of deploying and managing AI applications on Azure App Service by applying the concepts you learned to realistic scenarios. Each question presents a situation you might encounter when configuring hosting plans, securing AI service integration, or troubleshooting production deployments.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": null,
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": {
              "narrativeMd": "Test your understanding of deploying and managing AI applications on Azure App Service by applying the concepts you learned to realistic scenarios. Each question presents a situation you might encounter when configuring hosting plans, securing AI service integration, or troubleshooting production deployments.",
              "questions": [
                {
                  "questionText": "Your company deploys a customer support chatbot that uses Azure OpenAI Service to generate responses. During business hours (8 AM - 6 PM), the application receives an average of 25,000 requests per day with spikes to 40,000 requests during product launches. Your target response time is under 2 seconds, and your compliance team requires all traffic between the chatbot and Azure OpenAI to remain within your corporate network. Which Azure App Service hosting plan best meets these requirements?",
                  "options": [
                    "Standard S2 tier with auto-scaling enabled up to 10 instances based on CPU threshold of 70%",
                    "Premium P1v2 tier with VNet integration and auto-scaling enabled up to 20 instances based on HTTP queue length",
                    "Basic B2 tier with manual scaling to 3 instances and scheduled scale-up during business hours"
                  ],
                  "correctIndex": 1,
                  "rationale": "Premium P1v2 tier is correct because it provides VNet integration required to keep traffic on the corporate network (satisfying the compliance requirement), supports auto-scaling up to 30 instances (sufficient for the 40,000 request spike), and offers the performance needed for sub-2-second response times. Standard tier (option 1) lacks VNet integration for private network connectivity, failing the compliance requirement. Basic tier (option 3) doesn't support auto-scaling and would require manual intervention during traffic spikes, making it unsuitable for production workloads with variable demand."
                },
                {
                  "questionText": "You're deploying a product recommendation engine to Azure App Service that integrates with Azure OpenAI Service. Your security team prohibits storing API keys in application configuration and requires detailed audit logs of all credential access attempts. Your operations team wants to minimize credential rotation overhead. Which authentication approach best addresses these requirements?",
                  "options": [
                    "Store the Azure OpenAI API key in Azure Key Vault and use a Key Vault reference in App Service application settings",
                    "Enable system-assigned managed identity for the App Service and assign the Cognitive Services OpenAI User role to the identity",
                    "Store the Azure OpenAI API key directly in App Service application settings encrypted at rest"
                  ],
                  "correctIndex": 1,
                  "rationale": "System-assigned managed identity (option 2) is correct because it completely eliminates API keys (satisfying the security team's prohibition), provides audit logging through Azure AD sign-in logs (meeting the audit requirement), and requires no credential rotation (minimizing operations overhead). Key Vault reference (option 1) improves security over plaintext keys but still requires managing and rotating API keys, creating ongoing operations work. Storing encrypted keys in application settings (option 3) violates the security team's policy against storing keys in configuration and provides no audit logging of access attempts."
                },
                {
                  "questionText": "Your AI application deployed to Azure App Service successfully integrates with Azure OpenAI Service in your development environment, but after deploying to production, all recommendation requests return HTTP 500 errors. Application Insights logs show 'Failed to acquire token' errors when calling Azure OpenAI. The production App Service uses a system-assigned managed identity, and you verified the OPENAI_ENDPOINT application setting is configured correctly. What is the most likely cause and solution?",
                  "options": [
                    "The managed identity lacks the required RBAC role assignment; assign the Cognitive Services OpenAI User role to the App Service's managed identity at the Azure OpenAI resource scope",
                    "The Azure OpenAI endpoint URL is incorrect; update the OPENAI_ENDPOINT application setting to use the private endpoint address instead of the public FQDN",
                    "Application Insights is blocking the OpenAI API calls; disable Application Insights monitoring temporarily to isolate the authentication issue"
                  ],
                  "correctIndex": 0,
                  "rationale": "Missing RBAC role assignment (option 1) is correct because 'Failed to acquire token' specifically indicates the managed identity exists but lacks permissions to access Azure OpenAI Service—assigning Cognitive Services OpenAI User role resolves the authentication failure. Incorrect endpoint URL (option 2) would produce connection errors or DNS resolution failures, not token acquisition errors, and the question states the endpoint setting was verified. Disabling Application Insights (option 3) would eliminate visibility into the problem without addressing the root cause, and Application Insights doesn't block API calls—it only observes them."
                }
              ]
            },
            "resources": [],
            "estimatedDurationMinutes": 3
          },
          {
            "id": "summary",
            "title": "Summary",
            "type": "summary",
            "narrativeMd": "You successfully deployed Contoso Retail's product recommendation engine to Azure App Service, eliminating the manual scaling and security challenges that plagued the initial launch. By selecting Standard tier hosting with auto-scaling triggered by HTTP queue length, you ensured the application automatically adapts to traffic spikes without manual intervention from your operations team. Implementing managed identity authentication removed API key management overhead, satisfying your security team's zero-trust requirements while eliminating credential rotation tasks. Application Insights now provides visibility into Azure OpenAI Service call patterns, token consumption, and response times, giving your team the data needed to optimize both performance and costs.\n\n## Key takeaways\n\nThroughout this module, you learned job-critical skills for deploying production AI applications:\n\n- **Hosting plan selection**: Evaluate expected request volume, response time requirements, and compliance constraints to choose between Basic (development/testing), Standard (production with moderate traffic), Premium (high-volume with private networking), or Isolated (enterprise compliance) tiers, balancing performance against monthly costs that range from $55 to $680+.\n- **Secure AI service integration**: Configure Azure App Service to integrate Azure OpenAI Service and Azure AI Services using Key Vault references for secret protection or managed identity for zero-credential authentication, selecting the approach that aligns with your security policies and operational capacity.\n- **Managed identity authentication**: Enable system-assigned or user-assigned managed identities and assign Cognitive Services OpenAI User or Cognitive Services User RBAC roles to grant least-privilege access to AI services, eliminating API key storage and rotation requirements.\n- **Production monitoring**: Use Application Insights to track AI service dependencies, response times, success rates, and token consumption, providing your operations team with telemetry to diagnose performance issues and your finance team with data to optimize AI service costs.\n\nThese skills enable you to deploy AI applications that scale automatically, authenticate securely, and provide operational visibility—core requirements for maintaining SLA commitments while controlling costs in production environments.\n\n## Next steps\n\nBuild on your Azure App Service and AI integration knowledge with these recommended learning paths:\n\n- **Scale applications in Azure App Service**: Learn advanced auto-scaling strategies including custom metrics, scheduled scaling, and performance optimization techniques for high-traffic AI workloads.\n- **Implement Azure Container Apps for AI workloads**: Explore containerized deployment options for AI applications requiring microservices architecture or event-driven scaling patterns.\n- **Build CI/CD pipelines for AI applications with Azure DevOps**: Automate deployment workflows including model versioning, staged rollouts, and automated testing for AI-powered applications.\n- **Optimize costs for Azure AI services**: Discover cost management techniques including reserved capacity, commitment tiers, and usage analytics to reduce Azure OpenAI and Azure AI Services spending.",
            "learningObjectives": [],
            "prerequisites": [],
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": null,
            "codeSamples": [],
            "exercise": null,
            "knowledgeCheck": null,
            "resources": [
              {
                "title": "Azure App Service documentation",
                "url": "https://learn.microsoft.com/azure/app-service/",
                "note": "Comprehensive reference for App Service features, configuration, and best practices"
              },
              {
                "title": "Azure OpenAI Service documentation",
                "url": "https://learn.microsoft.com/azure/ai-services/openai/",
                "note": "Official documentation for deploying and using Azure OpenAI Service"
              },
              {
                "title": "Application Insights for App Service",
                "url": "https://learn.microsoft.com/azure/azure-monitor/app/azure-web-apps",
                "note": "Guide to configuring and using Application Insights monitoring for App Service applications"
              }
            ],
            "estimatedDurationMinutes": 2
          }
        ],
        "labReport": {
          "testRunId": "lab-1761842949638",
          "overallStatus": "Passed",
          "exerciseResults": [],
          "recommendations": []
        },
        "metadata": {
          "seo": {
            "title": "Deploy AI solutions with Azure App Service - Training | Microsoft Learn",
            "description": "Deploy and scale AI applications on Azure App Service. Integrate Azure OpenAI, configure managed identity authentication, and monitor intelligent solutions.",
            "keywords": [
              "Azure App Service AI deployment",
              "Azure OpenAI integration",
              "managed identity authentication",
              "AI application monitoring",
              "intelligent app hosting"
            ],
            "longTailKeywords": [
              "How to deploy AI applications with Azure App Service",
              "How to integrate Azure OpenAI Service with App Service",
              "How to configure managed identity for Azure AI services",
              "How to monitor AI workloads in Azure App Service",
              "How to scale intelligent applications on Azure"
            ],
            "schemaMarkup": {
              "@context": "https://schema.org",
              "@type": "Course",
              "name": "Deploy AI solutions with Azure App Service",
              "description": "Learn to deploy and scale AI-powered applications using Azure App Service. Configure hosting environments, integrate Azure AI services, implement authentication, and monitor production workloads for intelligent solutions.",
              "provider": {
                "@type": "Organization",
                "name": "Microsoft Learn"
              },
              "educationalLevel": "Intermediate",
              "timeRequired": "PT58M",
              "inLanguage": "en-US",
              "coursePrerequisites": [
                "Azure fundamentals",
                "RESTful API knowledge",
                "Programming experience"
              ],
              "teaches": [
                "Azure App Service deployment",
                "AI service integration",
                "Managed identity authentication",
                "Application monitoring"
              ]
            }
          },
          "taxonomy": {
            "products": [
              "Azure App Service",
              "Azure OpenAI",
              "Azure AI Services",
              "Azure Container Registry",
              "Azure Monitor"
            ],
            "roles": [
              "ai-engineer",
              "developer",
              "solution-architect"
            ],
            "skills": [
              "artificial-intelligence",
              "cloud-computing",
              "application-development",
              "security-configuration"
            ],
            "subjects": [
              "artificial-intelligence",
              "cloud-computing",
              "web-development"
            ],
            "level": "intermediate"
          },
          "relationships": {
            "prerequisites": [
              {
                "title": "Introduction to Azure App Service",
                "type": "module",
                "url": "https://learn.microsoft.com/training/modules/introduction-to-azure-app-service/",
                "note": "Foundational knowledge of Azure App Service hosting"
              },
              {
                "title": "Azure fundamentals",
                "type": "learning-path",
                "url": "https://learn.microsoft.com/training/paths/azure-fundamentals/",
                "note": "Core Azure platform understanding"
              },
              {
                "title": "Introduction to Azure OpenAI Service",
                "type": "module",
                "url": "https://learn.microsoft.com/training/modules/explore-azure-openai/",
                "note": "Understanding Azure OpenAI capabilities and use cases"
              },
              {
                "title": "Secure Azure solutions with managed identities",
                "type": "module",
                "url": "https://learn.microsoft.com/training/modules/authenticate-apps-with-managed-identities/",
                "note": "Foundation for credential-free authentication"
              }
            ],
            "nextModules": [
              {
                "title": "Implement Azure Container Apps for AI workloads",
                "type": "module",
                "note": "Containerization and microservices architecture for AI"
              },
              {
                "title": "Build CI/CD pipelines for Azure App Service",
                "type": "module",
                "url": "https://learn.microsoft.com/training/modules/create-release-pipeline/",
                "note": "Automated deployment strategies with deployment slots"
              },
              {
                "title": "Optimize costs for Azure AI services",
                "type": "module",
                "note": "Cost management and optimization for production AI workloads"
              },
              {
                "title": "Implement advanced monitoring with Application Insights",
                "type": "module",
                "url": "https://learn.microsoft.com/training/modules/monitor-app-performance/",
                "note": "Deep dive into telemetry, alerting, and diagnostics"
              },
              {
                "title": "Design resilient AI applications on Azure",
                "type": "learning-path",
                "note": "High availability, disaster recovery, and fault tolerance patterns"
              }
            ],
            "certifications": [
              {
                "name": "Microsoft Certified: Azure AI Engineer Associate",
                "examCode": "AI-102",
                "url": "https://learn.microsoft.com/certifications/azure-ai-engineer/",
                "alignment": "Covers AI solution deployment, security, and monitoring - directly aligned with Azure OpenAI and AI Services integration",
                "skillsMeasured": [
                  "Implement and monitor AI solutions",
                  "Integrate AI services with applications",
                  "Secure AI solutions"
                ]
              },
              {
                "name": "Microsoft Certified: Azure Developer Associate",
                "examCode": "AZ-204",
                "url": "https://learn.microsoft.com/certifications/azure-developer/",
                "alignment": "Covers Azure App Service deployment, managed identity, and application monitoring",
                "skillsMeasured": [
                  "Develop Azure compute solutions",
                  "Implement Azure security",
                  "Monitor, troubleshoot, and optimize solutions"
                ]
              },
              {
                "name": "Microsoft Certified: Azure Solutions Architect Expert",
                "examCode": "AZ-305",
                "url": "https://learn.microsoft.com/certifications/azure-solutions-architect/",
                "alignment": "Architecture decisions for AI application hosting, scaling, and security",
                "skillsMeasured": [
                  "Design identity, governance, and monitoring solutions",
                  "Design data storage solutions",
                  "Design business continuity solutions"
                ]
              }
            ],
            "resources": [
              {
                "title": "Azure App Service documentation",
                "url": "https://learn.microsoft.com/azure/app-service/",
                "type": "official-docs",
                "note": "Comprehensive reference for App Service features and configuration"
              },
              {
                "title": "Azure OpenAI Service REST API reference",
                "url": "https://learn.microsoft.com/azure/ai-services/openai/reference",
                "type": "api-reference",
                "note": "API specifications for Azure OpenAI integration"
              },
              {
                "title": "Azure managed identities documentation",
                "url": "https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/",
                "type": "official-docs",
                "note": "Implementation patterns for managed identity authentication"
              },
              {
                "title": "Application Insights for web applications",
                "url": "https://learn.microsoft.com/azure/azure-monitor/app/app-insights-overview",
                "type": "official-docs",
                "note": "Monitoring and diagnostics configuration guidance"
              },
              {
                "title": "Azure Architecture Center: AI + Machine Learning",
                "url": "https://learn.microsoft.com/azure/architecture/browse/?products=ai-services",
                "type": "architecture-guidance",
                "note": "Reference architectures and best practices for AI solutions"
              },
              {
                "title": "Azure OpenAI Service quotas and limits",
                "url": "https://learn.microsoft.com/azure/ai-services/openai/quotas-limits",
                "type": "reference",
                "note": "Capacity planning and throttling considerations"
              }
            ]
          },
          "careerPathways": {
            "aiEngineer": {
              "description": "Progress from deploying AI applications to designing comprehensive AI solution architectures",
              "progression": [
                "Deploy AI applications on Azure App Service (this module)",
                "Implement RAG patterns with Azure AI Search",
                "Build multi-service AI orchestrations",
                "Design enterprise AI platforms",
                "Architect responsible AI governance frameworks"
              ],
              "certificationPath": "AI-102 → AZ-305 → Microsoft Certified: Azure AI Engineer Associate → Azure Solutions Architect Expert"
            },
            "developer": {
              "description": "Expand from web application deployment to full-stack intelligent application development",
              "progression": [
                "Deploy applications on Azure App Service (this module)",
                "Integrate AI capabilities into web apps",
                "Build serverless AI functions",
                "Implement microservices with AI",
                "Lead cloud-native AI development teams"
              ],
              "certificationPath": "AZ-204 → AZ-400 (DevOps) → Microsoft Certified: Azure Developer Associate → DevOps Engineer Expert"
            },
            "solutionArchitect": {
              "description": "Advance from tactical deployment decisions to strategic AI solution architecture",
              "progression": [
                "Evaluate hosting options for AI workloads (this module)",
                "Design secure AI integration patterns",
                "Architect multi-region AI solutions",
                "Lead enterprise AI transformation",
                "Define cloud AI strategy and governance"
              ],
              "certificationPath": "AZ-305 → SC-100 (Security) → Microsoft Certified: Azure Solutions Architect Expert → Cybersecurity Architect Expert"
            }
          },
          "industryApplications": [
            {
              "industry": "Retail",
              "useCase": "Product recommendation engines, intelligent chatbots for customer service, inventory optimization",
              "relevantSkills": "Azure OpenAI integration, real-time scaling, cost optimization"
            },
            {
              "industry": "Healthcare",
              "useCase": "Clinical decision support systems, patient communication automation, medical document analysis",
              "relevantSkills": "Managed identity security, HIPAA compliance, private endpoints"
            },
            {
              "industry": "Financial Services",
              "useCase": "Fraud detection APIs, automated document processing, customer insights platforms",
              "relevantSkills": "High-availability deployment, secure authentication, regulatory compliance monitoring"
            },
            {
              "industry": "Manufacturing",
              "useCase": "Predictive maintenance dashboards, quality control automation, supply chain optimization",
              "relevantSkills": "IoT data integration, batch processing, application performance monitoring"
            }
          ],
          "searchOptimization": {
            "primaryIntent": "Deploy AI applications on Azure",
            "secondaryIntents": [
              "Integrate Azure OpenAI with web apps",
              "Secure AI service authentication",
              "Monitor production AI workloads",
              "Scale intelligent applications"
            ],
            "competitorTerms": [
              "AWS Bedrock deployment",
              "Google Cloud AI Platform hosting",
              "Heroku AI app deployment"
            ],
            "microsoftAdvantages": [
              "Native Azure OpenAI integration",
              "Managed identity eliminates credential management",
              "Integrated Application Insights monitoring",
              "Seamless scaling with auto-scale rules"
            ]
          }
        }
      },
      "feedback": [
        "Quality checks completed"
      ],
      "attempts": 1,
      "durationMs": 89344.8372999999
    }
  ],
  "stageMetrics": [
    {
      "stage": "Research",
      "startTime": 1761842322731,
      "endTime": 1761842357474,
      "duration": 34743,
      "retryCount": 0,
      "validationTime": 14,
      "success": true
    },
    {
      "stage": "LearningPathDesign",
      "startTime": 1761842357483,
      "endTime": 1761842448029,
      "duration": 90546,
      "retryCount": 0,
      "validationTime": 1,
      "success": true
    },
    {
      "stage": "Scenarios",
      "startTime": 1761842448042,
      "endTime": 1761842464541,
      "duration": 16499,
      "retryCount": 0,
      "validationTime": 0,
      "success": true
    },
    {
      "stage": "ContentGeneration",
      "startTime": 1761842464551,
      "endTime": 1761842904485,
      "duration": 439934,
      "retryCount": 0,
      "validationTime": 2,
      "success": true
    }
  ],
  "finalLearningPath": {
    "id": "deploy-ai-solutions-azure-app-service",
    "title": "Deploy AI solutions with Azure App Service",
    "level": "intermediate",
    "roles": [
      "ai-engineer",
      "azure-developer",
      "solutions-architect"
    ],
    "products": [
      "Azure App Service",
      "Azure OpenAI Service",
      "Azure AI Services",
      "Azure Container Registry",
      "Azure Application Insights"
    ],
    "subjects": [
      "artificial-intelligence",
      "cloud-computing",
      "web-development"
    ],
    "prerequisites": [
      "Familiarity with Azure fundamentals and the Azure portal",
      "Basic understanding of RESTful APIs and web application architecture",
      "Experience with at least one programming language (Python, C#, or JavaScript)",
      "Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge"
    ],
    "summary": "Learn to deploy and scale AI-powered applications using Azure App Service. Configure hosting environments, integrate Azure AI services, implement authentication, and monitor production workloads for intelligent solutions.",
    "modules": [
      {
        "id": "deploy-ai-solutions-azure-app-service-module",
        "title": "Deploy and manage AI applications on Azure App Service",
        "description": "Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.",
        "learningObjectives": [
          "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
          "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
          "Implement managed identity authentication to connect AI services without storing credentials",
          "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
        ],
        "estimatedDurationMinutes": 58,
        "yml": "### YamlMime:Module\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module\nmetadata:\n  title: Deploy and manage AI applications on Azure App Service\n  description: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads. Learn to evaluate deployment options, configure secure service integration, implement managed identity authentication, and monitor AI application performance and costs.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.service: azure-app-service\n  ms.topic: module-standard-task-based\ntitle: Deploy and manage AI applications on Azure App Service\nsummary: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.\nabstract: |\n  - Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n  - Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n  - Implement managed identity authentication to connect AI services without storing credentials\n  - Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\nprerequisites: |\n  - Familiarity with Azure fundamentals and the Azure portal\n  - Basic understanding of RESTful APIs and web application architecture\n  - Experience with at least one programming language (Python, C#, or JavaScript)\n  - Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge\niconUrl: /training/achievements/deploy-ai-solutions-azure-app-service.svg\nlevels:\n  - intermediate\nroles:\n  - ai-engineer\n  - azure-developer\n  - solutions-architect\nproducts:\n  - azure-app-service\n  - azure-openai\n  - azure-ai-services\n  - azure-container-registry\n  - azure-monitor\nsubjects:\n  - artificial-intelligence\n  - cloud-computing\n  - web-development\nunits:\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\nbadge:\n  uid: learn.wwl.deploy-ai-solutions-azure-app-service-module.badge",
        "units": [
          {
            "id": "introduction",
            "title": "Introduction",
            "type": "introduction",
            "description": "Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.",
            "estimatedDurationMinutes": 5,
            "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\ntitle: Introduction\nmetadata:\n  title: Introduction\n  description: Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 5\ncontent: |\n  [!include[](includes/1-introduction.md)]",
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [
              {
                "title": "AI-powered web application architecture",
                "description": "Diagram showing Azure App Service hosting a web app that calls Azure OpenAI Service and Azure AI Services, with Application Insights monitoring the entire solution"
              }
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": "Include detailed alt text describing the flow from user request through App Service to AI services and monitoring, ensuring screen reader users understand the architectural components and data flow."
          },
          {
            "id": "evaluate-app-service-ai-workloads",
            "title": "Evaluate Azure App Service deployment options for AI workloads",
            "type": "concept",
            "description": "Explanation of Azure App Service hosting plans (Free, Shared, Basic, Standard, Premium, Isolated) with guidance on selecting appropriate tiers for AI applications based on performance, scalability, and cost requirements. Covers deployment slots, scaling options, and considerations for compute-intensive AI workloads.",
            "estimatedDurationMinutes": 10,
            "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\ntitle: Evaluate Azure App Service deployment options for AI workloads\nmetadata:\n  title: Evaluate Azure App Service deployment options for AI workloads\n  description: Explanation of Azure App Service hosting plans with guidance on selecting appropriate tiers for AI applications based on performance, scalability, and cost requirements. Covers deployment slots, scaling options, and considerations for compute-intensive AI workloads.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 10\ncontent: |\n  [!include[](includes/2-evaluate-app-service-ai-workloads.md)]",
            "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan}\n    C -->|Development| D[Basic Tier]\n    C -->|Production| E[Standard/Premium Tier]\n    C -->|Enterprise| F[Isolated Tier]\n    E --> G[Auto-scaling]\n    E --> H[Deployment Slots]\n    B --> I[Azure OpenAI Service]\n    B --> J[Azure AI Services]\n    G --> K[Scale based on CPU/Memory]\n    G --> L[Scale based on HTTP Queue]",
            "diagramCaption": "Azure App Service hosting plan decision tree for AI workloads",
            "diagramAltText": "Flowchart showing user requests flowing to Azure App Service, which branches into three hosting plan options: Basic tier for development, Standard/Premium tier for production with auto-scaling and deployment slots, and Isolated tier for enterprise workloads. The diagram also shows App Service connecting to Azure OpenAI Service and Azure AI Services, with auto-scaling triggered by CPU, memory, or HTTP queue metrics.",
            "comparisonTable": {
              "headers": [
                "Hosting Plan",
                "AI Workload Fit",
                "Scaling",
                "Key Features",
                "Typical Monthly Cost"
              ],
              "rows": [
                [
                  "Basic",
                  "Development/Testing",
                  "Manual scale up to 3 instances",
                  "Custom domains, SSL",
                  "$55-$220"
                ],
                [
                  "Standard",
                  "Production AI apps",
                  "Auto-scale up to 10 instances",
                  "Deployment slots, daily backups",
                  "$75-$300"
                ],
                [
                  "Premium",
                  "High-traffic AI services",
                  "Auto-scale up to 30 instances",
                  "VNet integration, advanced scaling",
                  "$150-$600"
                ],
                [
                  "Isolated",
                  "Enterprise AI solutions",
                  "Auto-scale up to 100 instances",
                  "Private environment, advanced security",
                  "$680+"
                ]
              ]
            },
            "comparisonTableCaption": "Azure App Service hosting plan comparison for AI application deployment",
            "images": [],
            "imageSuggestions": [],
            "videoSuggestions": [
              {
                "title": "Choosing the right App Service plan for AI workloads",
                "description": "Short video demonstrating how to evaluate hosting plan options based on expected AI service call volume and response time requirements"
              }
            ],
            "interactiveSuggestions": [
              {
                "title": "App Service plan selector for AI scenarios",
                "description": "Interactive tool where learners input expected request volume, latency requirements, and budget to receive a recommended hosting plan with justification"
              }
            ],
            "visualAccessibilityNotes": "Ensure the comparison table is properly marked up with table headers and row headers. Describe the flowchart's branching logic and connections for screen reader users, emphasizing the decision criteria for each hosting plan tier."
          },
          {
            "id": "configure-ai-service-integration",
            "title": "Configure secure integration with Azure AI services",
            "type": "concept",
            "description": "Guidance on configuring Azure App Service application settings to store AI service endpoints and keys securely. Covers environment variables, Key Vault references, connection string management, and best practices for separating development and production configurations. Includes network security considerations and private endpoint setup.",
            "estimatedDurationMinutes": 12,
            "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\ntitle: Configure secure integration with Azure AI services\nmetadata:\n  title: Configure secure integration with Azure AI services\n  description: Guidance on configuring Azure App Service application settings to store AI service endpoints and keys securely. Covers environment variables, Key Vault references, connection string management, and network security considerations.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 12\ncontent: |\n  [!include[](includes/3-configure-ai-service-integration.md)]",
            "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    \n    User->>AppService: HTTP Request\n    AppService->>KeyVault: Retrieve API Keys\n    KeyVault-->>AppService: Return Secrets\n    AppService->>OpenAI: Call with Managed Identity\n    OpenAI-->>AppService: AI Response\n    AppService->>AIServices: Process with AI Services\n    AIServices-->>AppService: Analysis Results\n    AppService-->>User: Combined Response",
            "diagramCaption": "Secure integration flow between Azure App Service and AI services using Key Vault and managed identity",
            "diagramAltText": "Sequence diagram illustrating the secure flow of an AI application request. A user sends an HTTP request to Azure App Service, which retrieves API keys from Azure Key Vault. App Service then calls Azure OpenAI Service using managed identity authentication and processes data through Azure AI Services. Finally, the combined AI-powered response is returned to the user.",
            "comparisonTable": {
              "headers": [
                "Configuration Method",
                "Security Level",
                "Use Case",
                "Setup Complexity"
              ],
              "rows": [
                [
                  "Application Settings (plain text)",
                  "Low - Not recommended",
                  "Quick prototyping only",
                  "Very simple"
                ],
                [
                  "Application Settings (Key Vault reference)",
                  "High",
                  "Production apps with secrets",
                  "Moderate"
                ],
                [
                  "Managed Identity",
                  "Highest",
                  "Production apps without secrets",
                  "Simple"
                ],
                [
                  "Private Endpoints",
                  "Highest",
                  "Enterprise compliance requirements",
                  "Complex"
                ]
              ]
            },
            "comparisonTableCaption": "Comparison of configuration methods for integrating AI services with Azure App Service",
            "images": [],
            "imageSuggestions": [
              {
                "title": "Azure App Service configuration blade",
                "description": "Screenshot showing the Application Settings section with Key Vault references configured for Azure OpenAI endpoint and key"
              }
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [
              {
                "title": "Configuration security checker",
                "description": "Interactive module that evaluates different configuration approaches and highlights security risks or best practices for each option"
              }
            ],
            "visualAccessibilityNotes": "Provide detailed descriptions of each step in the sequence diagram, including the direction of data flow and the security mechanisms employed at each stage. Ensure comparison table headers and data relationships are clear for assistive technology users."
          },
          {
            "id": "implement-secure-authentication",
            "title": "Implement managed identity authentication for AI services",
            "type": "concept",
            "description": "Step-by-step explanation of enabling system-assigned or user-assigned managed identities for Azure App Service. Covers granting role-based access control (RBAC) permissions to AI services, eliminating credential management, and implementing identity-based authentication in application code using Azure SDKs.",
            "estimatedDurationMinutes": 11,
            "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\ntitle: Implement managed identity authentication for AI services\nmetadata:\n  title: Implement managed identity authentication for AI services\n  description: Step-by-step explanation of enabling managed identities for Azure App Service and granting RBAC permissions to AI services. Covers eliminating credential management and implementing identity-based authentication in application code.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 11\ncontent: |\n  [!include[](includes/4-implement-secure-authentication.md)]",
            "diagramMermaid": "graph LR\n    A[Azure App Service] -->|System-assigned Identity| B[Azure AD]\n    A -->|User-assigned Identity| B\n    B -->|RBAC Assignment| C[Azure OpenAI Service]\n    B -->|RBAC Assignment| D[Azure AI Services]\n    B -->|RBAC Assignment| E[Azure Key Vault]\n    C -->|Cognitive Services OpenAI User| A\n    D -->|Cognitive Services User| A\n    E -->|Key Vault Secrets User| A",
            "diagramCaption": "Managed identity authentication flow between Azure App Service and AI services",
            "diagramAltText": "Diagram showing Azure App Service with both system-assigned and user-assigned managed identities connecting to Azure Active Directory. Azure AD grants role-based access control (RBAC) assignments to Azure OpenAI Service, Azure AI Services, and Azure Key Vault. The specific roles shown are Cognitive Services OpenAI User, Cognitive Services User, and Key Vault Secrets User, which enable the App Service to authenticate without storing credentials.",
            "comparisonTable": {
              "headers": [
                "Identity Type",
                "Lifecycle",
                "Sharing Across Resources",
                "Best For"
              ],
              "rows": [
                [
                  "System-assigned",
                  "Tied to App Service resource",
                  "No - one per resource",
                  "Single application scenarios"
                ],
                [
                  "User-assigned",
                  "Independent managed resource",
                  "Yes - reusable across multiple resources",
                  "Multi-application environments, shared services"
                ]
              ]
            },
            "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication",
            "images": [],
            "imageSuggestions": [
              {
                "title": "Managed identity configuration in Azure portal",
                "description": "Screenshot showing the Identity blade of an App Service with system-assigned managed identity enabled and status indicator"
              },
              {
                "title": "RBAC role assignment for Azure OpenAI",
                "description": "Screenshot of the Access Control (IAM) blade showing a managed identity granted the Cognitive Services OpenAI User role"
              }
            ],
            "videoSuggestions": [
              {
                "title": "Setting up managed identity for AI applications",
                "description": "Walkthrough video demonstrating how to enable managed identity, assign RBAC roles, and update application code to use DefaultAzureCredential"
              }
            ],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": "Describe the directional flow from App Service through Azure AD to each AI service, emphasizing the elimination of stored credentials. Clearly convey the RBAC role names and their purpose for screen reader users."
          },
          {
            "id": "exercise-deploy-ai-app",
            "title": "Exercise: Deploy and configure an AI-powered web application",
            "type": "exercise",
            "description": "Hands-on lab guiding learners through deploying a sample AI application to Azure App Service. Steps include creating an App Service instance, configuring application settings with Key Vault references, enabling managed identity, granting RBAC permissions to Azure OpenAI Service, deploying application code from GitHub, testing AI functionality, and reviewing Application Insights telemetry. Includes validation checkpoints and cleanup instructions.",
            "estimatedDurationMinutes": 15,
            "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\ntitle: 'Exercise: Deploy and configure an AI-powered web application'\nmetadata:\n  title: 'Exercise: Deploy and configure an AI-powered web application'\n  description: Hands-on lab guiding learners through deploying a sample AI application to Azure App Service with managed identity and Azure OpenAI integration. Includes validation checkpoints and cleanup instructions.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 15\ncontent: |\n  [!include[](includes/5-exercise-deploy-ai-app.md)]",
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [
              {
                "title": "Deployed AI application interface",
                "description": "Screenshot of the running web application showing an input form for AI prompts and the generated response from Azure OpenAI Service"
              },
              {
                "title": "Application Insights dashboard",
                "description": "Screenshot showing real-time telemetry including request rates, response times, and dependency calls to Azure OpenAI Service"
              }
            ],
            "videoSuggestions": [],
            "interactiveSuggestions": [
              {
                "title": "Deployment validation checklist",
                "description": "Interactive checklist that learners complete as they verify managed identity configuration, RBAC assignments, application settings, and successful AI service integration"
              }
            ],
            "visualAccessibilityNotes": null
          },
          {
            "id": "knowledge-check",
            "title": "Knowledge check",
            "type": "knowledge-check",
            "description": "Assessment with scenario-based questions confirming learners can select appropriate App Service hosting plans for AI workloads, choose secure configuration methods for AI service integration, implement managed identity authentication correctly, and interpret Application Insights metrics for AI applications.",
            "estimatedDurationMinutes": 3,
            "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\ntitle: Knowledge check\nmetadata:\n  title: Knowledge check\n  description: Assessment with scenario-based questions confirming learners can select appropriate App Service hosting plans, choose secure configuration methods, implement managed identity authentication, and interpret monitoring metrics for AI applications.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 3\ncontent: |\n  [!include[](includes/6-knowledge-check.md)]",
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": null
          },
          {
            "id": "summary",
            "title": "Summary",
            "type": "summary",
            "description": "Summary revisiting the retail recommendation scenario, highlighting key takeaways including hosting plan selection, secure AI service integration, managed identity implementation, and production monitoring. Points to recommended next steps including advanced scaling strategies, containerized AI deployments, and Azure DevOps integration for CI/CD pipelines.",
            "estimatedDurationMinutes": 2,
            "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\ntitle: Summary\nmetadata:\n  title: Summary\n  description: Summary revisiting the retail recommendation scenario and highlighting key takeaways including hosting plan selection, secure AI service integration, managed identity implementation, and production monitoring with next steps.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 2\ncontent: |\n  [!include[](includes/7-summary.md)]",
            "diagramMermaid": null,
            "diagramCaption": null,
            "diagramAltText": null,
            "comparisonTable": null,
            "comparisonTableCaption": null,
            "images": [],
            "imageSuggestions": [],
            "videoSuggestions": [],
            "interactiveSuggestions": [],
            "visualAccessibilityNotes": null
          }
        ]
      }
    ],
    "estimatedDurationMinutes": 58,
    "nextSteps": [
      "Explore advanced scaling strategies for AI applications using Azure App Service auto-scale rules and Azure Front Door",
      "Learn to containerize AI applications and deploy them using Azure Container Apps for enhanced portability",
      "Implement CI/CD pipelines for AI solutions using Azure DevOps or GitHub Actions with deployment slots for zero-downtime updates"
    ]
  },
  "finalModule": {
    "id": "deploy-ai-solutions-azure-app-service-module",
    "title": "Deploy and manage AI applications on Azure App Service",
    "description": "Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.",
    "learningObjectives": [
      "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
      "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
      "Implement managed identity authentication to connect AI services without storing credentials",
      "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
    ],
    "estimatedDurationMinutes": 58,
    "yml": "### YamlMime:Module\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module\nmetadata:\n  title: Deploy and manage AI applications on Azure App Service\n  description: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads. Learn to evaluate deployment options, configure secure service integration, implement managed identity authentication, and monitor AI application performance and costs.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.service: azure-app-service\n  ms.topic: module-standard-task-based\ntitle: Deploy and manage AI applications on Azure App Service\nsummary: Enable AI engineers and developers to deploy intelligent applications using Azure App Service. Configure hosting plans, integrate Azure OpenAI Service and Azure AI Services, implement secure authentication, and establish monitoring for production AI workloads.\nabstract: |\n  By the end of this module, you'll be able to:\n  - Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n  - Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n  - Implement managed identity authentication to connect AI services without storing credentials\n  - Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\nprerequisites: |\n  - Familiarity with Azure fundamentals and the Azure portal\n  - Basic understanding of RESTful APIs and web application architecture\n  - Experience with at least one programming language (Python, C#, or JavaScript)\n  - Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge\niconUrl: /learn/achievements/generic-badge.svg\nlevels:\n  - intermediate\nroles:\n  - ai-engineer\n  - developer\n  - solution-architect\nproducts:\n  - azure-app-service\n  - azure-openai\n  - azure-ai-services\n  - azure-monitor\nsubjects:\n  - artificial-intelligence\n  - cloud-computing\nunits:\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\n  - learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\nbadge:\n  uid: learn.wwl.deploy-ai-solutions-azure-app-service-module.badge",
    "units": [
      {
        "id": "introduction",
        "title": "Introduction",
        "type": "introduction",
        "description": "Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.",
        "estimatedDurationMinutes": 5,
        "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.introduction\ntitle: Introduction\nmetadata:\n  title: Introduction\n  description: Scenario-driven introduction presenting a retail company deploying an AI-powered product recommendation engine. Covers the business challenge of scaling intelligent applications, the value of Azure App Service for AI workloads, module roadmap, and prerequisite confirmation.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 5\ncontent: |\n  [!include[](includes/1-introduction.md)]",
        "diagramMermaid": null,
        "diagramCaption": null,
        "diagramAltText": null,
        "comparisonTable": null,
        "comparisonTableCaption": null,
        "images": [],
        "imageSuggestions": [
          {
            "title": "AI-powered web application architecture overview",
            "description": "High-level architecture diagram showing Azure App Service hosting a web application that integrates with Azure OpenAI Service for product recommendations and Azure AI Services for image analysis, with Application Insights monitoring the solution and users accessing through a web browser"
          }
        ],
        "videoSuggestions": [],
        "interactiveSuggestions": [],
        "visualAccessibilityNotes": "Provide detailed alt text describing the architectural flow from end users through Azure App Service to AI services, emphasizing the monitoring layer and data flow for screen reader users."
      },
      {
        "id": "evaluate-app-service-ai-workloads",
        "title": "Evaluate Azure App Service deployment options for AI workloads",
        "type": "concept",
        "description": "Explain Azure App Service hosting plans (Basic, Standard, Premium, Isolated) with job-focused guidance on selecting appropriate tiers for AI applications. Cover performance requirements driven by AI service call volumes, cost optimization through right-sizing, deployment slots for testing AI model updates, and auto-scaling considerations when request patterns fluctuate. Address reliability implications of tier selection and operations team responsibilities for capacity planning.",
        "estimatedDurationMinutes": 10,
        "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.evaluate-app-service-ai-workloads\ntitle: Evaluate Azure App Service deployment options for AI workloads\nmetadata:\n  title: Evaluate Azure App Service deployment options for AI workloads\n  description: Explain Azure App Service hosting plans with job-focused guidance on selecting appropriate tiers for AI applications. Cover performance requirements, cost optimization, deployment slots, and auto-scaling considerations for AI workloads.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 10\ncontent: |\n  [!include[](includes/2-evaluate-app-service-ai-workloads.md)]",
        "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan Selection}\n    C -->|Development/Test| D[Basic Tier<br/>Manual scaling<br/>$55-220/mo]\n    C -->|Production| E[Standard Tier<br/>Auto-scale 10 instances<br/>Deployment slots<br/>$75-300/mo]\n    C -->|High-volume AI| F[Premium Tier<br/>Auto-scale 30 instances<br/>VNet integration<br/>$150-600/mo]\n    C -->|Enterprise/Compliance| G[Isolated Tier<br/>Dedicated environment<br/>Auto-scale 100 instances<br/>$680+/mo]\n    E --> H[Azure OpenAI Service]\n    F --> H\n    G --> H\n    E --> I[Auto-scaling Triggers]\n    I --> J[CPU Threshold]\n    I --> K[Memory Pressure]\n    I --> L[HTTP Queue Length]",
        "diagramCaption": "Azure App Service hosting plan decision flow for AI application deployment",
        "diagramAltText": "Decision tree diagram showing user requests flowing to Azure App Service, which branches into four hosting plan tiers: Basic for development and testing with manual scaling and monthly costs of $55-220; Standard for production workloads with auto-scaling up to 10 instances, deployment slots, and costs of $75-300; Premium for high-volume AI applications with auto-scaling up to 30 instances, VNet integration, and costs of $150-600; and Isolated for enterprise compliance scenarios with dedicated environments, auto-scaling up to 100 instances, and costs starting at $680. Standard, Premium, and Isolated tiers connect to Azure OpenAI Service. Auto-scaling triggers include CPU threshold, memory pressure, and HTTP queue length metrics.",
        "comparisonTable": {
          "headers": [
            "Hosting Plan",
            "AI Workload Fit",
            "Scaling Capability",
            "Key Features for AI Apps",
            "Typical Monthly Cost"
          ],
          "rows": [
            [
              "Basic",
              "Development, testing AI prototypes with low request volumes (under 1,000 requests/day)",
              "Manual scale up to 3 instances",
              "Custom domains, manual SSL; suitable for validating AI service integration before production",
              "$55-$220"
            ],
            [
              "Standard",
              "Production AI applications with moderate traffic (1,000-50,000 requests/day, under 2-second response target)",
              "Auto-scale up to 10 instances based on CPU, memory, or HTTP queue",
              "Deployment slots for testing AI model updates; daily backups; supports 99.95% SLA",
              "$75-$300"
            ],
            [
              "Premium",
              "High-volume AI services requiring consistent sub-second response times (50,000+ requests/day)",
              "Auto-scale up to 30 instances with advanced metrics",
              "VNet integration for private AI service endpoints; faster scaling response; dedicated compute reduces noisy neighbor risk",
              "$150-$600"
            ],
            [
              "Isolated",
              "Enterprise AI solutions with strict compliance, data residency, or security requirements",
              "Auto-scale up to 100 instances within dedicated environment",
              "Fully isolated network; private environment; advanced DDoS protection; required for regulated industries deploying AI",
              "$680+"
            ]
          ]
        },
        "comparisonTableCaption": "Comparison of Azure App Service hosting plans for AI application deployment scenarios",
        "images": [],
        "imageSuggestions": [
          {
            "title": "App Service plan selection in Azure portal",
            "description": "Screenshot of the Azure portal Create App Service Plan page with the Standard tier selected, highlighting the pricing tier dropdown, instance count slider, and estimated monthly cost calculator for a production AI workload"
          }
        ],
        "videoSuggestions": [
          {
            "title": "Selecting the right hosting plan for AI workloads",
            "description": "2-minute video demonstrating how to evaluate expected AI service call volume, response time requirements, and budget constraints to choose between Standard and Premium tiers for a production recommendation engine"
          }
        ],
        "interactiveSuggestions": [
          {
            "title": "Hosting plan decision tool for AI applications",
            "description": "Interactive calculator where learners input expected daily request volume, target response time, budget range, and compliance requirements to receive a recommended App Service tier with cost justification and scaling configuration"
          }
        ],
        "visualAccessibilityNotes": "Ensure the decision tree diagram clearly describes each tier's characteristics and cost range. The comparison table should use proper table markup with headers to enable screen readers to navigate rows and columns effectively."
      },
      {
        "id": "configure-ai-service-integration",
        "title": "Configure secure integration with Azure AI services",
        "type": "concept",
        "description": "Provide job-focused guidance on configuring Azure App Service to integrate Azure OpenAI Service and Azure AI Services securely. Explain application settings for storing service endpoints, demonstrate Key Vault references to protect API keys, and cover network security configurations including private endpoints for compliance scenarios. Address operations team responsibilities for monitoring configuration drift and security team requirements for secret rotation. Include decision criteria for when to use Key Vault versus managed identity.",
        "estimatedDurationMinutes": 12,
        "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.configure-ai-service-integration\ntitle: Configure secure integration with Azure AI services\nmetadata:\n  title: Configure secure integration with Azure AI services\n  description: Provide job-focused guidance on configuring Azure App Service to integrate Azure OpenAI and Azure AI Services securely using application settings, Key Vault references, and network security controls.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 12\ncontent: |\n  [!include[](includes/3-configure-ai-service-integration.md)]",
        "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    participant AppInsights as Application Insights\n    \n    User->>AppService: HTTPS Request (product query)\n    AppService->>KeyVault: Retrieve OpenAI API Key<br/>(using Key Vault reference)\n    KeyVault-->>AppService: Return Secret Value\n    AppService->>OpenAI: Generate Recommendations<br/>(with API key)\n    OpenAI-->>AppService: AI Response (product list)\n    AppService->>AIServices: Analyze Product Images<br/>(with managed identity)\n    AIServices-->>AppService: Image Analysis Results\n    AppService->>AppInsights: Log Telemetry<br/>(latency, tokens used)\n    AppService-->>User: Combined Response<br/>(recommendations + images)\n    AppInsights->>AppInsights: Track AI Service Dependencies",
        "diagramCaption": "Secure integration sequence showing Azure App Service retrieving secrets from Key Vault and calling AI services with telemetry logging",
        "diagramAltText": "Sequence diagram illustrating a secure AI application request flow. A user sends an HTTPS request for product recommendations to Azure App Service. App Service retrieves the Azure OpenAI API key from Azure Key Vault using a Key Vault reference, then calls Azure OpenAI Service to generate product recommendations. Next, App Service uses managed identity to call Azure AI Services for image analysis. App Service logs telemetry including latency and token usage to Application Insights, then returns the combined AI-powered response to the user. Application Insights tracks all AI service dependencies throughout the flow.",
        "comparisonTable": {
          "headers": [
            "Configuration Method",
            "Security Level",
            "Use Case",
            "Operations Overhead",
            "Setup Time"
          ],
          "rows": [
            [
              "Application Settings (plain text API keys)",
              "Low - Secrets visible in portal; not recommended for production AI workloads",
              "Quick prototyping or development environments only; acceptable risk for non-production data",
              "Minimal - no secret rotation infrastructure needed",
              "5 minutes"
            ],
            [
              "Application Settings with Key Vault references",
              "High - Secrets stored in Key Vault; access logged; supports automatic rotation",
              "Production AI applications requiring secret management; compliance scenarios needing audit trails for API key access",
              "Moderate - requires Key Vault setup and access policy configuration; security team owns rotation schedule",
              "15-20 minutes"
            ],
            [
              "Managed Identity (no secrets)",
              "Highest - No secrets stored anywhere; Azure AD handles authentication; eliminates credential leakage risk",
              "Production AI applications where supported (Azure OpenAI, Azure AI Services); preferred method for security-sensitive workloads",
              "Low - no secret rotation; security team assigns RBAC roles; operations team monitors identity assignment drift",
              "10 minutes"
            ],
            [
              "Private Endpoints with VNet integration",
              "Highest - Traffic never leaves Microsoft backbone; required for regulatory compliance (HIPAA, PCI-DSS)",
              "Enterprise AI solutions with strict data residency or network isolation requirements; financial services, healthcare",
              "High - network team configures VNets, subnets, DNS; ongoing monitoring of private link connectivity",
              "45-60 minutes"
            ]
          ]
        },
        "comparisonTableCaption": "Comparison of secure configuration methods for integrating AI services with Azure App Service, including security level, use cases, and operational considerations",
        "images": [],
        "imageSuggestions": [
          {
            "title": "Application Settings with Key Vault reference",
            "description": "Screenshot of Azure App Service Configuration blade showing an application setting named OPENAI_API_KEY with a Key Vault reference value (@Microsoft.KeyVault(SecretUri=https://...)) and a green checkmark indicating successful secret retrieval"
          },
          {
            "title": "Private endpoint configuration",
            "description": "Screenshot showing the Networking blade of an App Service with VNet Integration enabled and a private endpoint connection listed for Azure OpenAI Service with status 'Approved'"
          }
        ],
        "videoSuggestions": [],
        "interactiveSuggestions": [
          {
            "title": "Configuration security assessment",
            "description": "Interactive module presenting three AI application scenarios (development prototype, production SaaS app, healthcare patient portal) where learners select the appropriate configuration method and explain security or compliance justifications for their choice"
          }
        ],
        "visualAccessibilityNotes": "Describe each step in the sequence diagram with emphasis on the security mechanisms: Key Vault reference retrieval, managed identity authentication, and telemetry logging. Ensure comparison table relationships between security level and use case are clear for assistive technology."
      },
      {
        "id": "implement-secure-authentication",
        "title": "Implement managed identity authentication for AI services",
        "type": "concept",
        "description": "Explain how to enable system-assigned and user-assigned managed identities for Azure App Service and grant role-based access control (RBAC) permissions to Azure OpenAI Service and Azure AI Services. Cover when to choose each identity type based on resource sharing needs, demonstrate assigning Cognitive Services OpenAI User and Cognitive Services User roles, and show how to update application code to use DefaultAzureCredential. Address security team responsibilities for reviewing RBAC assignments and operations team tasks for auditing identity usage patterns.",
        "estimatedDurationMinutes": 11,
        "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.implement-secure-authentication\ntitle: Implement managed identity authentication for AI services\nmetadata:\n  title: Implement managed identity authentication for AI services\n  description: Explain how to enable managed identities for Azure App Service, grant RBAC permissions to AI services, and update application code to eliminate credential management.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 11\ncontent: |\n  [!include[](includes/4-implement-secure-authentication.md)]",
        "diagramMermaid": "graph TB\n    subgraph App Service Environment\n        A[Azure App Service<br/>Product Recommendation App]\n        A1[System-assigned Identity<br/>Lifecycle tied to App Service]\n        A2[User-assigned Identity<br/>Shared across resources]\n        A -->|Enables| A1\n        A -->|Assigns| A2\n    end\n    \n    subgraph Azure Active Directory\n        B[Azure AD Identity Management]\n        A1 -->|Registers with| B\n        A2 -->|Registers with| B\n    end\n    \n    subgraph AI Services\n        C[Azure OpenAI Service]\n        D[Azure AI Vision]\n        E[Azure Key Vault]\n    end\n    \n    subgraph RBAC Assignments\n        F[Cognitive Services OpenAI User]\n        G[Cognitive Services User]\n        H[Key Vault Secrets User]\n    end\n    \n    B -->|RBAC Role Assignment| F\n    B -->|RBAC Role Assignment| G\n    B -->|RBAC Role Assignment| H\n    F -->|Grants Access to| C\n    G -->|Grants Access to| D\n    H -->|Grants Access to| E\n    \n    A -->|Authenticates to| C\n    A -->|Authenticates to| D\n    A -->|Authenticates to| E",
        "diagramCaption": "Managed identity authentication architecture showing Azure App Service using system-assigned or user-assigned identities with RBAC role assignments to access AI services without storing credentials",
        "diagramAltText": "Architecture diagram showing Azure App Service with both system-assigned and user-assigned managed identities. System-assigned identity lifecycle is tied to the App Service resource, while user-assigned identity can be shared across multiple resources. Both identity types register with Azure Active Directory. Azure AD grants RBAC role assignments: Cognitive Services OpenAI User for Azure OpenAI Service access, Cognitive Services User for Azure AI Vision access, and Key Vault Secrets User for Azure Key Vault access. The diagram emphasizes that App Service authenticates to all three services using managed identity, eliminating the need to store API keys or connection strings in application code or configuration.",
        "comparisonTable": {
          "headers": [
            "Managed Identity Type",
            "Lifecycle",
            "Resource Sharing",
            "Best Use Case",
            "Team Responsibility"
          ],
          "rows": [
            [
              "System-assigned",
              "Created and deleted with the App Service resource; cannot exist independently",
              "No - unique to one App Service instance; creates 1:1 relationship between identity and resource",
              "Single AI application with dedicated resources; simplifies identity management when App Service and AI services have matching lifecycles",
              "Development team enables during App Service creation; security team assigns RBAC roles; operations team monitors in resource activity logs"
            ],
            [
              "User-assigned",
              "Independent managed resource; persists after App Service deletion; can be pre-created and reused",
              "Yes - same identity can authenticate multiple App Services, Azure Functions, or VMs to shared AI services",
              "Multi-application environment sharing Azure OpenAI deployment; microservices architecture where multiple services need identical AI service permissions; simplifies RBAC when 10+ apps use the same backend",
              "Security team creates and manages identity lifecycle; development team assigns to App Services; operations team audits which resources use each identity"
            ]
          ]
        },
        "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication, including lifecycle, sharing capabilities, and operational responsibilities",
        "images": [],
        "imageSuggestions": [
          {
            "title": "Enable system-assigned managed identity",
            "description": "Screenshot of Azure App Service Identity blade with System assigned tab selected, showing the Status toggle set to On with a green indicator and the Object (principal) ID displayed below"
          },
          {
            "title": "Assign RBAC role to managed identity",
            "description": "Screenshot of Azure OpenAI Service Access Control (IAM) blade showing the Add role assignment wizard with Cognitive Services OpenAI User role selected and a managed identity listed in the Members section with a checkmark"
          },
          {
            "title": "DefaultAzureCredential code pattern",
            "description": "Code snippet showing Python code using Azure Identity library's DefaultAzureCredential to authenticate to Azure OpenAI Service without hardcoded keys, with comments explaining how it automatically tries managed identity authentication first"
          }
        ],
        "videoSuggestions": [
          {
            "title": "Configure managed identity for AI applications",
            "description": "4-minute walkthrough demonstrating how to enable system-assigned managed identity in the Azure portal, navigate to Azure OpenAI Service IAM, assign the Cognitive Services OpenAI User role, and update Python application code to use DefaultAzureCredential instead of API keys"
          }
        ],
        "interactiveSuggestions": [],
        "visualAccessibilityNotes": "Clearly describe the flow from App Service through Azure AD to each AI service, emphasizing RBAC role names and their specific permissions. Ensure the architecture diagram conveys the elimination of stored credentials and the automated authentication process for screen reader users."
      },
      {
        "id": "exercise-deploy-ai-app",
        "title": "Exercise: Deploy and configure an AI-powered web application",
        "type": "exercise",
        "description": "Hands-on exercise where learners deploy a sample product recommendation web application to Azure App Service, configure it to integrate with Azure OpenAI Service using managed identity, and verify successful AI-powered responses. Includes step-by-step instructions for creating an App Service instance on the Standard tier, enabling system-assigned managed identity, granting Cognitive Services OpenAI User role, configuring application settings, deploying code from a provided GitHub repository, testing the recommendation endpoint, reviewing Application Insights telemetry for AI service dependencies, and cleaning up resources to avoid ongoing charges.",
        "estimatedDurationMinutes": 15,
        "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.exercise-deploy-ai-app\ntitle: 'Exercise: Deploy and configure an AI-powered web application'\nmetadata:\n  title: 'Exercise: Deploy and configure an AI-powered web application'\n  description: Hands-on exercise deploying a product recommendation app to Azure App Service with managed identity authentication to Azure OpenAI Service. Includes validation and cleanup steps.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 15\ncontent: |\n  [!include[](includes/5-exercise-deploy-ai-app.md)]",
        "diagramMermaid": null,
        "diagramCaption": null,
        "diagramAltText": null,
        "comparisonTable": null,
        "comparisonTableCaption": null,
        "images": [],
        "imageSuggestions": [
          {
            "title": "Deployed AI application interface",
            "description": "Screenshot of the running product recommendation web application showing an input form where users can enter a product category, a Submit button, and a response section displaying AI-generated product recommendations from Azure OpenAI Service with product names, descriptions, and confidence scores"
          },
          {
            "title": "Application Insights dependency tracking",
            "description": "Screenshot of the Application Insights Performance blade showing a transaction timeline with dependencies highlighted, specifically showing calls to Azure OpenAI Service with response times, success rates, and token usage metrics visible in the details pane"
          },
          {
            "title": "Managed identity RBAC assignment confirmation",
            "description": "Screenshot of the Azure OpenAI Service Access Control (IAM) blade with the Role assignments tab selected, filtering by the App Service's managed identity name, showing the Cognitive Services OpenAI User role assigned with a green checkmark indicating active permission"
          }
        ],
        "videoSuggestions": [],
        "interactiveSuggestions": [
          {
            "title": "Deployment validation checklist",
            "description": "Interactive step-by-step checklist that learners complete as they progress through the exercise, including checkboxes for: App Service created with Standard tier, system-assigned managed identity enabled and Object ID copied, RBAC role assigned to Azure OpenAI, application settings configured with OpenAI endpoint, code deployed successfully, test request returns AI recommendations, Application Insights shows dependency calls, and all resources deleted during cleanup"
          }
        ],
        "visualAccessibilityNotes": "Provide descriptive alt text for all screenshots showing the specific UI elements learners need to locate and interact with, including button labels, field names, and status indicators."
      },
      {
        "id": "knowledge-check",
        "title": "Knowledge check",
        "type": "knowledge-check",
        "description": "Scenario-based assessment with three questions testing learners' ability to select appropriate App Service hosting plans for AI workload requirements, choose secure configuration methods for AI service integration based on compliance and operational constraints, and interpret Application Insights telemetry to diagnose AI application performance issues. Each question presents a realistic job scenario and requires applying concepts from the module to make informed decisions.",
        "estimatedDurationMinutes": 3,
        "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.knowledge-check\ntitle: Knowledge check\nmetadata:\n  title: Knowledge check\n  description: Scenario-based assessment testing learners' ability to select hosting plans, choose secure configuration methods, and interpret monitoring telemetry for AI applications on Azure App Service.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 3\ncontent: |\n  [!include[](includes/6-knowledge-check.md)]",
        "diagramMermaid": null,
        "diagramCaption": null,
        "diagramAltText": null,
        "comparisonTable": null,
        "comparisonTableCaption": null,
        "images": [],
        "imageSuggestions": [],
        "videoSuggestions": [],
        "interactiveSuggestions": [],
        "visualAccessibilityNotes": null
      },
      {
        "id": "summary",
        "title": "Summary",
        "type": "summary",
        "description": "Recap the retail product recommendation scenario and highlight how learners successfully deployed an AI application to Azure App Service with secure managed identity authentication and production monitoring. Summarize key takeaways: evaluating hosting plans based on AI workload performance and cost requirements, configuring secure integration using Key Vault references or managed identity to eliminate credential storage, implementing RBAC role assignments for least-privilege access to AI services, and monitoring AI application health and costs using Application Insights. Recommend next Microsoft Learn modules including 'Scale applications in Azure App Service,' 'Implement Azure Container Apps for AI workloads,' and 'Build CI/CD pipelines for AI applications with Azure DevOps.'",
        "estimatedDurationMinutes": 2,
        "yml": "### YamlMime:ModuleUnit\nuid: learn.wwl.deploy-ai-solutions-azure-app-service-module.summary\ntitle: Summary\nmetadata:\n  title: Summary\n  description: Recap the retail recommendation scenario, highlight key takeaways including hosting plan selection and secure AI integration, and recommend next learning paths for scaling, containerization, and CI/CD.\n  author: github-contributor\n  ms.author: mslearn-contributor\n  ms.date: 01/15/2024\n  ms.topic: unit\ndurationInMinutes: 2\ncontent: |\n  [!include[](includes/7-summary.md)]",
        "diagramMermaid": null,
        "diagramCaption": null,
        "diagramAltText": null,
        "comparisonTable": null,
        "comparisonTableCaption": null,
        "images": [],
        "imageSuggestions": [],
        "videoSuggestions": [],
        "interactiveSuggestions": [],
        "visualAccessibilityNotes": null
      }
    ]
  },
  "researchBrief": {
    "primarySources": [
      {
        "url": "https://learn.microsoft.com/en-us/azure/app-service/overview",
        "type": "documentation",
        "relevance": "Core Azure App Service documentation updated January 2025 covering platform capabilities, deployment models, and integration patterns for web apps and APIs"
      },
      {
        "url": "https://learn.microsoft.com/en-us/azure/app-service/quickstart-python",
        "type": "quickstart",
        "relevance": "December 2024 quickstart guide for deploying Python applications to App Service, relevant for AI/ML workloads using Flask or FastAPI frameworks"
      },
      {
        "url": "https://learn.microsoft.com/en-us/azure/app-service/configure-language-python",
        "type": "how-to",
        "relevance": "January 2025 configuration guide for Python runtime environments, dependency management, and startup commands essential for AI solution deployment"
      },
      {
        "url": "https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/ai/basic-openai-e2e-chat",
        "type": "reference",
        "relevance": "December 2024 Azure Architecture Center reference for deploying end-to-end chat applications with Azure OpenAI Service hosted on App Service"
      },
      {
        "url": "https://learn.microsoft.com/en-us/azure/app-service/deploy-continuous-deployment",
        "type": "how-to",
        "relevance": "November 2024 continuous deployment guide covering GitHub Actions, Azure Pipelines, and container registry integration for CI/CD workflows"
      },
      {
        "url": "https://learn.microsoft.com/en-us/azure/app-service/manage-scale-up",
        "type": "how-to",
        "relevance": "January 2025 scaling documentation detailing vertical scaling options, tier selection criteria, and performance optimization for compute-intensive AI workloads"
      },
      {
        "url": "https://azure.microsoft.com/en-us/updates/app-service-2024/",
        "type": "release-notes",
        "relevance": "December 2024 Azure Updates announcing Linux container support improvements, managed identity enhancements, and Python 3.12 runtime availability"
      },
      {
        "url": "https://techcommunity.microsoft.com/blog/appsonazureblog/deploying-ai-applications-on-azure-app-service/4012345",
        "type": "blog",
        "relevance": "October 2024 Tech Community post covering best practices for hosting AI inference endpoints, connection pooling for Azure OpenAI, and managed identity authentication patterns"
      }
    ],
    "technicalFacts": [
      "[S1] Azure App Service provides fully managed platform-as-a-service supporting .NET, Java, Node.js, Python, and PHP with built-in auto-scaling and 99.95% SLA.",
      "[S3] Python 3.8-3.12 runtimes are supported with pip-based dependency installation and configurable startup commands for AI framework compatibility.",
      "[S6] App Service supports vertical scaling across Basic, Standard, Premium, and Isolated tiers with CPU/memory configurations up to 32 vCPU and 256 GB RAM for ML workloads.",
      "[S4] Managed identity integration enables passwordless authentication to Azure OpenAI, Cognitive Services, and Azure Storage without storing credentials in code.",
      "[S5] GitHub Actions and Azure Pipelines integration automates deployment workflows with support for Docker containers, ZIP deployment, and infrastructure-as-code.",
      "[S2] App Service integrates with Application Insights for distributed tracing, enabling monitoring of AI model inference latency and Azure OpenAI API call performance.",
      "[S7] Linux container support allows deployment of custom AI runtime environments with GPU acceleration when paired with Azure Container Apps or AKS for compute-heavy inference."
    ],
    "useCases": [
      "[S4] Data scientists deploy FastAPI inference endpoints | Metric (baseline=45min manual setup; delta=-78% deployment time; timeframe=per release) [S4]",
      "[S8] ML engineers host Azure OpenAI chat UIs with managed identity | Metric (baseline=12 credential rotations/year; delta=-100% manual rotation; timeframe=annual) [S8]",
      "[S6] DevOps teams auto-scale AI APIs during peak traffic | Metric (baseline=3hr manual intervention; delta=-90% response time; timeframe=per incident) [S6]"
    ],
    "codeResources": [
      {
        "url": "https://github.com/Azure-Samples/openai-chat-app-quickstart",
        "description": "End-to-end Azure OpenAI chat application with App Service deployment using Python Flask framework and managed identity authentication",
        "language": "python"
      },
      {
        "url": "https://github.com/Azure-Samples/app-service-deployment-samples",
        "description": "GitHub Actions workflow templates for deploying containerized AI applications to App Service with secrets management and environment configuration",
        "language": "yaml"
      },
      {
        "url": "https://learn.microsoft.com/en-us/azure/app-service/quickstart-python#code",
        "description": "Python Flask quickstart demonstrating application structure, requirements.txt dependency management, and Azure App Service startup configuration",
        "language": "python"
      }
    ],
    "recentUpdates": [
      "January 2025 — Python 3.12 runtime general availability on App Service Linux with improved startup performance and native async support for AI frameworks [S3].",
      "December 2024 — Azure Architecture Center published reference architecture for deploying Azure OpenAI chat applications on App Service with integrated monitoring [S4].",
      "December 2024 — App Service added enhanced managed identity support for Azure AI services with automatic token refresh and regional failover capabilities [S7]."
    ],
    "relatedCertifications": [
      "AZ-204: Developing Solutions for Microsoft Azure",
      "AI-102: Designing and Implementing a Microsoft Azure AI Solution"
    ]
  },
  "scenarios": [
    {
      "moduleId": "deploy-ai-solutions-azure-app-service-module",
      "companyContext": {
        "companyName": "Fabrikam Inc",
        "industry": "Manufacturing & Industrial Equipment",
        "size": "2,800+ employees across 12 facilities",
        "currentSituation": "Running proof-of-concept AI quality inspection system on local development servers with 450+ daily image classifications",
        "challenge": "POC shows 94% defect detection accuracy but needs production-grade deployment with global accessibility for quality teams across facilities",
        "yourRole": "Cloud Solutions Developer",
        "reportingTo": "Marcus Chen, VP of Digital Operations",
        "objective": "Deploy the AI-powered quality inspection application to Azure App Service with scalability, monitoring, and multi-region support"
      },
      "technicalRequirements": [
        "Azure App Service deployment supporting Python-based AI model inference",
        "Integration with Azure OpenAI Service for image analysis enhancement",
        "Application Insights for performance monitoring and telemetry",
        "Secure configuration management for API keys and connection strings",
        "Support for 200+ concurrent image upload sessions during peak shifts"
      ],
      "successMetrics": [
        "Application availability of 99.5% or higher across all regions",
        "Image processing latency under 3 seconds per classification",
        "Zero credential exposure in application configuration",
        "Automated deployment pipeline reducing release time from 4 hours to under 15 minutes",
        "Application scales automatically to handle 3x traffic during shift changes"
      ],
      "constraints": [
        "Budget: $800/month for App Service and associated monitoring",
        "Must support facility teams in North America, Europe, and Asia-Pacific time zones",
        "Compliance requirement: all model inference data must remain in corporate Azure subscription",
        "Timeline: 3 weeks to production deployment before quarterly board review",
        "Legacy quality database integration using REST APIs must be maintained"
      ],
      "timeline": "3-week deployment window with board presentation deadline",
      "dataVolumes": "450 images daily currently, projected 1,200+ images daily within 6 months",
      "whatYouWillBuild": "A production-ready Azure App Service deployment of the AI quality inspection application with automated CI/CD, secure configuration, comprehensive monitoring, and auto-scaling capabilities"
    }
  ],
  "unitDrafts": [
    {
      "id": "introduction",
      "title": "Introduction",
      "type": "introduction",
      "narrativeMd": "Your retail company just launched a customer-facing web portal that provides personalized product recommendations using Azure OpenAI Service. During the first week, traffic exceeded expectations by 300%, causing intermittent slowdowns and timeout errors. Your operations team scrambled to scale infrastructure manually, while your security team flagged API keys stored in configuration files as a compliance risk. As the cloud engineer responsible for production AI workloads, you need a hosting platform that scales automatically, integrates securely with Azure AI services, and provides visibility into performance and costs.\n\nAzure App Service offers a fully managed platform that eliminates the infrastructure complexity of deploying AI applications. With built-in auto-scaling triggered by real-time metrics, your recommendation engine adapts to traffic spikes without manual intervention. Managed identity authentication replaces hardcoded API keys, satisfying your security team's zero-trust requirements. Application Insights automatically tracks AI service dependencies, token consumption, and response times, giving your operations team the telemetry needed to optimize costs and maintain SLA commitments. By the end of this module, you'll deploy a production-ready AI application that integrates Azure OpenAI Service and Azure AI Services using secure authentication patterns, with monitoring configured to surface performance bottlenecks and cost drivers.\n\n## Learning objectives\n\nBy the end of this module, you'll be able to:\n\n- Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans\n- Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services\n- Implement managed identity authentication to connect AI services without storing credentials\n- Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics\n\n## Prerequisites\n\n- Familiarity with Azure fundamentals and the Azure portal\n- Basic understanding of RESTful APIs and web application architecture\n- Experience with at least one programming language (Python, C#, or JavaScript)\n- Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge",
      "learningObjectives": [
        "Evaluate Azure App Service deployment options for AI applications and select appropriate hosting plans",
        "Configure Azure App Service to securely integrate Azure OpenAI Service and Azure AI Services",
        "Implement managed identity authentication to connect AI services without storing credentials",
        "Monitor AI application performance and costs using Azure Application Insights and App Service diagnostics"
      ],
      "prerequisites": [
        "Familiarity with Azure fundamentals and the Azure portal",
        "Basic understanding of RESTful APIs and web application architecture",
        "Experience with at least one programming language (Python, C#, or JavaScript)",
        "Completion of Microsoft Learn module: 'Introduction to Azure App Service' or equivalent knowledge"
      ],
      "diagramMermaid": null,
      "diagramCaption": null,
      "diagramAltText": null,
      "comparisonTable": null,
      "comparisonTableCaption": null,
      "images": [],
      "imageSuggestions": [
        "High-level architecture diagram showing Azure App Service hosting a web application that integrates with Azure OpenAI Service for product recommendations and Azure AI Services for image analysis, with Application Insights monitoring the solution and users accessing through a web browser. Include visual indicators for managed identity authentication flow and auto-scaling triggers."
      ],
      "videoSuggestions": [],
      "interactiveSuggestions": [],
      "visualAccessibilityNotes": "Provide detailed alt text describing the architectural flow from end users through Azure App Service to AI services, emphasizing the monitoring layer and data flow for screen reader users.",
      "codeSamples": [],
      "exercise": null,
      "knowledgeCheck": null,
      "resources": [],
      "estimatedDurationMinutes": 5
    },
    {
      "id": "evaluate-app-service-ai-workloads",
      "title": "Evaluate Azure App Service deployment options for AI workloads",
      "type": "concept",
      "narrativeMd": "When you deploy an AI application that calls Azure OpenAI Service or Azure AI Services, the hosting platform becomes a critical performance and cost lever. Unlike traditional web applications that primarily serve static content or database queries, AI workloads generate variable compute loads driven by unpredictable request patterns—a product recommendation engine might handle 500 requests per hour during business hours, then spike to 5,000 requests during a flash sale. At the same time, each AI service call consumes tokens billed separately from your hosting infrastructure, creating a dual cost structure where both compute tier and AI usage contribute to your monthly bill. Azure App Service hosting plans determine how your application scales to meet these demands, how quickly it responds under load, and whether your operations team can meet SLA commitments without overpaying for idle capacity.\n\n## Hosting plan tiers and AI workload fit\n\nAzure App Service offers four primary hosting plan tiers, each designed for different operational scenarios. With Basic tier plans, you deploy applications suitable for development and testing environments where traffic remains predictable and low—typically under 1,000 requests per day. This tier supports manual scaling up to three instances, making it appropriate for validating your AI service integration before moving to production, but it lacks the auto-scaling capabilities required when request volumes fluctuate. Your development team can prototype a recommendation engine on Basic tier for approximately $55-$220 per month, then migrate configuration to a higher tier once performance testing reveals production requirements.\n\nStandard tier plans introduce auto-scaling triggered by CPU utilization, memory pressure, or HTTP queue length, scaling up to 10 instances based on rules you define. This becomes critical when your AI application experiences variable load—for example, a customer support chatbot that handles 2,000 requests per hour during business hours but drops to 200 requests overnight. With auto-scaling configured to add instances when CPU exceeds 70% for five minutes, your application maintains sub-2-second response times during peak traffic without manual intervention. Standard tier also provides deployment slots, allowing your team to test AI model updates in a staging environment before swapping to production, reducing the risk of deploying prompt changes that degrade recommendation quality. At $75-$300 per month, Standard tier suits production AI applications with moderate traffic that require consistent performance and minimal operational overhead.\n\nBuilding on Standard's capabilities, Premium tier plans support auto-scaling up to 30 instances and add VNet integration for private connectivity to AI services. This becomes especially important when your compliance team requires that all traffic between your application and Azure OpenAI Service traverse private networks rather than the public internet—common in financial services and healthcare scenarios. Premium tier also reduces the impact of noisy neighbors by providing dedicated compute resources, ensuring that other tenants' workloads don't affect your AI application's response times during high-volume periods. Organizations handling 50,000+ requests per day with sub-second response time requirements typically select Premium tier, accepting the $150-$600 monthly cost in exchange for predictable performance and advanced networking controls.\n\nFor enterprise AI solutions with strict compliance or data residency requirements, Isolated tier plans provide fully dedicated environments with auto-scaling up to 100 instances within a private App Service Environment. Your network team gains complete control over ingress and egress traffic, while your security team satisfies audit requirements mandating that AI workloads run in isolated infrastructure. This tier's $680+ monthly cost reflects the dedicated hardware and advanced DDoS protection, making it appropriate only when regulatory constraints or enterprise security policies prohibit multi-tenant hosting.\n\n## Performance requirements driven by AI service patterns\n\nUnlike traditional web applications where response time depends primarily on database query performance, AI applications experience latency determined by external service calls to Azure OpenAI or Azure AI Services. When your product recommendation engine calls Azure OpenAI's GPT-4 model to generate personalized suggestions, the API request typically completes in 800-2,000 milliseconds depending on prompt complexity and token count. With this latency profile in mind, your hosting plan must provide sufficient compute resources to handle concurrent requests without queueing—if your application receives 50 simultaneous requests during peak traffic and each instance can process 5 concurrent AI calls, you need at least 10 instances to avoid request timeouts. Standard tier's 10-instance limit becomes a bottleneck at this scale, signaling the need to evaluate Premium tier's 30-instance capacity.\n\nAuto-scaling configuration directly impacts your ability to meet SLA commitments during traffic spikes. Consider what happens when a marketing campaign drives a 400% increase in recommendation requests over a 15-minute window. With auto-scaling rules configured to add one instance when CPU exceeds 70% for five minutes, your application might take 8-10 minutes to fully scale out, leaving requests queued during the initial spike. Premium tier's faster scaling response and higher instance limits reduce this window, while careful tuning of scaling triggers—such as using HTTP queue length instead of CPU percentage—can further improve responsiveness. Your operations team should validate scaling behavior during load testing, ensuring that instance provisioning completes before request timeouts occur.\n\n## Cost optimization through right-sizing\n\nBecause AI applications generate costs in two dimensions—hosting compute charges and AI service token consumption—selecting the appropriate App Service tier requires analyzing both components. If your recommendation engine processes 100,000 requests per day and each request consumes an average of 500 tokens at $0.002 per 1,000 tokens for GPT-4, your monthly AI service cost reaches approximately $3,000. At the same time, a Standard tier S2 instance ($150/month) running at 60% average CPU utilization supports this load effectively. Upgrading to Premium P1v2 ($300/month) would double your hosting cost for minimal performance gain, reducing your overall cost efficiency.\n\nHowever, this calculation changes when request patterns exhibit significant variability. With auto-scaling enabled, you pay only for the instances running during each billing period—if your application scales from 2 instances during off-peak hours to 8 instances during peak traffic, you avoid paying for 8 instances continuously. Your finance team can track this pattern in Azure Cost Management, comparing hosting costs against AI service token consumption to identify optimization opportunities. For example, if Application Insights reveals that 30% of AI service calls result from redundant requests caused by aggressive client retry logic, your development team can implement caching or circuit breaker patterns to reduce both token costs and hosting load.\n\n## Decision criteria for tier selection\n\nWhen evaluating hosting plans for AI workloads, start by estimating your expected daily request volume and target response time. Applications handling under 10,000 requests per day with 3-5 second response time tolerance typically fit within Standard tier's scaling limits. As request volume approaches 50,000 per day or response time requirements tighten to sub-second latency, Premium tier's additional instances and faster scaling become necessary. At the same time, consider your compliance and security requirements—if your security team mandates private connectivity to AI services or your industry regulations require dedicated infrastructure, these constraints override pure performance calculations and drive you toward Premium or Isolated tiers.\n\nYour operations team should also evaluate the administrative overhead of each tier. Standard tier requires configuring auto-scaling rules and monitoring performance metrics, but generally operates without daily intervention once properly tuned. Premium and Isolated tiers add networking complexity through VNet integration and private endpoints, requiring coordination with your network team to configure DNS, subnets, and firewall rules. This operational cost—measured in engineering hours rather than Azure billing—can exceed the monetary difference between tiers for small teams managing multiple AI applications. With these trade-offs in mind, select the tier that balances performance, cost, compliance requirements, and your team's operational capacity, knowing you can scale up (or down) as your application's usage patterns evolve.",
      "learningObjectives": [],
      "prerequisites": [],
      "diagramMermaid": "graph TD\n    A[User Request] --> B[Azure App Service]\n    B --> C{Hosting Plan Selection}\n    C -->|Development/Test| D[Basic Tier<br/>Manual scaling<br/>$55-220/mo]\n    C -->|Production| E[Standard Tier<br/>Auto-scale 10 instances<br/>Deployment slots<br/>$75-300/mo]\n    C -->|High-volume AI| F[Premium Tier<br/>Auto-scale 30 instances<br/>VNet integration<br/>$150-600/mo]\n    C -->|Enterprise/Compliance| G[Isolated Tier<br/>Dedicated environment<br/>Auto-scale 100 instances<br/>$680+/mo]\n    E --> H[Azure OpenAI Service]\n    F --> H\n    G --> H\n    E --> I[Auto-scaling Triggers]\n    I --> J[CPU Threshold]\n    I --> K[Memory Pressure]\n    I --> L[HTTP Queue Length]",
      "diagramCaption": "Azure App Service hosting plan decision flow for AI application deployment",
      "diagramAltText": "Decision tree diagram showing user requests flowing to Azure App Service, which branches into four hosting plan tiers: Basic for development and testing with manual scaling and monthly costs of $55-220; Standard for production workloads with auto-scaling up to 10 instances, deployment slots, and costs of $75-300; Premium for high-volume AI applications with auto-scaling up to 30 instances, VNet integration, and costs of $150-600; and Isolated for enterprise compliance scenarios with dedicated environments, auto-scaling up to 100 instances, and costs starting at $680. Standard, Premium, and Isolated tiers connect to Azure OpenAI Service. Auto-scaling triggers include CPU threshold, memory pressure, and HTTP queue length metrics.",
      "comparisonTable": {
        "headers": [
          "Hosting Plan",
          "AI Workload Fit",
          "Scaling Capability",
          "Key Features for AI Apps",
          "Typical Monthly Cost"
        ],
        "rows": [
          [
            "Basic",
            "Development, testing AI prototypes with low request volumes (under 1,000 requests/day)",
            "Manual scale up to 3 instances",
            "Custom domains, manual SSL; suitable for validating AI service integration before production",
            "$55-$220"
          ],
          [
            "Standard",
            "Production AI applications with moderate traffic (1,000-50,000 requests/day, under 2-second response target)",
            "Auto-scale up to 10 instances based on CPU, memory, or HTTP queue",
            "Deployment slots for testing AI model updates; daily backups; supports 99.95% SLA",
            "$75-$300"
          ],
          [
            "Premium",
            "High-volume AI services requiring consistent sub-second response times (50,000+ requests/day)",
            "Auto-scale up to 30 instances with advanced metrics",
            "VNet integration for private AI service endpoints; faster scaling response; dedicated compute reduces noisy neighbor risk",
            "$150-$600"
          ],
          [
            "Isolated",
            "Enterprise AI solutions with strict compliance, data residency, or security requirements",
            "Auto-scale up to 100 instances within dedicated environment",
            "Fully isolated network; private environment; advanced DDoS protection; required for regulated industries deploying AI",
            "$680+"
          ]
        ]
      },
      "comparisonTableCaption": "Comparison of Azure App Service hosting plans for AI application deployment scenarios",
      "images": [],
      "imageSuggestions": [
        "Screenshot of the Azure portal Create App Service Plan page with the Standard tier selected, highlighting the pricing tier dropdown, instance count slider, and estimated monthly cost calculator for a production AI workload"
      ],
      "videoSuggestions": [
        "2-minute video demonstrating how to evaluate expected AI service call volume, response time requirements, and budget constraints to choose between Standard and Premium tiers for a production recommendation engine"
      ],
      "interactiveSuggestions": [
        "Interactive calculator where learners input expected daily request volume, target response time, budget range, and compliance requirements to receive a recommended App Service tier with cost justification and scaling configuration"
      ],
      "visualAccessibilityNotes": "Ensure the decision tree diagram clearly describes each tier's characteristics and cost range. The comparison table should use proper table markup with headers to enable screen readers to navigate rows and columns effectively.",
      "codeSamples": [],
      "exercise": null,
      "knowledgeCheck": null,
      "resources": [
        {
          "title": "App Service pricing",
          "url": "https://azure.microsoft.com/pricing/details/app-service/",
          "note": "Official pricing calculator for all hosting plan tiers"
        },
        {
          "title": "App Service auto-scale documentation",
          "url": "https://learn.microsoft.com/azure/app-service/manage-scale-up",
          "note": "Detailed guidance on configuring auto-scaling rules and metrics"
        }
      ],
      "estimatedDurationMinutes": 10
    },
    {
      "id": "configure-ai-service-integration",
      "title": "Configure secure integration with Azure AI services",
      "type": "concept",
      "narrativeMd": "Now that you understand how hosting plan selection affects your AI application's performance and cost, the next critical step involves configuring secure connectivity to Azure OpenAI Service and Azure AI Services. Unlike traditional backend databases that reside within your virtual network boundary, AI services expose REST APIs over HTTPS endpoints that your application calls remotely. This distributed architecture introduces credential management challenges—your application needs API keys or access tokens to authenticate each request, creating a security risk if those credentials leak through configuration files, source control commits, or application logs. At the same time, your compliance team requires audit trails showing who accessed AI services and when, while your operations team needs visibility into configuration drift across multiple environments.\n\n## Application settings for service endpoints\n\nAzure App Service provides application settings that inject configuration values as environment variables your code can access at runtime. When you create an application setting named `OPENAI_ENDPOINT` with value `https://your-openai-resource.openai.azure.com`, your Python, C#, or JavaScript code reads this value using standard environment variable methods, eliminating hardcoded URLs that differ between development, staging, and production environments. This pattern becomes especially valuable when your development team deploys the same application code to multiple App Service instances pointing to different Azure OpenAI deployments—changing the endpoint requires updating a single application setting rather than modifying and redeploying code.\n\nBuilding on this foundation, you face a critical decision about how to handle API keys required for AI service authentication. With application settings, you can store the Azure OpenAI API key directly as an environment variable, giving your code immediate access without additional configuration. However, this approach exposes the key in plaintext to anyone with Contributor access to your App Service resource in the Azure portal. Your security team typically flags this as a compliance risk, especially for production workloads handling customer data or regulated content. Consider what happens when a developer with legitimate App Service access takes a screenshot during troubleshooting—that image might inadvertently capture your API key, creating an exposure path your security team must investigate during audit reviews.\n\n## Key Vault references for secret protection\n\nAzure Key Vault addresses this credential exposure risk by providing centralized secret storage with detailed access logging and automatic rotation capabilities. Instead of storing your Azure OpenAI API key directly in application settings, you store it as a Key Vault secret, then configure an application setting with a special reference syntax: `@Microsoft.KeyVault(SecretUri=https://your-keyvault.vault.azure.net/secrets/openai-api-key/...)`. When your App Service starts, it automatically retrieves the secret value from Key Vault using its managed identity, injecting the decrypted key as an environment variable your application code can read. This becomes powerful when combined with Key Vault's access policies—your security team grants your App Service's managed identity `Get Secret` permissions, while denying individual developers direct access to production secrets, ensuring that only the running application can retrieve sensitive credentials.\n\nWith this approach, your operations team gains audit visibility through Key Vault's diagnostic logs, which record every secret access attempt including the identity, timestamp, and success status. When your compliance team asks who accessed the production Azure OpenAI API key during a specific date range, you query Key Vault logs rather than searching application logs or interviewing team members. At the same time, Key Vault's secret rotation capabilities allow your security team to update API keys on a scheduled basis—say, every 90 days—by updating the Key Vault secret value without modifying application settings or redeploying code. Your App Service automatically retrieves the new secret value on the next application restart, maintaining zero-downtime credential rotation.\n\n## Network security with private endpoints\n\nFor enterprise AI solutions with strict data residency or compliance requirements, securing the API endpoint itself becomes as important as protecting credentials. Azure Private Link enables you to expose Azure OpenAI Service and Azure AI Services through private IP addresses within your virtual network, ensuring that all traffic between your App Service and AI services traverses Microsoft's backbone network rather than the public internet. This becomes critical in regulated industries like healthcare or financial services, where compliance frameworks mandate that AI-generated content containing customer data never exits your controlled network boundary.\n\nConfiguring private endpoints requires VNet integration on your App Service, which is available only in Premium and Isolated hosting tiers. Your network team creates a subnet within your virtual network, then provisions a private endpoint for your Azure OpenAI resource pointing to that subnet. Once configured, your App Service resolves the Azure OpenAI FQDN (for example, `your-openai.openai.azure.com`) to a private IP address (for example, `10.1.2.4`) using Azure Private DNS zones. This setup eliminates public internet exposure of your AI services, satisfying your security team's zero-trust network requirements while introducing operational overhead—your network team must manage DNS configurations, subnet routing, and firewall rules that traditional public endpoint deployments avoid.\n\n## Choosing the right configuration method\n\nDeciding between application settings with plaintext keys, Key Vault references, and private endpoints depends on your specific security, compliance, and operational constraints. For development environments where speed matters more than security, storing API keys directly in application settings accelerates prototyping with minimal setup time—your development team can validate AI service integration in under five minutes. However, this convenience becomes a liability in production, where credential exposure risks and audit requirements demand Key Vault integration.\n\nWhen your application handles non-sensitive data and your compliance team accepts public endpoint access, Key Vault references provide the optimal balance between security and operational simplicity. Your security team gains centralized secret management and rotation, your operations team accesses detailed audit logs, and your development team works with familiar environment variable patterns. This configuration typically adds 15-20 minutes to initial setup but eliminates ongoing credential management overhead that manual rotation would require.\n\nFor regulated workloads or enterprise scenarios with strict network isolation requirements, private endpoints become mandatory despite their complexity. Your network team invests 45-60 minutes configuring VNets, subnets, and DNS zones, then maintains these resources alongside your application infrastructure. This operational cost—measured in both initial setup time and ongoing management—justifies itself only when compliance frameworks or security policies prohibit public internet access to AI services. With these trade-offs understood, you can select the configuration method that aligns with your security requirements, compliance obligations, and team capacity, knowing that Azure App Service supports migration paths as your needs evolve.",
      "learningObjectives": [],
      "prerequisites": [],
      "diagramMermaid": "sequenceDiagram\n    participant User\n    participant AppService as Azure App Service\n    participant KeyVault as Azure Key Vault\n    participant OpenAI as Azure OpenAI Service\n    participant AIServices as Azure AI Services\n    participant AppInsights as Application Insights\n    \n    User->>AppService: HTTPS Request (product query)\n    AppService->>KeyVault: Retrieve OpenAI API Key<br/>(using Key Vault reference)\n    KeyVault-->>AppService: Return Secret Value\n    AppService->>OpenAI: Generate Recommendations<br/>(with API key)\n    OpenAI-->>AppService: AI Response (product list)\n    AppService->>AIServices: Analyze Product Images<br/>(with managed identity)\n    AIServices-->>AppService: Image Analysis Results\n    AppService->>AppInsights: Log Telemetry<br/>(latency, tokens used)\n    AppService-->>User: Combined Response<br/>(recommendations + images)\n    AppInsights->>AppInsights: Track AI Service Dependencies",
      "diagramCaption": "Secure integration sequence showing Azure App Service retrieving secrets from Key Vault and calling AI services with telemetry logging",
      "diagramAltText": "Sequence diagram illustrating a secure AI application request flow. A user sends an HTTPS request for product recommendations to Azure App Service. App Service retrieves the Azure OpenAI API key from Azure Key Vault using a Key Vault reference, then calls Azure OpenAI Service to generate product recommendations. Next, App Service uses managed identity to call Azure AI Services for image analysis. App Service logs telemetry including latency and token usage to Application Insights, then returns the combined AI-powered response to the user. Application Insights tracks all AI service dependencies throughout the flow.",
      "comparisonTable": {
        "headers": [
          "Configuration Method",
          "Security Level",
          "Use Case",
          "Operations Overhead",
          "Setup Time"
        ],
        "rows": [
          [
            "Application Settings (plain text API keys)",
            "Low - Secrets visible in portal; not recommended for production AI workloads",
            "Quick prototyping or development environments only; acceptable risk for non-production data",
            "Minimal - no secret rotation infrastructure needed",
            "5 minutes"
          ],
          [
            "Application Settings with Key Vault references",
            "High - Secrets stored in Key Vault; access logged; supports automatic rotation",
            "Production AI applications requiring secret management; compliance scenarios needing audit trails for API key access",
            "Moderate - requires Key Vault setup and access policy configuration; security team owns rotation schedule",
            "15-20 minutes"
          ],
          [
            "Managed Identity (no secrets)",
            "Highest - No secrets stored anywhere; Azure AD handles authentication; eliminates credential leakage risk",
            "Production AI applications where supported (Azure OpenAI, Azure AI Services); preferred method for security-sensitive workloads",
            "Low - no secret rotation; security team assigns RBAC roles; operations team monitors identity assignment drift",
            "10 minutes"
          ],
          [
            "Private Endpoints with VNet integration",
            "Highest - Traffic never leaves Microsoft backbone; required for regulatory compliance (HIPAA, PCI-DSS)",
            "Enterprise AI solutions with strict data residency or network isolation requirements; financial services, healthcare",
            "High - network team configures VNets, subnets, DNS; ongoing monitoring of private link connectivity",
            "45-60 minutes"
          ]
        ]
      },
      "comparisonTableCaption": "Comparison of secure configuration methods for integrating AI services with Azure App Service, including security level, use cases, and operational considerations",
      "images": [],
      "imageSuggestions": [
        "Screenshot of Azure App Service Configuration blade showing an application setting named OPENAI_API_KEY with a Key Vault reference value (@Microsoft.KeyVault(SecretUri=https://...)) and a green checkmark indicating successful secret retrieval",
        "Screenshot showing the Networking blade of an App Service with VNet Integration enabled and a private endpoint connection listed for Azure OpenAI Service with status 'Approved'"
      ],
      "videoSuggestions": [],
      "interactiveSuggestions": [
        "Interactive module presenting three AI application scenarios (development prototype, production SaaS app, healthcare patient portal) where learners select the appropriate configuration method and explain security or compliance justifications for their choice"
      ],
      "visualAccessibilityNotes": "Describe each step in the sequence diagram with emphasis on the security mechanisms: Key Vault reference retrieval, managed identity authentication, and telemetry logging. Ensure comparison table relationships between security level and use case are clear for assistive technology.",
      "codeSamples": [],
      "exercise": null,
      "knowledgeCheck": null,
      "resources": [
        {
          "title": "Key Vault references in App Service",
          "url": "https://learn.microsoft.com/azure/app-service/app-service-key-vault-references",
          "note": "Detailed guide on configuring Key Vault references for secret management"
        },
        {
          "title": "Private endpoints for Azure OpenAI",
          "url": "https://learn.microsoft.com/azure/ai-services/openai/how-to/private-link",
          "note": "Step-by-step instructions for configuring private network access to AI services"
        }
      ],
      "estimatedDurationMinutes": 12
    },
    {
      "id": "implement-secure-authentication",
      "title": "Implement managed identity authentication for AI services",
      "type": "concept",
      "narrativeMd": "While Key Vault references eliminate plaintext credentials in application settings, they still require managing API keys—your security team must rotate secrets periodically, your operations team must monitor key expiration dates, and your development team must update Key Vault references when keys change. Managed identities offer a fundamentally different approach by removing secrets entirely from the authentication equation. Instead of your application proving its identity with a password-like API key, Azure Active Directory issues short-lived access tokens automatically based on the application's assigned identity, creating a zero-credential authentication model that satisfies the most stringent security requirements.\n\n## Understanding managed identity types\n\nAzure App Service supports two managed identity types: system-assigned and user-assigned. When you enable a system-assigned managed identity, Azure creates an identity resource tied exclusively to your App Service instance—this identity exists only as long as the App Service exists, and deleting the App Service automatically removes the identity. This one-to-one lifecycle coupling simplifies identity management for single-application scenarios where your recommendation engine has dedicated Azure OpenAI and Azure AI Services resources. Your development team enables system-assigned identity during App Service creation, then your security team grants that identity the necessary RBAC roles, establishing authentication without ever handling credentials.\n\nUser-assigned managed identities, by contrast, exist as independent Azure resources that outlive any single App Service instance. Consider what happens when you operate ten microservices that all need access to the same shared Azure OpenAI deployment—creating ten system-assigned identities would require your security team to assign RBAC roles ten times, once per identity. With a user-assigned identity, you create one identity resource, grant it the required permissions once, then assign that same identity to all ten App Services. This approach reduces administrative overhead significantly in multi-application environments, while giving your security team centralized visibility into which identity accesses which AI services.\n\n## Assigning RBAC roles for AI service access\n\nOnce your App Service has a managed identity—whether system-assigned or user-assigned—that identity needs permissions to call Azure OpenAI Service and Azure AI Services. Azure role-based access control (RBAC) governs these permissions through built-in roles designed for AI service scenarios. The **Cognitive Services OpenAI User** role grants permissions to submit inference requests to Azure OpenAI deployments, read model information, and list available models, but denies management operations like creating new deployments or modifying rate limits. This least-privilege approach ensures your application can generate AI-powered recommendations without gaining administrative control over the OpenAI resource itself.\n\nSimilarly, the **Cognitive Services User** role provides read and inference permissions for Azure AI Services resources like Computer Vision, Speech, or Language services. When your product recommendation engine needs to analyze product images using Azure AI Vision, you assign the Cognitive Services User role to your App Service's managed identity at the scope of the AI Vision resource. Your security team validates these assignments through the Azure portal's Access Control (IAM) blade, verifying that each identity has only the permissions required for its job function and no more.\n\nWith these role assignments in place, your application authenticates to AI services without retrieving secrets from Key Vault or reading API keys from environment variables. Instead, your code uses Azure SDK libraries that automatically request access tokens from Azure Active Directory using the App Service's managed identity. For example, Python code using the `azure-identity` library calls `DefaultAzureCredential()`, which detects the managed identity environment and obtains tokens transparently. This becomes especially powerful during credential rotation—because no secrets exist to rotate, your security team eliminates the operational overhead of scheduled key updates while maintaining continuous audit trails through Azure AD sign-in logs.\n\n## When to use each identity type\n\nChoosing between system-assigned and user-assigned identities depends on your application architecture and operational model. System-assigned identities suit scenarios where your App Service has a one-to-one relationship with AI service resources—for instance, a dedicated recommendation engine that calls only its own Azure OpenAI deployment and no other services. This approach minimizes identity sprawl, reducing the total number of identities your security team must audit. At the same time, deleting the App Service automatically cleans up the identity, preventing orphaned identities that consume management overhead without serving active applications.\n\nUser-assigned identities become valuable when multiple applications share AI service resources or when you need identity persistence across App Service lifecycle events. In microservices architectures where five different services call the same Azure OpenAI deployment, assigning a single user-assigned identity to all five App Services reduces RBAC management from five separate role assignments to one. This centralization also simplifies security reviews—your compliance team can audit a single identity's permissions rather than tracking permissions across five system-assigned identities. However, this sharing introduces coordination requirements: your security team must carefully document which applications use each user-assigned identity, and your operations team must validate that deleting one App Service doesn't inadvertently remove identity assignments needed by other running applications.\n\n## Updating application code for managed identity\n\nTransitioning from API key authentication to managed identity requires minimal code changes when using Azure SDK libraries. Traditional code reads an API key from environment variables, then passes that key explicitly when constructing AI service clients. With managed identity, you replace the explicit key with a credential object that handles token acquisition automatically. For Azure OpenAI Service, this means replacing `AzureOpenAI(api_key=os.environ['OPENAI_API_KEY'])` with `AzureOpenAI(azure_ad_token_provider=get_bearer_token_provider(DefaultAzureCredential(), 'https://cognitiveservices.azure.com/.default'))` in Python, or equivalent patterns in C# and JavaScript.\n\nThis code pattern works identically across development, staging, and production environments because `DefaultAzureCredential` automatically detects the available authentication method—using your personal Azure CLI credentials during local development, then switching to managed identity when running in App Service. Your development team benefits from this consistency, writing authentication code once that works everywhere without environment-specific conditionals. At the same time, your security team gains confidence that production deployments never rely on developer credentials or hardcoded keys, even temporarily.\n\n## Security and operations team responsibilities\n\nManaged identity authentication shifts security and operations team workflows from credential lifecycle management to identity and access governance. Your security team's primary responsibility becomes reviewing and approving RBAC role assignments—when a new AI application requests access to Azure OpenAI Service, your team validates the business justification, assigns the minimum necessary role (typically Cognitive Services OpenAI User), and documents the assignment in your identity governance system. This review happens once during initial deployment rather than continuously during the application's lifetime, reducing operational toil while maintaining security rigor.\n\nYour operations team monitors managed identity health through Azure AD sign-in logs and App Service diagnostic logs. When Application Insights shows authentication errors calling Azure OpenAI Service, your team checks whether the managed identity still has the required role assignment—configuration drift from accidental permission removal or resource moves can break authentication even when code remains unchanged. With proper monitoring in place, these issues surface through alerts rather than user-reported failures, maintaining SLA commitments while your team investigates root causes. By eliminating secret rotation windows and credential expiration dates, managed identity authentication reduces the number of planned maintenance events your operations team must coordinate, freeing capacity for proactive optimization work.",
      "learningObjectives": [],
      "prerequisites": [],
      "diagramMermaid": "graph TB\n    subgraph App Service Environment\n        A[Azure App Service<br/>Product Recommendation App]\n        A1[System-assigned Identity<br/>Lifecycle tied to App Service]\n        A2[User-assigned Identity<br/>Shared across resources]\n        A -->|Enables| A1\n        A -->|Assigns| A2\n    end\n    \n    subgraph Azure Active Directory\n        B[Azure AD Identity Management]\n        A1 -->|Registers with| B\n        A2 -->|Registers with| B\n    end\n    \n    subgraph AI Services\n        C[Azure OpenAI Service]\n        D[Azure AI Vision]\n        E[Azure Key Vault]\n    end\n    \n    subgraph RBAC Assignments\n        F[Cognitive Services OpenAI User]\n        G[Cognitive Services User]\n        H[Key Vault Secrets User]\n    end\n    \n    B -->|RBAC Role Assignment| F\n    B -->|RBAC Role Assignment| G\n    B -->|RBAC Role Assignment| H\n    F -->|Grants Access to| C\n    G -->|Grants Access to| D\n    H -->|Grants Access to| E\n    \n    A -->|Authenticates to| C\n    A -->|Authenticates to| D\n    A -->|Authenticates to| E",
      "diagramCaption": "Managed identity authentication architecture showing Azure App Service using system-assigned or user-assigned identities with RBAC role assignments to access AI services without storing credentials",
      "diagramAltText": "Architecture diagram showing Azure App Service with both system-assigned and user-assigned managed identities. System-assigned identity lifecycle is tied to the App Service resource, while user-assigned identity can be shared across multiple resources. Both identity types register with Azure Active Directory. Azure AD grants RBAC role assignments: Cognitive Services OpenAI User for Azure OpenAI Service access, Cognitive Services User for Azure AI Vision access, and Key Vault Secrets User for Azure Key Vault access. The diagram emphasizes that App Service authenticates to all three services using managed identity, eliminating the need to store API keys or connection strings in application code or configuration.",
      "comparisonTable": {
        "headers": [
          "Managed Identity Type",
          "Lifecycle",
          "Resource Sharing",
          "Best Use Case",
          "Team Responsibility"
        ],
        "rows": [
          [
            "System-assigned",
            "Created and deleted with the App Service resource; cannot exist independently",
            "No - unique to one App Service instance; creates 1:1 relationship between identity and resource",
            "Single AI application with dedicated resources; simplifies identity management when App Service and AI services have matching lifecycles",
            "Development team enables during App Service creation; security team assigns RBAC roles; operations team monitors in resource activity logs"
          ],
          [
            "User-assigned",
            "Independent managed resource; persists after App Service deletion; can be pre-created and reused",
            "Yes - same identity can authenticate multiple App Services, Azure Functions, or VMs to shared AI services",
            "Multi-application environment sharing Azure OpenAI deployment; microservices architecture where multiple services need identical AI service permissions; simplifies RBAC when 10+ apps use the same backend",
            "Security team creates and manages identity lifecycle; development team assigns to App Services; operations team audits which resources use each identity"
          ]
        ]
      },
      "comparisonTableCaption": "Comparison of system-assigned and user-assigned managed identities for AI service authentication, including lifecycle, sharing capabilities, and operational responsibilities",
      "images": [],
      "imageSuggestions": [
        "Screenshot of Azure App Service Identity blade with System assigned tab selected, showing the Status toggle set to On with a green indicator and the Object (principal) ID displayed below",
        "Screenshot of Azure OpenAI Service Access Control (IAM) blade showing the Add role assignment wizard with Cognitive Services OpenAI User role selected and a managed identity listed in the Members section with a checkmark",
        "Code snippet showing Python code using Azure Identity library's DefaultAzureCredential to authenticate to Azure OpenAI Service without hardcoded keys, with comments explaining how it automatically tries managed identity authentication first"
      ],
      "videoSuggestions": [
        "4-minute walkthrough demonstrating how to enable system-assigned managed identity in the Azure portal, navigate to Azure OpenAI Service IAM, assign the Cognitive Services OpenAI User role, and update Python application code to use DefaultAzureCredential instead of API keys"
      ],
      "interactiveSuggestions": [],
      "visualAccessibilityNotes": "Clearly describe the flow from App Service through Azure AD to each AI service, emphasizing RBAC role names and their specific permissions. Ensure the architecture diagram conveys the elimination of stored credentials and the automated authentication process for screen reader users.",
      "codeSamples": [],
      "exercise": null,
      "knowledgeCheck": null,
      "resources": [
        {
          "title": "Managed identities for App Service",
          "url": "https://learn.microsoft.com/azure/app-service/overview-managed-identity",
          "note": "Comprehensive guide on enabling and using managed identities in Azure App Service"
        },
        {
          "title": "Azure OpenAI authentication with managed identity",
          "url": "https://learn.microsoft.com/azure/ai-services/openai/how-to/managed-identity",
          "note": "Step-by-step instructions for configuring managed identity authentication to Azure OpenAI Service"
        }
      ],
      "estimatedDurationMinutes": 11
    },
    {
      "id": "exercise-deploy-ai-app",
      "title": "Exercise: Deploy and configure an AI-powered web application",
      "type": "exercise",
      "narrativeMd": "Your retail company needs to deploy a product recommendation engine to production. As the cloud engineer, you'll deploy an Azure App Service instance, configure it to integrate with Azure OpenAI Service using managed identity authentication, and validate that the application generates AI-powered recommendations successfully. This exercise demonstrates the end-to-end deployment workflow you'll use when moving AI applications from development to production environments.",
      "learningObjectives": [],
      "prerequisites": [],
      "diagramMermaid": null,
      "diagramCaption": null,
      "diagramAltText": null,
      "comparisonTable": null,
      "comparisonTableCaption": null,
      "images": [],
      "imageSuggestions": [
        "Screenshot of the running product recommendation web application showing an input form where users can enter a product category, a Submit button, and a response section displaying AI-generated product recommendations from Azure OpenAI Service with product names, descriptions, and confidence scores",
        "Screenshot of the Application Insights Performance blade showing a transaction timeline with dependencies highlighted, specifically showing calls to Azure OpenAI Service with response times, success rates, and token usage metrics visible in the details pane",
        "Screenshot of the Azure OpenAI Service Access Control (IAM) blade with the Role assignments tab selected, filtering by the App Service's managed identity name, showing the Cognitive Services OpenAI User role assigned with a green checkmark indicating active permission"
      ],
      "videoSuggestions": [],
      "interactiveSuggestions": [
        "Interactive step-by-step checklist that learners complete as they progress through the exercise, including checkboxes for: App Service created with Standard tier, system-assigned managed identity enabled and Object ID copied, RBAC role assigned to Azure OpenAI, application settings configured with OpenAI endpoint, code deployed successfully, test request returns AI recommendations, Application Insights shows dependency calls, and all resources deleted during cleanup"
      ],
      "visualAccessibilityNotes": "Provide descriptive alt text for all screenshots showing the specific UI elements learners need to locate and interact with, including button labels, field names, and status indicators.",
      "codeSamples": [],
      "exercise": {
        "scenario": "You work as a cloud engineer for Contoso Retail. The company has developed a product recommendation engine that uses Azure OpenAI Service to generate personalized suggestions based on customer browsing history. Your task is to deploy this application to Azure App Service with Standard tier hosting, configure managed identity authentication to eliminate API key management, and validate that the production deployment successfully integrates with Azure OpenAI Service. The application code is available in a GitHub repository, and you need to ensure the deployment follows security best practices by avoiding hardcoded credentials.",
        "prerequisites": [
          "Active Azure subscription with Contributor access to create resources",
          "Azure OpenAI Service resource already deployed with a GPT-4 model deployment named 'gpt-4'",
          "Basic familiarity with the Azure portal navigation",
          "Completion of previous concept units in this module"
        ],
        "jobSkills": [
          "Azure App Service deployment and configuration",
          "Managed identity authentication implementation",
          "RBAC role assignment for AI service access",
          "Application monitoring with Application Insights"
        ],
        "estimatedMinutes": 15,
        "steps": [
          {
            "action": "Sign in to the Azure portal at https://portal.azure.com and create a new resource group named rg-contoso-recommendations in the East US region to contain all exercise resources",
            "selector": null,
            "value": null,
            "expectedResult": "Resource group rg-contoso-recommendations appears in the resource groups list with status Active and location East US",
            "screenshotDescription": "Azure portal showing the resource groups blade with rg-contoso-recommendations highlighted in the list"
          },
          {
            "action": "Navigate to App Services and create a new web app named contoso-recommendations-[yourname] using the .NET 8 (LTS) runtime stack, Standard S1 pricing tier, and placing it in the rg-contoso-recommendations resource group",
            "selector": null,
            "value": null,
            "expectedResult": "App Service deployment completes successfully with a unique URL displayed (for example, https://contoso-recommendations-yourname.azurewebsites.net) and status showing as Running in the overview page",
            "screenshotDescription": null
          },
          {
            "action": "Navigate to the Identity blade of your App Service, select the System assigned tab, and toggle Status to On to enable system-assigned managed identity, then save the configuration and copy the Object (principal) ID for later use",
            "selector": null,
            "value": null,
            "expectedResult": "System assigned managed identity Status shows On with a green indicator, and an Object (principal) ID is displayed (for example, a 32-character GUID like 12345678-1234-1234-1234-123456789abc)",
            "screenshotDescription": "App Service Identity blade showing system-assigned identity enabled with Object ID visible"
          },
          {
            "action": "Navigate to your existing Azure OpenAI Service resource, open the Access Control (IAM) blade, select Add role assignment, choose the Cognitive Services OpenAI User role, and assign it to the managed identity you just created by searching for your App Service name in the Members section",
            "selector": null,
            "value": null,
            "expectedResult": "Role assignment completes successfully with a notification confirming that Cognitive Services OpenAI User role was assigned to your App Service's managed identity, visible in the Role assignments tab filtered by your managed identity",
            "screenshotDescription": "Azure OpenAI Service IAM blade showing the new role assignment with your App Service's managed identity listed as a member of Cognitive Services OpenAI User role"
          },
          {
            "action": "Return to your App Service, navigate to Configuration under Settings, add a new application setting named OPENAI_ENDPOINT with value https://[your-openai-resource-name].openai.azure.com (replace with your actual Azure OpenAI resource name), then save the configuration",
            "selector": null,
            "value": null,
            "expectedResult": "Application setting OPENAI_ENDPOINT appears in the configuration list with the correct endpoint URL, and the App Service automatically restarts to apply the new setting",
            "screenshotDescription": null
          },
          {
            "action": "Navigate to the Deployment Center blade, select GitHub as the source, authenticate with your GitHub account if prompted, choose the repository contoso-samples/product-recommendation-engine (fictional example), select the main branch, and save to enable continuous deployment",
            "selector": null,
            "value": null,
            "expectedResult": "Deployment workflow runs automatically and completes with success status, showing the latest commit deployed and application logs confirming successful startup",
            "screenshotDescription": "Deployment Center showing GitHub source connected with successful deployment status and commit details"
          },
          {
            "action": "Navigate to your App Service URL (https://contoso-recommendations-yourname.azurewebsites.net), enter 'outdoor gear' in the product category input field, and select Submit to test the recommendation engine",
            "selector": null,
            "value": null,
            "expectedResult": "The page displays AI-generated product recommendations including items like 'Hiking Backpack', 'Trail Running Shoes', and 'Portable Water Filter' with descriptions and confidence scores, confirming successful integration with Azure OpenAI Service using managed identity authentication",
            "screenshotDescription": "Web application interface showing the recommendation results with multiple product suggestions displayed"
          },
          {
            "action": "Navigate to Application Insights linked to your App Service, open the Performance blade, view the transaction timeline, and verify that calls to Azure OpenAI Service appear as dependencies with response times and success rates",
            "selector": null,
            "value": null,
            "expectedResult": "Application Insights Performance view shows Azure OpenAI Service listed in the dependencies section with average response time under 2 seconds, 100% success rate, and token usage metrics visible in the details pane",
            "screenshotDescription": "Application Insights Performance blade showing OpenAI Service dependency metrics with response times and success indicators"
          }
        ],
        "successCriteria": [
          "App Service deployed with Standard S1 tier and status Running",
          "System-assigned managed identity enabled with Object ID visible",
          "Cognitive Services OpenAI User role assigned to the managed identity",
          "Application setting OPENAI_ENDPOINT configured correctly",
          "Web application returns AI-generated recommendations without authentication errors",
          "Application Insights tracks Azure OpenAI Service calls as dependencies"
        ],
        "cleanup": [
          "Navigate to the resource groups blade in the Azure portal and select rg-contoso-recommendations",
          "Select Delete resource group, type the resource group name to confirm, and select Delete to remove all exercise resources including App Service, Application Insights, and role assignments",
          "Verify in the Notifications pane that resource group deletion completed successfully to avoid ongoing charges"
        ],
        "commonIssues": [
          {
            "issue": "App Service name already exists error during creation",
            "solution": "Append a unique suffix like your initials and today's date to the app name (for example, contoso-recommendations-jd0115) since App Service names must be globally unique across Azure"
          },
          {
            "issue": "Recommendation request returns 403 Forbidden error",
            "solution": "Verify that the RBAC role assignment completed successfully by checking the Azure OpenAI Service IAM blade—role propagation can take 2-5 minutes, so wait briefly then retry the request"
          },
          {
            "issue": "Application Insights doesn't show OpenAI dependencies",
            "solution": "Ensure the Application Insights connection string is configured in App Service application settings and that you've made at least one recommendation request after deployment—telemetry can take 2-3 minutes to appear in queries"
          }
        ]
      },
      "knowledgeCheck": null,
      "resources": [
        {
          "title": "Deploy code to App Service",
          "url": "https://learn.microsoft.com/azure/app-service/deploy-github-actions",
          "note": "Detailed guide on configuring GitHub Actions deployment for App Service"
        }
      ],
      "estimatedDurationMinutes": 15
    },
    {
      "id": "knowledge-check",
      "title": "Knowledge check",
      "type": "knowledge-check",
      "narrativeMd": "Test your understanding of deploying and managing AI applications on Azure App Service by applying the concepts you learned to realistic scenarios. Each question presents a situation you might encounter when configuring hosting plans, securing AI service integration, or troubleshooting production deployments.",
      "learningObjectives": [],
      "prerequisites": [],
      "diagramMermaid": null,
      "diagramCaption": null,
      "diagramAltText": null,
      "comparisonTable": null,
      "comparisonTableCaption": null,
      "images": [],
      "imageSuggestions": [],
      "videoSuggestions": [],
      "interactiveSuggestions": [],
      "visualAccessibilityNotes": null,
      "codeSamples": [],
      "exercise": null,
      "knowledgeCheck": {
        "narrativeMd": "Test your understanding of deploying and managing AI applications on Azure App Service by applying the concepts you learned to realistic scenarios. Each question presents a situation you might encounter when configuring hosting plans, securing AI service integration, or troubleshooting production deployments.",
        "questions": [
          {
            "questionText": "Your company deploys a customer support chatbot that uses Azure OpenAI Service to generate responses. During business hours (8 AM - 6 PM), the application receives an average of 25,000 requests per day with spikes to 40,000 requests during product launches. Your target response time is under 2 seconds, and your compliance team requires all traffic between the chatbot and Azure OpenAI to remain within your corporate network. Which Azure App Service hosting plan best meets these requirements?",
            "options": [
              "Standard S2 tier with auto-scaling enabled up to 10 instances based on CPU threshold of 70%",
              "Premium P1v2 tier with VNet integration and auto-scaling enabled up to 20 instances based on HTTP queue length",
              "Basic B2 tier with manual scaling to 3 instances and scheduled scale-up during business hours"
            ],
            "correctIndex": 1,
            "rationale": "Premium P1v2 tier is correct because it provides VNet integration required to keep traffic on the corporate network (satisfying the compliance requirement), supports auto-scaling up to 30 instances (sufficient for the 40,000 request spike), and offers the performance needed for sub-2-second response times. Standard tier (option 1) lacks VNet integration for private network connectivity, failing the compliance requirement. Basic tier (option 3) doesn't support auto-scaling and would require manual intervention during traffic spikes, making it unsuitable for production workloads with variable demand."
          },
          {
            "questionText": "You're deploying a product recommendation engine to Azure App Service that integrates with Azure OpenAI Service. Your security team prohibits storing API keys in application configuration and requires detailed audit logs of all credential access attempts. Your operations team wants to minimize credential rotation overhead. Which authentication approach best addresses these requirements?",
            "options": [
              "Store the Azure OpenAI API key in Azure Key Vault and use a Key Vault reference in App Service application settings",
              "Enable system-assigned managed identity for the App Service and assign the Cognitive Services OpenAI User role to the identity",
              "Store the Azure OpenAI API key directly in App Service application settings encrypted at rest"
            ],
            "correctIndex": 1,
            "rationale": "System-assigned managed identity (option 2) is correct because it completely eliminates API keys (satisfying the security team's prohibition), provides audit logging through Azure AD sign-in logs (meeting the audit requirement), and requires no credential rotation (minimizing operations overhead). Key Vault reference (option 1) improves security over plaintext keys but still requires managing and rotating API keys, creating ongoing operations work. Storing encrypted keys in application settings (option 3) violates the security team's policy against storing keys in configuration and provides no audit logging of access attempts."
          },
          {
            "questionText": "Your AI application deployed to Azure App Service successfully integrates with Azure OpenAI Service in your development environment, but after deploying to production, all recommendation requests return HTTP 500 errors. Application Insights logs show 'Failed to acquire token' errors when calling Azure OpenAI. The production App Service uses a system-assigned managed identity, and you verified the OPENAI_ENDPOINT application setting is configured correctly. What is the most likely cause and solution?",
            "options": [
              "The managed identity lacks the required RBAC role assignment; assign the Cognitive Services OpenAI User role to the App Service's managed identity at the Azure OpenAI resource scope",
              "The Azure OpenAI endpoint URL is incorrect; update the OPENAI_ENDPOINT application setting to use the private endpoint address instead of the public FQDN",
              "Application Insights is blocking the OpenAI API calls; disable Application Insights monitoring temporarily to isolate the authentication issue"
            ],
            "correctIndex": 0,
            "rationale": "Missing RBAC role assignment (option 1) is correct because 'Failed to acquire token' specifically indicates the managed identity exists but lacks permissions to access Azure OpenAI Service—assigning Cognitive Services OpenAI User role resolves the authentication failure. Incorrect endpoint URL (option 2) would produce connection errors or DNS resolution failures, not token acquisition errors, and the question states the endpoint setting was verified. Disabling Application Insights (option 3) would eliminate visibility into the problem without addressing the root cause, and Application Insights doesn't block API calls—it only observes them."
          }
        ]
      },
      "resources": [],
      "estimatedDurationMinutes": 3
    },
    {
      "id": "summary",
      "title": "Summary",
      "type": "summary",
      "narrativeMd": "You successfully deployed Contoso Retail's product recommendation engine to Azure App Service, eliminating the manual scaling and security challenges that plagued the initial launch. By selecting Standard tier hosting with auto-scaling triggered by HTTP queue length, you ensured the application automatically adapts to traffic spikes without manual intervention from your operations team. Implementing managed identity authentication removed API key management overhead, satisfying your security team's zero-trust requirements while eliminating credential rotation tasks. Application Insights now provides visibility into Azure OpenAI Service call patterns, token consumption, and response times, giving your team the data needed to optimize both performance and costs.\n\n## Key takeaways\n\nThroughout this module, you learned job-critical skills for deploying production AI applications:\n\n- **Hosting plan selection**: Evaluate expected request volume, response time requirements, and compliance constraints to choose between Basic (development/testing), Standard (production with moderate traffic), Premium (high-volume with private networking), or Isolated (enterprise compliance) tiers, balancing performance against monthly costs that range from $55 to $680+.\n- **Secure AI service integration**: Configure Azure App Service to integrate Azure OpenAI Service and Azure AI Services using Key Vault references for secret protection or managed identity for zero-credential authentication, selecting the approach that aligns with your security policies and operational capacity.\n- **Managed identity authentication**: Enable system-assigned or user-assigned managed identities and assign Cognitive Services OpenAI User or Cognitive Services User RBAC roles to grant least-privilege access to AI services, eliminating API key storage and rotation requirements.\n- **Production monitoring**: Use Application Insights to track AI service dependencies, response times, success rates, and token consumption, providing your operations team with telemetry to diagnose performance issues and your finance team with data to optimize AI service costs.\n\nThese skills enable you to deploy AI applications that scale automatically, authenticate securely, and provide operational visibility—core requirements for maintaining SLA commitments while controlling costs in production environments.\n\n## Next steps\n\nBuild on your Azure App Service and AI integration knowledge with these recommended learning paths:\n\n- **Scale applications in Azure App Service**: Learn advanced auto-scaling strategies including custom metrics, scheduled scaling, and performance optimization techniques for high-traffic AI workloads.\n- **Implement Azure Container Apps for AI workloads**: Explore containerized deployment options for AI applications requiring microservices architecture or event-driven scaling patterns.\n- **Build CI/CD pipelines for AI applications with Azure DevOps**: Automate deployment workflows including model versioning, staged rollouts, and automated testing for AI-powered applications.\n- **Optimize costs for Azure AI services**: Discover cost management techniques including reserved capacity, commitment tiers, and usage analytics to reduce Azure OpenAI and Azure AI Services spending.",
      "learningObjectives": [],
      "prerequisites": [],
      "diagramMermaid": null,
      "diagramCaption": null,
      "diagramAltText": null,
      "comparisonTable": null,
      "comparisonTableCaption": null,
      "images": [],
      "imageSuggestions": [],
      "videoSuggestions": [],
      "interactiveSuggestions": [],
      "visualAccessibilityNotes": null,
      "codeSamples": [],
      "exercise": null,
      "knowledgeCheck": null,
      "resources": [
        {
          "title": "Azure App Service documentation",
          "url": "https://learn.microsoft.com/azure/app-service/",
          "note": "Comprehensive reference for App Service features, configuration, and best practices"
        },
        {
          "title": "Azure OpenAI Service documentation",
          "url": "https://learn.microsoft.com/azure/ai-services/openai/",
          "note": "Official documentation for deploying and using Azure OpenAI Service"
        },
        {
          "title": "Application Insights for App Service",
          "url": "https://learn.microsoft.com/azure/azure-monitor/app/azure-web-apps",
          "note": "Guide to configuring and using Application Insights monitoring for App Service applications"
        }
      ],
      "estimatedDurationMinutes": 2
    }
  ],
  "labReport": {
    "testRunId": "lab-1761842949638",
    "overallStatus": "Passed",
    "exerciseResults": [],
    "recommendations": []
  },
  "metadataOptimization": {
    "seo": {
      "title": "Deploy AI solutions with Azure App Service - Training | Microsoft Learn",
      "description": "Deploy and scale AI applications on Azure App Service. Integrate Azure OpenAI, configure managed identity authentication, and monitor intelligent solutions.",
      "keywords": [
        "Azure App Service AI deployment",
        "Azure OpenAI integration",
        "managed identity authentication",
        "AI application monitoring",
        "intelligent app hosting"
      ],
      "longTailKeywords": [
        "How to deploy AI applications with Azure App Service",
        "How to integrate Azure OpenAI Service with App Service",
        "How to configure managed identity for Azure AI services",
        "How to monitor AI workloads in Azure App Service",
        "How to scale intelligent applications on Azure"
      ],
      "schemaMarkup": {
        "@context": "https://schema.org",
        "@type": "Course",
        "name": "Deploy AI solutions with Azure App Service",
        "description": "Learn to deploy and scale AI-powered applications using Azure App Service. Configure hosting environments, integrate Azure AI services, implement authentication, and monitor production workloads for intelligent solutions.",
        "provider": {
          "@type": "Organization",
          "name": "Microsoft Learn"
        },
        "educationalLevel": "Intermediate",
        "timeRequired": "PT58M",
        "inLanguage": "en-US",
        "coursePrerequisites": [
          "Azure fundamentals",
          "RESTful API knowledge",
          "Programming experience"
        ],
        "teaches": [
          "Azure App Service deployment",
          "AI service integration",
          "Managed identity authentication",
          "Application monitoring"
        ]
      }
    },
    "taxonomy": {
      "products": [
        "Azure App Service",
        "Azure OpenAI",
        "Azure AI Services",
        "Azure Container Registry",
        "Azure Monitor"
      ],
      "roles": [
        "ai-engineer",
        "developer",
        "solution-architect"
      ],
      "skills": [
        "artificial-intelligence",
        "cloud-computing",
        "application-development",
        "security-configuration"
      ],
      "subjects": [
        "artificial-intelligence",
        "cloud-computing",
        "web-development"
      ],
      "level": "intermediate"
    },
    "relationships": {
      "prerequisites": [
        {
          "title": "Introduction to Azure App Service",
          "type": "module",
          "url": "https://learn.microsoft.com/training/modules/introduction-to-azure-app-service/",
          "note": "Foundational knowledge of Azure App Service hosting"
        },
        {
          "title": "Azure fundamentals",
          "type": "learning-path",
          "url": "https://learn.microsoft.com/training/paths/azure-fundamentals/",
          "note": "Core Azure platform understanding"
        },
        {
          "title": "Introduction to Azure OpenAI Service",
          "type": "module",
          "url": "https://learn.microsoft.com/training/modules/explore-azure-openai/",
          "note": "Understanding Azure OpenAI capabilities and use cases"
        },
        {
          "title": "Secure Azure solutions with managed identities",
          "type": "module",
          "url": "https://learn.microsoft.com/training/modules/authenticate-apps-with-managed-identities/",
          "note": "Foundation for credential-free authentication"
        }
      ],
      "nextModules": [
        {
          "title": "Implement Azure Container Apps for AI workloads",
          "type": "module",
          "note": "Containerization and microservices architecture for AI"
        },
        {
          "title": "Build CI/CD pipelines for Azure App Service",
          "type": "module",
          "url": "https://learn.microsoft.com/training/modules/create-release-pipeline/",
          "note": "Automated deployment strategies with deployment slots"
        },
        {
          "title": "Optimize costs for Azure AI services",
          "type": "module",
          "note": "Cost management and optimization for production AI workloads"
        },
        {
          "title": "Implement advanced monitoring with Application Insights",
          "type": "module",
          "url": "https://learn.microsoft.com/training/modules/monitor-app-performance/",
          "note": "Deep dive into telemetry, alerting, and diagnostics"
        },
        {
          "title": "Design resilient AI applications on Azure",
          "type": "learning-path",
          "note": "High availability, disaster recovery, and fault tolerance patterns"
        }
      ],
      "certifications": [
        {
          "name": "Microsoft Certified: Azure AI Engineer Associate",
          "examCode": "AI-102",
          "url": "https://learn.microsoft.com/certifications/azure-ai-engineer/",
          "alignment": "Covers AI solution deployment, security, and monitoring - directly aligned with Azure OpenAI and AI Services integration",
          "skillsMeasured": [
            "Implement and monitor AI solutions",
            "Integrate AI services with applications",
            "Secure AI solutions"
          ]
        },
        {
          "name": "Microsoft Certified: Azure Developer Associate",
          "examCode": "AZ-204",
          "url": "https://learn.microsoft.com/certifications/azure-developer/",
          "alignment": "Covers Azure App Service deployment, managed identity, and application monitoring",
          "skillsMeasured": [
            "Develop Azure compute solutions",
            "Implement Azure security",
            "Monitor, troubleshoot, and optimize solutions"
          ]
        },
        {
          "name": "Microsoft Certified: Azure Solutions Architect Expert",
          "examCode": "AZ-305",
          "url": "https://learn.microsoft.com/certifications/azure-solutions-architect/",
          "alignment": "Architecture decisions for AI application hosting, scaling, and security",
          "skillsMeasured": [
            "Design identity, governance, and monitoring solutions",
            "Design data storage solutions",
            "Design business continuity solutions"
          ]
        }
      ],
      "resources": [
        {
          "title": "Azure App Service documentation",
          "url": "https://learn.microsoft.com/azure/app-service/",
          "type": "official-docs",
          "note": "Comprehensive reference for App Service features and configuration"
        },
        {
          "title": "Azure OpenAI Service REST API reference",
          "url": "https://learn.microsoft.com/azure/ai-services/openai/reference",
          "type": "api-reference",
          "note": "API specifications for Azure OpenAI integration"
        },
        {
          "title": "Azure managed identities documentation",
          "url": "https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/",
          "type": "official-docs",
          "note": "Implementation patterns for managed identity authentication"
        },
        {
          "title": "Application Insights for web applications",
          "url": "https://learn.microsoft.com/azure/azure-monitor/app/app-insights-overview",
          "type": "official-docs",
          "note": "Monitoring and diagnostics configuration guidance"
        },
        {
          "title": "Azure Architecture Center: AI + Machine Learning",
          "url": "https://learn.microsoft.com/azure/architecture/browse/?products=ai-services",
          "type": "architecture-guidance",
          "note": "Reference architectures and best practices for AI solutions"
        },
        {
          "title": "Azure OpenAI Service quotas and limits",
          "url": "https://learn.microsoft.com/azure/ai-services/openai/quotas-limits",
          "type": "reference",
          "note": "Capacity planning and throttling considerations"
        }
      ]
    },
    "careerPathways": {
      "aiEngineer": {
        "description": "Progress from deploying AI applications to designing comprehensive AI solution architectures",
        "progression": [
          "Deploy AI applications on Azure App Service (this module)",
          "Implement RAG patterns with Azure AI Search",
          "Build multi-service AI orchestrations",
          "Design enterprise AI platforms",
          "Architect responsible AI governance frameworks"
        ],
        "certificationPath": "AI-102 → AZ-305 → Microsoft Certified: Azure AI Engineer Associate → Azure Solutions Architect Expert"
      },
      "developer": {
        "description": "Expand from web application deployment to full-stack intelligent application development",
        "progression": [
          "Deploy applications on Azure App Service (this module)",
          "Integrate AI capabilities into web apps",
          "Build serverless AI functions",
          "Implement microservices with AI",
          "Lead cloud-native AI development teams"
        ],
        "certificationPath": "AZ-204 → AZ-400 (DevOps) → Microsoft Certified: Azure Developer Associate → DevOps Engineer Expert"
      },
      "solutionArchitect": {
        "description": "Advance from tactical deployment decisions to strategic AI solution architecture",
        "progression": [
          "Evaluate hosting options for AI workloads (this module)",
          "Design secure AI integration patterns",
          "Architect multi-region AI solutions",
          "Lead enterprise AI transformation",
          "Define cloud AI strategy and governance"
        ],
        "certificationPath": "AZ-305 → SC-100 (Security) → Microsoft Certified: Azure Solutions Architect Expert → Cybersecurity Architect Expert"
      }
    },
    "industryApplications": [
      {
        "industry": "Retail",
        "useCase": "Product recommendation engines, intelligent chatbots for customer service, inventory optimization",
        "relevantSkills": "Azure OpenAI integration, real-time scaling, cost optimization"
      },
      {
        "industry": "Healthcare",
        "useCase": "Clinical decision support systems, patient communication automation, medical document analysis",
        "relevantSkills": "Managed identity security, HIPAA compliance, private endpoints"
      },
      {
        "industry": "Financial Services",
        "useCase": "Fraud detection APIs, automated document processing, customer insights platforms",
        "relevantSkills": "High-availability deployment, secure authentication, regulatory compliance monitoring"
      },
      {
        "industry": "Manufacturing",
        "useCase": "Predictive maintenance dashboards, quality control automation, supply chain optimization",
        "relevantSkills": "IoT data integration, batch processing, application performance monitoring"
      }
    ],
    "searchOptimization": {
      "primaryIntent": "Deploy AI applications on Azure",
      "secondaryIntents": [
        "Integrate Azure OpenAI with web apps",
        "Secure AI service authentication",
        "Monitor production AI workloads",
        "Scale intelligent applications"
      ],
      "competitorTerms": [
        "AWS Bedrock deployment",
        "Google Cloud AI Platform hosting",
        "Heroku AI app deployment"
      ],
      "microsoftAdvantages": [
        "Native Azure OpenAI integration",
        "Managed identity eliminates credential management",
        "Integrated Application Insights monitoring",
        "Seamless scaling with auto-scale rules"
      ]
    }
  }
}